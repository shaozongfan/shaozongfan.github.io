"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[5802],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=s(n),f=i,m=d["".concat(o,".").concat(f)]||d[f]||p[f]||c;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,a=new Array(c);a[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var s=2;s<c;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35678:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return p}});var r=n(87462),i=n(63366),c=(n(67294),n(3905)),a=["components"],u={},o=void 0,s={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3",title:"15.2\u3000Linux I2 C\u6838\u5fc3",description:"I2 C\u6838\u5fc3\uff08drivers/i2c/i2c-core.c\uff09\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u4f9d\u8d56\u4e8e\u786c\u4ef6\u5e73\u53f0\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e00\u822c\u4e0d\u9700\u8981\u88ab\u5de5\u7a0b\u5e08\u4fee\u6539\uff0c\u4f46\u662f\u7406\u89e3\u5176\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u975e\u5e38\u5173\u952e\uff0c\u56e0\u4e3aI2 C\u603b\u7ebf\u9a71\u52a8\u548c\u8bbe\u5907\u9a71\u52a8\u4e4b\u95f4\u4ee5I2 C\u6838\u5fc3\u4f5c\u4e3a\u7ebd\u5e26\u3002I2 C\u6838\u5fc3\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u5982\u4e0b\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.2\u3000Linux I2 C\u6838\u5fc3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784"},next:{title:"15.3.1\u3000I2 C\u9002\u914d\u5668\u9a71\u52a8\u7684\u6ce8\u518c\u4e0e\u6ce8\u9500",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.3\u3000Linux I2 C\u9002\u914d\u5668\u9a71\u52a8"}},l={},p=[],d={toc:p};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"I2 C\u6838\u5fc3\uff08drivers/i2c/i2c-core.c\uff09\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u4f9d\u8d56\u4e8e\u786c\u4ef6\u5e73\u53f0\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e00\u822c\u4e0d\u9700\u8981\u88ab\u5de5\u7a0b\u5e08\u4fee\u6539\uff0c\u4f46\u662f\u7406\u89e3\u5176\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u975e\u5e38\u5173\u952e\uff0c\u56e0\u4e3aI2 C\u603b\u7ebf\u9a71\u52a8\u548c\u8bbe\u5907\u9a71\u52a8\u4e4b\u95f4\u4ee5I2 C\u6838\u5fc3\u4f5c\u4e3a\u7ebd\u5e26\u3002I2 C\u6838\u5fc3\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u5982\u4e0b\u3002"),(0,c.kt)("p",null,"\uff081\uff09\u589e\u52a0/\u5220\u9664i2c_adapter"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"int i2c_add_adapter(struct i2c_adapter *adap);\nvoid i2c_del_adapter(struct i2c_adapter *adap);\n")),(0,c.kt)("p",null,"\uff082\uff09\u589e\u52a0/\u5220\u9664i2c_driver"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"int i2c_register_driver(struct module *owner, struct i2c_driver *driver);\nvoid i2c_del_driver(struct i2c_driver *driver);\n#define i2c_add_driver(driver) \\\n        i2c_register_driver(THIS_MODULE, driver)\n")),(0,c.kt)("p",null,"\uff083\uff09I2 C\u4f20\u8f93\u3001\u53d1\u9001\u548c\u63a5\u6536"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg *msgs, int num);\nint i2c_master_send(struct i2c_client *client,const char *buf ,int count);\nint i2c_master_recv(struct i2c_client *client, char *buf ,int count);\n")),(0,c.kt)("p",null,"i2c_transfer\uff08\uff09\u51fd\u6570\u7528\u4e8e\u8fdb\u884cI2 C\u9002\u914d\u5668\u548cI2 C\u8bbe\u5907\u4e4b\u95f4\u7684\u4e00\u7ec4\u6d88\u606f\u4ea4\u4e92\uff0c\u5176\u4e2d\u7b2c2\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u5411i2c_msg\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6240\u4ee5i2c_transfer\uff08\uff09\u4e00\u6b21\u53ef\u4ee5\u4f20\u8f93\u591a\u4e2ai2c_msg\uff08\u8003\u8651\u5230\u5f88\u591a\u5916\u8bbe\u7684\u8bfb\u5199\u6ce2\u5f62\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u5982\u8bfb\u5bc4\u5b58\u5668\u53ef\u80fd\u8981\u5148\u5199\uff0c\u6240\u4ee5\u9700\u8981\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6d88\u606f\uff09\u3002\u800c\u5bf9\u4e8e\u65f6\u5e8f\u6bd4\u8f83\u7b80\u5355\u7684\u5916\u8bbe\uff0ci2c_master_send\uff08\uff09\u51fd\u6570\u548ci2c_master_recv\uff08\uff09\u51fd\u6570\u5185\u90e8\u4f1a\u8c03\u7528i2c_transfer\uff08\uff09\u51fd\u6570\u5206\u522b\u5b8c\u6210\u4e00\u6761\u5199\u6d88\u606f\u548c\u4e00\u6761\u8bfb\u6d88\u606f\uff0c\u5982\u4ee3\u7801\u6e05\u535515.6\u300115.7\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.6\u3000I2 C\u6838\u5fc3\u7684i2c_master_send\uff08\uff09\u51fd\u6570"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1int i2c_master_send(const struct i2c_client *client, const char *buf, int count)\n 2{\n 3         int ret;\n 4         struct i2c_adapter *adap = client->adapter;\n 5         struct i2c_msg msg;\n 6\n 7         msg.addr = client->addr;\n 8         msg.flags = client->flags & I2C_M_TEN;\n 9         msg.len = count;\n10         msg.buf = (char *)buf;\n11\n12         ret = i2c_transfer(adap, &msg, 1);\n13\n14         /*\n15          * If everything went ok (i.e. 1 msg transmitted), return #bytes\n16          * transmitted, else error code.\n17          */\n18         return (ret == 1)   count : ret;\n19}\n")),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.7\u3000I2 C\u6838\u5fc3\u7684i2c_master_recv\uff08\uff09\u51fd\u6570"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1int i2c_master_recv(const struct i2c_client *client, char *buf, int count)\n 2{\n 3         struct i2c_adapter *adap = client->adapter;\n 4         struct i2c_msg msg;\n 5         int ret;\n 6\n 7         msg.addr = client->addr;\n 8         msg.flags = client->flags & I2C_M_TEN;\n 9         msg.flags |= I2C_M_RD;\n10         msg.len = count;\n11         msg.buf = buf;\n12\n13         ret = i2c_transfer(adap, &msg, 1);\n14\n15         /*\n16          * If everything went ok (i.e. 1 msg received), return #bytes received,\n17          * else error code.\n18          */\n19         return (ret == 1)   count : ret;\n20}\n")),(0,c.kt)("p",null,"i2c_transfer\uff08\uff09\u51fd\u6570\u672c\u8eab\u4e0d\u5177\u5907\u9a71\u52a8\u9002\u914d\u5668\u7269\u7406\u786c\u4ef6\u4ee5\u5b8c\u6210\u6d88\u606f\u4ea4\u4e92\u7684\u80fd\u529b\uff0c\u5b83\u53ea\u662f\u5bfb\u627e\u5230\u4e0ei2c_adapter\u5bf9\u5e94\u7684i2c_algorithm\uff0c\u5e76\u4f7f\u7528i2c_algorithm\u7684master_xfer\uff08\uff09\u51fd\u6570\u771f\u6b63\u9a71\u52a8\u786c\u4ef6\u6d41\u7a0b\uff0c\u5982\u4ee3\u7801\u6e05\u535515.8\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.8\u3000I2 C\u6838\u5fc3\u7684i2c_transfer\uff08\uff09\u51fd\u6570"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},' 1int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg *msgs, int num)\n 2{\n 3   int ret;\n 4\n 5   if (adap->algo->master_xfer) {\n 6       ...\n 7       ret = adap->algo->master_xfer(adap,msgs,num);\n 8       ...\n 9       return ret;\n10   } else {\n11       dev_dbg(&adap->dev, "I2C level transfers not supported\\n");\n12       return -ENOSYS;\n13   }\n14}\n')))}f.isMDXComponent=!0}}]);