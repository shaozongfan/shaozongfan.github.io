"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[931],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),m=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=m(t),f=o,d=s["".concat(a,".").concat(f)]||s[f]||p[f]||l;return t?r.createElement(d,u(u({ref:n},c),{},{components:t})):r.createElement(d,u({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,u=new Array(l);u[0]=s;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,u[1]=i;for(var m=2;m<l;m++)u[m]=t[m];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},98305:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return p}});var r=t(87462),o=t(63366),l=(t(67294),t(3905)),u=["components"],i={},a=void 0,m={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8",title:"7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8",description:"\u5728globalmem\uff08\uff09\u7684\u8bfb\u5199\u51fd\u6570\u4e2d\uff0c\u7531\u4e8e\u8981\u8c03\u7528copyfromuser\uff08\uff09\u3001copytouser\uff08\uff09\u8fd9\u4e9b\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u5b9c\u4f7f\u7528\u4e92\u65a5\u4f53\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.9\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u7684\u8bbe\u5907\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"7.8\u3000\u5b8c\u6210\u91cf",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.8\u3000\u5b8c\u6210\u91cf"},next:{title:"8.1\u3000\u963b\u585e\u4e0e\u975e\u963b\u585eIO",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.1\u3000\u963b\u585e\u4e0e\u975e\u963b\u585eIO"}},c={},p=[],s={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u5728globalmem\uff08\uff09\u7684\u8bfb\u5199\u51fd\u6570\u4e2d\uff0c\u7531\u4e8e\u8981\u8c03\u7528copy_from_user\uff08\uff09\u3001copy_to_user\uff08\uff09\u8fd9\u4e9b\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u5b9c\u4f7f\u7528\u4e92\u65a5\u4f53\u3002"),(0,l.kt)("p",null,"\u9a71\u52a8\u5de5\u7a0b\u5e08\u4e60\u60ef\u5c06\u67d0\u8bbe\u5907\u6240\u4f7f\u7528\u7684\u81ea\u65cb\u9501\u3001\u4e92\u65a5\u4f53\u7b49\u8f85\u52a9\u624b\u6bb5\u4e5f\u653e\u5728\u8bbe\u5907\u7ed3\u6784\u4e2d\uff0c\u56e0\u6b64\uff0c\u53ef\u5982\u4ee3\u7801\u6e05\u53557.4\u90a3\u6837\u4fee\u6539globalmem_dev\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u5e76\u5728\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u8fd9\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5982\u4ee3\u7801\u6e05\u53557.5\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53557.4\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u8bbe\u5907\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct globalmem_dev {\n 2      struct cdev cdev;\n 3      unsigned char mem[GLOBALMEM_SIZE];\n 4      struct mutex mutex;\n 5};\n")),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53557.5\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u8bbe\u5907\u9a71\u52a8\u6a21\u5757\u52a0\u8f7d\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static int __init globalmem_init(void)\n 2{\n 3  int ret;\n 4  dev_t devno = MKDEV(globalmem_major, 0);\n 5\n 6  if (globalmem_major)\n 7       ret = register_chrdev_region(devno, 1, "globalmem");\n 8  else {\n 9       ret = alloc_chrdev_region(&devno, 0, 1, "globalmem");\n10       globalmem_major = MAJOR(devno);\n11  }\n12  if (ret < 0)\n13       return ret;\n14\n15  globalmem_devp = kzalloc(sizeof(struct globalmem_dev), GFP_KERNEL);\n16  if (!globalmem_devp) {\n17       ret = -ENOMEM;\n18       goto fail_malloc;\n19  }\n20\n21  mutex_init(&globalmem_devp->mutex);\n22  globalmem_setup_cdev(globalmem_devp, 0);\n23  return 0;\n24\n25 fail_malloc:\n26  unregister_chrdev_region(devno, 1);\n27  return ret;\n28}\n29module_init(globalmem_init);\n')),(0,l.kt)("p",null,"\u5728\u8bbf\u95eeglobalmem_dev\u4e2d\u7684\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u9700\u5148\u83b7\u53d6\u8fd9\u4e2a\u4e92\u65a5\u4f53\uff0c\u8bbf\u95ee\u5b8c\u6210\u540e\uff0c\u968f\u5373\u91ca\u653e\u8fd9\u4e2a\u4e92\u65a5\u4f53\u3002\u9a71\u52a8\u4e2d\u65b0\u7684globalmem\u8bfb\u3001\u5199\u64cd\u4f5c\u5982\u4ee3\u7801\u6e05\u53557.6\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53557.6\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u8bfb\u3001\u5199\u64cd\u4f5c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static ssize_t globalmem_read(struct file *filp, char __user * buf, size_t size,\n 2              loff_t * ppos)\n 3{\n 4 unsigned long p = *ppos;\n 5 unsigned int count = size;\n 6 int ret = 0;\n 7 struct globalmem_dev *dev = filp->private_data;\n 8\n 9 if (p >= GLOBALMEM_SIZE)\n10      return 0;\n11 if (count > GLOBALMEM_SIZE - p)\n12      count = GLOBALMEM_SIZE - p;\n13\n14 mutex_lock(&dev->mutex);\n15\n16 if (copy_to_user(buf, dev->mem + p, count)) {\n17      ret = -EFAULT;\n18 } else {\n19      *ppos += count;\n20      ret = count;\n21\n22      printk(KERN_INFO "read %u bytes(s) from %lu\\n", count, p);\n23 }\n24\n25 mutex_unlock(&dev->mutex);\n26\n27 return ret;\n28}\n29\n30static ssize_t globalmem_write(struct file *filp, const char __user * buf,\n31                size_t size, loff_t * ppos)\n32{\n33 unsigned long p = *ppos;\n34 unsigned int count = size;\n35 int ret = 0;\n36 struct globalmem_dev *dev = filp->private_data;\n37\n38 if (p >= GLOBALMEM_SIZE)\n39      return 0;\n40 if (count > GLOBALMEM_SIZE - p)\n41      count = GLOBALMEM_SIZE - p;\n42\n43 mutex_lock(&dev->mutex);\n44\n45 if (copy_from_user(dev->mem + p, buf, count))\n46      ret = -EFAULT;\n47 else {\n48      *ppos += count;\n49      ret = count;\n50\n51      printk(KERN_INFO "written %u bytes(s) from %lu\\n", count, p);\n52 }\n53\n54 mutex_unlock(&dev->mutex);\n55\n56 return ret;\n57}\n')),(0,l.kt)("p",null,"\u4ee3\u7801\u7b2c14\u884c\u548c\u7b2c43\u884c\u7528\u4e8e\u83b7\u53d6\u4e92\u65a5\u4f53\uff0c\u4ee3\u7801\u7b2c25\u548c54\u884c\u7528\u4e8e\u5728\u5bf9\u4e34\u754c\u8d44\u6e90\u8bbf\u95ee\u7ed3\u675f\u540e\u91ca\u653e\u4fe1\u53f7\u91cf\u3002"),(0,l.kt)("p",null,"\u9664\u4e86globalmem\u7684\u8bfb\u3001\u5199\u64cd\u4f5c\u4e4b\u5916\uff0c\u5982\u679c\u5728\u8bfb\u3001\u5199\u7684\u540c\u65f6\uff0c\u53e6\u4e00\u4e2a\u6267\u884c\u5355\u5143\u6267\u884cMEM_CLEAR IO\u63a7\u5236\u547d\u4ee4\uff0c\u4e5f\u4f1a\u5bfc\u81f4\u5168\u5c40\u5185\u5b58\u7684\u6df7\u4e71\uff0c\u56e0\u6b64\uff0cglobalmem_ioctl\uff08\uff09\u51fd\u6570\u4e5f\u9700\u88ab\u91cd\u5199\uff0c\u5982\u4ee3\u7801\u6e05\u53557.7\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53557.7\u3000\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540e\u7684globalmem\u8bbe\u5907\u9a71\u52a8ioctl\uff08\uff09\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static long globalmem_ioctl(struct file *filp, unsigned int cmd,\n 2             unsigned long arg)\n 3{\n 4 struct globalmem_dev *dev = filp->private_data;   /*   \u03bc\n\n\n \xe9\xe8\xb1  \xe111\xec      */\n 5\n 6 switch (cmd) {\n 7 case MEM_CLEAR:\n 8     mutex_lock(&dev->mutex);\n 9     memset(dev->mem, 0, GLOBALMEM_SIZE);\n10     mutex_unlock(&dev->mutex);\n11\n12     printk(KERN_INFO "globalmem is set to zero\\n");\n13     break;\n14\n15 default:\n16     return -EINVAL;\n17 }\n18\n19 return 0;\n20}\n')),(0,l.kt)("p",null,"\u589e\u52a0\u5e76\u53d1\u63a7\u5236\u540eglobalmem\u7684\u5b8c\u6574\u9a71\u52a8\u4f4d\u4e8e\u672c\u4e66\u865a\u62df\u673a\u7684\u4f8b\u5b50/kernel/drivers/globalmem/ch7\u76ee\u5f55\u4e0b\uff0c\u5176\u4f7f\u7528\u65b9\u6cd5\u4e0e\u7b2c6\u7ae0globalmem\u9a71\u52a8\u5728\u7528\u6237\u7a7a\u95f4\u7684\u9a8c\u8bc1\u4e00\u81f4\u3002"))}f.isMDXComponent=!0}}]);