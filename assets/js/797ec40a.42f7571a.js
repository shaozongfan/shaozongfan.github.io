"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[94953],{3905:function(e,n,t){t.d(n,{Zo:function(){return a},kt:function(){return d}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},a=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,a=c(e,["components","mdxType","originalType","parentName"]),g=u(t),d=r,f=g["".concat(s,".").concat(d)]||g[d]||l[d]||o;return t?i.createElement(f,p(p({ref:n},a),{},{components:t})):i.createElement(f,p({ref:n},a))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,p=new Array(o);p[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,p[1]=c;for(var u=2;u<o;u++)p[u]=t[u];return i.createElement.apply(null,p)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},80053:function(e,n,t){t.r(n),t.d(n,{assets:function(){return a},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var i=t(87462),r=t(63366),o=(t(67294),t(3905)),p=["components"],c={},s=void 0,u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.6\u3000GPIO\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.6\u3000GPIO\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.6\u3000GPIO\u9a71\u52a8.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.6\u3000GPIO\u9a71\u52a8",description:"\u5728drivers/gpio\u4e0b\u5b9e\u73b0\u4e86\u901a\u7528\u7684\u57fa\u4e8egpiolib\u7684GPIO\u9a71\u52a8\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u7528\u4e8e\u63cf\u8ff0\u5e95\u5c42GPIO\u63a7\u5236\u5668\u7684gpiochip\u7ed3\u6784\u4f53\uff0c\u5e76\u8981\u6c42\u5177\u4f53\u7684SoC\u5b9e\u73b0gpiochip\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\uff0c\u6700\u540e\u901a\u8fc7gpiochipadd\uff08\uff09\u6ce8\u518cgpiochip\u3002GPIO\u9a71\u52a8\u53ef\u4ee5\u5b58\u5728\u4e8edrivers/gpio\u76ee\u5f55\u4e2d\uff0c\u4f46\u662f\u5728GPIO\u517c\u6709\u591a\u79cd\u529f\u80fd\u4e14\u9700\u8981\u590d\u6742\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0cGPIO\u7684\u9a71\u52a8\u90e8\u5206\u5f80\u5f80\u76f4\u63a5\u79fb\u5230drivers/pinctrl\u76ee\u5f55\u4e0b\u5e76\u8fde\u540cpinmux\u4e00\u8d77\u5b9e\u73b0\uff0c\u800c\u4e0d\u5b58\u5728\u4e8edrivers/gpio\u76ee\u5f55\u4e2d\u3002",date:"2025-09-15T14:44:14.077Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:4.235,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.5\u3000\u603b\u7ed3",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.5\u3000\u603b\u7ed3"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/4.7\u3000\u6a21\u5757\u58f0\u660e\u4e0e\u63cf\u8ff0",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/4.7\u3000\u6a21\u5757\u58f0\u660e\u4e0e\u63cf\u8ff0"}},a={authorsImageUrls:[]},l=[],g={toc:l};function d(e){var n=e.components,t=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u5728drivers/gpio\u4e0b\u5b9e\u73b0\u4e86\u901a\u7528\u7684\u57fa\u4e8egpiolib\u7684GPIO\u9a71\u52a8\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u7528\u4e8e\u63cf\u8ff0\u5e95\u5c42GPIO\u63a7\u5236\u5668\u7684gpio_chip\u7ed3\u6784\u4f53\uff0c\u5e76\u8981\u6c42\u5177\u4f53\u7684SoC\u5b9e\u73b0gpio_chip\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\uff0c\u6700\u540e\u901a\u8fc7gpiochip_add\uff08\uff09\u6ce8\u518cgpio_chip\u3002GPIO\u9a71\u52a8\u53ef\u4ee5\u5b58\u5728\u4e8edrivers/gpio\u76ee\u5f55\u4e2d\uff0c\u4f46\u662f\u5728GPIO\u517c\u6709\u591a\u79cd\u529f\u80fd\u4e14\u9700\u8981\u590d\u6742\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0cGPIO\u7684\u9a71\u52a8\u90e8\u5206\u5f80\u5f80\u76f4\u63a5\u79fb\u5230drivers/pinctrl\u76ee\u5f55\u4e0b\u5e76\u8fde\u540cpinmux\u4e00\u8d77\u5b9e\u73b0\uff0c\u800c\u4e0d\u5b58\u5728\u4e8edrivers/gpio\u76ee\u5f55\u4e2d\u3002"),(0,o.kt)("p",null,"gpio_chip\u7ed3\u6784\u4f53\u5c01\u88c5\u4e86\u5e95\u5c42\u786c\u4ef6\u7684GPIO enable\uff08\uff09/disable\uff08\uff09\u7b49\u64cd\u4f5c\uff0c\u5b83\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535520.15\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.15\u3000gpio_chip\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct gpio_chip {\n 2        const char           *label;\n 3        struct device        *dev;\n 4        struct module        *owner;\n 5\n 6        int                  (*request)(struct gpio_chip *chip,\n 7                                             unsigned offset);\n 8        void                 (*free)(struct gpio_chip *chip,\n 9                                             unsigned offset);\n10\n11        int                  (*direction_input)(struct gpio_chip *chip,\n12                                             unsigned offset);\n13        int                  (*get)(struct gpio_chip *chip,\n14                                             unsigned offset);\n15        int                  (*direction_output)(struct gpio_chip *chip,\n16                                             unsigned offset, int value);\n17        int                  (*set_debounce)(struct gpio_chip *chip,\n18                                        unsigned offset, unsigned debounce);\n19\n20        void                 (*set)(struct gpio_chip *chip,\n21                                             unsigned offset, int value);\n22\n23        int                  (*to_irq)(struct gpio_chip *chip,\n24                                             unsigned offset);\n25\n26        void                 (*dbg_show)(struct seq_file *s,\n27                                             struct gpio_chip *chip);\n28        int                  base;\n29        u16                  ngpio;\n30        const char           *const *names;\n31        unsigned             can_sleep:1;\n32        unsigned             exported:1;\n33\n34#if defined(CONFIG_OF_GPIO)\n35        /*\n36         * If CONFIG_OF is enabled, then all GPIO controllers described in the\n37         * device tree automatically may have an OF translation\n38         */\n39        struct device_node *of_node;\n40        int of_gpio_n_cells;\n41        int (*of_xlate)(struct gpio_chip *gc,\n42                        const struct of_phandle_args *gpiospec, u32 *flags);\n43#endif\n44};\n")),(0,o.kt)("p",null,"\u901a\u8fc7\u8fd9\u5c42\u5c01\u88c5\uff0c\u6bcf\u4e2a\u5177\u4f53\u7684\u8981\u7528\u5230GPIO\u7684\u8bbe\u5907\u9a71\u52a8\u90fd\u4f7f\u7528\u901a\u7528\u7684GPIO API\u6765\u64cd\u4f5cGPIO\uff0c\u8fd9\u4e9bAPI\u4e3b\u8981\u7528\u4e8eGPIO\u7684\u7533\u8bf7\u3001\u91ca\u653e\u548c\u8bbe\u7f6e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int gpio_request(unsigned gpio, const char *label);\nvoid gpio_free(unsigned gpio);\nint gpio_direction_input(unsigned gpio);\nint gpio_direction_output(unsigned gpio, int value);\nint gpio_set_debounce(unsigned gpio, unsigned debounce);\nint gpio_get_value_cansleep(unsigned gpio);\nvoid gpio_set_value_cansleep(unsigned gpio, int value);\nint gpio_request_one(unsigned gpio, unsigned long flags, const char *label);\nint gpio_request_array(const struct gpio *array, size_t num);\nvoid gpio_free_array(const struct gpio *array, size_t num);\nint devm_gpio_request(struct device *dev, unsigned gpio, const char *label);\nint devm_gpio_request_one(struct device *dev, unsigned gpio,\n                         unsigned long flags, const char *label);\nvoid devm_gpio_free(struct device *dev, unsigned int gpio);\n")),(0,o.kt)("p",null,"\u6ce8\u610f\uff1a \u5185\u6838\u4e2d\u9488\u5bf9\u5185\u5b58\u3001IRQ\u3001\u65f6\u949f\u3001GPIO\u3001pinctrl\u3001Regulator\u90fd\u6709\u4ee5devm_\u5f00\u5934\u7684API\uff0c\u4f7f\u7528\u8fd9\u90e8\u5206API\u7684\u65f6\u5019\uff0c\u5185\u6838\u4f1a\u6709\u7c7b\u4f3c\u4e8eJava\u7684\u8d44\u6e90\u81ea\u52a8\u56de\u6536\u673a\u5236\uff0c\u56e0\u6b64\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u51fa\u9519\u5904\u7406\u65f6\uff0c\u65e0\u987b\u91ca\u653e\u76f8\u5173\u7684\u8d44\u6e90\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8eGPIO\u800c\u8a00\uff0c\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5185\u6838\u4f1a\u521b\u5efa/sys\u8282\u70b9/sys/class/gpio/gpioN/\uff0c\u901a\u8fc7\u5b83\u6211\u4eec\u53ef\u4ee5echo\u503c\u4ece\u800c\u6539\u53d8GPIO\u7684\u65b9\u5411\u3001\u8bbe\u7f6e\u5e76\u83b7\u53d6GPIO\u7684\u503c\u3002"),(0,o.kt)("p",null,"\u5728\u62e5\u6709\u8bbe\u5907\u6811\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u5907\u6811\u6765\u63cf\u8ff0\u67d0GPIO\u63a7\u5236\u5668\u63d0\u4f9b\u7684GPIO\u5f15\u811a\u88ab\u5177\u4f53\u8bbe\u5907\u4f7f\u7528\u7684\u60c5\u51b5\u3002\u5728GPIO\u63a7\u5236\u5668\u5bf9\u5e94\u7684\u8282\u70b9\u4e2d\uff0c\u9700\u5b9a\u4e49#gpio-cells\u548cgpio-controller\u5c5e\u6027\uff0c\u5177\u4f53\u7684\u8bbe\u5907\u8282\u70b9\u5219\u901a\u8fc7xxx-gpios\u5c5e\u6027\u6765\u5f15\u7528GPIO\u63a7\u5236\u5668\u8282\u70b9\u53caGPIO\u5f15\u811a\u3002"),(0,o.kt)("p",null,"\u5982VEXPRESS\u7535\u8def\u677fDT\u6587\u4ef6arch/arm/boot/dts/vexpress-v2m.dtsi\u4e2d\u6709\u5982\u4e0bGPIO\u63a7\u5236\u5668\u8282\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'v2m_sysreg: sysreg@00000 {\n        compatible = "arm,vexpress-sysreg";\n        reg = <0x00000 0x1000>;\n        gpio-controller;\n        #gpio-cells = <2>;\n};\n')),(0,o.kt)("p",null,"VEXPRESS\u7535\u8def\u677f\u4e0a\u7684MMC\u63a7\u5236\u5668\u4f1a\u4f7f\u7528\u8be5\u8282\u70b9GPIO\u63a7\u5236\u5668\u63d0\u4f9b\u7684GPIO\u5f15\u811a\uff0c\u5219\u5177\u4f53\u7684mmci@05000\u8bbe\u5907\u8282\u70b9\u4f1a\u901a\u8fc7-gpios\u5c5e\u6027\u5f15\u7528GPIO\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mmci@05000 {\n        compatible = "arm,pl180", "arm,primecell";\n        reg = <0x05000 0x1000>;\n        interrupts = <9 10>;\n        cd-gpios = <&v2m_sysreg 0 0>;\n        wp-gpios = <&v2m_sysreg 1 0>;\n        \u2026\n\n};\n')),(0,o.kt)("p",null,"\u5176\u4e2d\u7684cd-gpios\u7528\u4e8eSD/MMC\u5361\u7684\u63a2\u6d4b\uff0c\u800cwp-gpios\u7528\u4e8e\u5199\u4fdd\u62a4\uff0cMMC\u4e3b\u673a\u63a7\u5236\u5668\u9a71\u52a8\u4f1a\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u83b7\u53d6\u8fd9\u4e24\u4e2aGPIO\uff0c\u8be6\u89c1\u4e8edrivers/mmc/host/mmci.c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'static void mmci_dt_populate_generic_pdata(struct device_node *np,\n                                        struct mmci_platform_data *pdata)\n{\n        ...\n        pdata->gpio_wp = of_get_named_gpio(np, "wp-gpios", 0);\n        pdata->gpio_cd = of_get_named_gpio(np, "cd-gpios", 0);\n        ...\n}\n')))}d.isMDXComponent=!0}}]);