"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[75397],{3905:function(e,n,t){t.d(n,{Zo:function(){return _},kt:function(){return p}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},_=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},a=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,_=s(e,["components","mdxType","originalType","parentName"]),a=l(t),p=i,m=a["".concat(c,".").concat(p)]||a[p]||u[p]||o;return t?r.createElement(m,d(d({ref:n},_),{},{components:t})):r.createElement(m,d({ref:n},_))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,d=new Array(o);d[0]=a;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,d[1]=s;for(var l=2;l<o;l++)d[l]=t[l];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}a.displayName="MDXCreateElement"},50192:function(e,n,t){t.r(n),t.d(n,{assets:function(){return _},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),d=["components"],s={},c="10.5.1\u3000\u5185\u6838\u5b9a\u65f6\u5668\u7f16\u7a0b",l={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668",title:"10.5.1\u3000\u5185\u6838\u5b9a\u65f6\u5668\u7f16\u7a0b",description:"\u8f6f\u4ef6\u610f\u4e49\u4e0a\u7684\u5b9a\u65f6\u5668\u6700\u7ec8\u4f9d\u8d56\u786c\u4ef6\u5b9a\u65f6\u5668\u6765\u5b9e\u73b0\uff0c\u5185\u6838\u5728\u65f6\u949f\u4e2d\u65ad\u53d1\u751f\u540e\u68c0\u6d4b\u5404\u5b9a\u65f6\u5668\u662f\u5426\u5230\u671f\uff0c\u5230\u671f\u540e\u7684\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u5c06\u4f5c\u4e3a\u8f6f\u4e2d\u65ad\u5728\u5e95\u534a\u90e8\u6267\u884c\u3002\u5b9e\u8d28\u4e0a\uff0c\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4f1a\u5524\u8d77TIMER_SOFTIRQ\u8f6f\u4e2d\u65ad\uff0c\u8fd0\u884c\u5f53\u524d\u5904\u7406\u5668\u4e0a\u5230\u671f\u7684\u6240\u6709\u5b9a\u65f6\u5668\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.5\u3000\u5185\u6838\u5b9a\u65f6\u5668.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"10.4\u3000\u4e2d\u65ad\u5171\u4eab",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.4\u3000\u4e2d\u65ad\u5171\u4eab"},next:{title:"10.6.1\u3000\u77ed\u5ef6\u8fdf",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.6\u3000\u5185\u6838\u5ef6\u65f6"}},_={},u=[],a={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,d);return(0,o.kt)("wrapper",(0,r.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1051\u5185\u6838\u5b9a\u65f6\u5668\u7f16\u7a0b"},"10.5.1\u3000\u5185\u6838\u5b9a\u65f6\u5668\u7f16\u7a0b"),(0,o.kt)("p",null,"\u8f6f\u4ef6\u610f\u4e49\u4e0a\u7684\u5b9a\u65f6\u5668\u6700\u7ec8\u4f9d\u8d56\u786c\u4ef6\u5b9a\u65f6\u5668\u6765\u5b9e\u73b0\uff0c\u5185\u6838\u5728\u65f6\u949f\u4e2d\u65ad\u53d1\u751f\u540e\u68c0\u6d4b\u5404\u5b9a\u65f6\u5668\u662f\u5426\u5230\u671f\uff0c\u5230\u671f\u540e\u7684\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u5c06\u4f5c\u4e3a\u8f6f\u4e2d\u65ad\u5728\u5e95\u534a\u90e8\u6267\u884c\u3002\u5b9e\u8d28\u4e0a\uff0c\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4f1a\u5524\u8d77TIMER_SOFTIRQ\u8f6f\u4e2d\u65ad\uff0c\u8fd0\u884c\u5f53\u524d\u5904\u7406\u5668\u4e0a\u5230\u671f\u7684\u6240\u6709\u5b9a\u65f6\u5668\u3002"),(0,o.kt)("p",null,"\u5728Linux\u8bbe\u5907\u9a71\u52a8\u7f16\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5229\u7528Linux\u5185\u6838\u4e2d\u63d0\u4f9b\u7684\u4e00\u7ec4\u51fd\u6570\u548c\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\u5b9a\u65f6\u89e6\u53d1\u5de5\u4f5c\u6216\u8005\u5b8c\u6210\u67d0\u5468\u671f\u6027\u7684\u4e8b\u52a1\u3002\u8fd9\u7ec4\u51fd\u6570\u548c\u6570\u636e\u7ed3\u6784\u4f7f\u5f97\u9a71\u52a8\u5de5\u7a0b\u5e08\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684\u8f6f\u4ef6\u5b9a\u65f6\u5668\u7a76\u7adf\u5bf9\u5e94\u7740\u600e\u6837\u7684\u5185\u6838\u548c\u786c\u4ef6\u884c\u4e3a\u3002"),(0,o.kt)("p",null,"Linux\u5185\u6838\u6240\u63d0\u4f9b\u7684\u7528\u4e8e\u64cd\u4f5c\u5b9a\u65f6\u5668\u7684\u6570\u636e\u7ed3\u6784\u548c\u51fd\u6570\u5982\u4e0b\u3002"),(0,o.kt)("p",null,"1.timer_list"),(0,o.kt)("p",null,"\u5728Linux\u5185\u6838\u4e2d\uff0ctimer_list\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u5e94\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5982\u4ee3\u7801\u6e05\u535510.9\u6240\u793a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct timer_list {\n 2        /*\n 3         * All fields that change during normal runtime grouped to the\n 4         * same cacheline\n 5         */\n 6        struct list_head entry;\n 7        unsigned long expires;\n 8        struct tvec_base *base;\n 9\n10        void (*function)(unsigned long);\n11        unsigned long data;\n12\n13        int slack;\n14\n15#ifdef CONFIG_TIMER_STATS\n16        int start_pid;\n17        void *start_site;\n18        char start_comm[16];\n19#endif\n20#ifdef CONFIG_LOCKDEP\n21        struct lockdep_map lockdep_map;\n22#endif\n23};\n")),(0,o.kt)("p",null,"\u5f53\u5b9a\u65f6\u5668\u671f\u6ee1\u540e\uff0c\u5176\u4e2d\u7b2c10\u884c\u7684function\uff08\uff09\u6210\u5458\u5c06\u88ab\u6267\u884c\uff0c\u800c\u7b2c11\u884c\u7684data\u6210\u5458\u5219\u662f\u4f20\u5165\u5176\u4e2d\u7684\u53c2\u6570\uff0c\u7b2c7\u884c\u7684expires\u5219\u662f\u5b9a\u65f6\u5668\u5230\u671f\u7684\u65f6\u95f4\uff08jiffies\uff09\u3002"),(0,o.kt)("p",null,"\u5982\u4e0b\u4ee3\u7801\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3amy_timer\u7684\u5b9a\u65f6\u5668\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct timer_list my_timer;\n")),(0,o.kt)("p",null,"2.\u521d\u59cb\u5316\u5b9a\u65f6\u5668"),(0,o.kt)("p",null,"init_timer\u662f\u4e00\u4e2a\u5b8f\uff0c\u5b83\u7684\u539f\u578b\u7b49\u4ef7\u4e8e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void init_timer(struct timer_list * timer);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0init_timer\uff08\uff09\u51fd\u6570\u521d\u59cb\u5316timer_list\u7684entry\u7684next\u4e3aNULL\uff0c\u5e76\u7ed9base\u6307\u9488\u8d4b\u503c\u3002"),(0,o.kt)("p",null,"TIMER_INITIALIZER\uff08_function\uff0c_expires\uff0c_data\uff09\u5b8f\u7528\u4e8e\u8d4b\u503c\u5b9a\u65f6\u5668\u7ed3\u6784\u4f53\u7684function\u3001expires\u3001data\u548cbase\u6210\u5458\uff0c\u8fd9\u4e2a\u5b8f\u7b49\u4ef7\u4e8e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define TIMER_INITIALIZER(_function, _expires, _data) {        \\\n                      .entry = { .prev = TIMER_ENTRY_STATIC }, \\\n                      .function = (_function),                 \\\n                      .expires = (_expires),                   \\\n                      .data = (_data),                         \\\n                      .base = &boot_tvec_bases,                \\\n        }\n")),(0,o.kt)("p",null,"DEFINE_TIMER\uff08_name\uff0c_function\uff0c_expires\uff0c_data\uff09\u5b8f\u662f\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u5b9a\u65f6\u5668\u6210\u5458\u7684\u201c\u5feb\u6377\u65b9\u5f0f\u201d\uff0c\u8fd9\u4e2a\u5b8f\u5b9a\u4e49\u4e3a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define DEFINE_TIMER(_name, _function, _expires, _data)\\\n              struct timer_list _name =\\\n                            TIMER_INITIALIZER(_function, _expires, _data)\n")),(0,o.kt)("p",null,"\u6b64\u5916\uff0csetup_timer\uff08\uff09\u4e5f\u53ef\u7528\u4e8e\u521d\u59cb\u5316\u5b9a\u65f6\u5668\u5e76\u8d4b\u503c\u5176\u6210\u5458\uff0c\u5176\u6e90\u4ee3\u7801\u4e3a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define __setup_timer(_timer, _fn, _data, _flags)               \\\n        do {                                                    \\\n                __init_timer((_timer), (_flags));               \\\n                (_timer)->function = (_fn);                     \\\n                (_timer)->data = (_data);                       \\\n        } while (0)\n")),(0,o.kt)("p",null,"3.\u589e\u52a0\u5b9a\u65f6\u5668"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void add_timer(struct timer_list * timer);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u51fd\u6570\u7528\u4e8e\u6ce8\u518c\u5185\u6838\u5b9a\u65f6\u5668\uff0c\u5c06\u5b9a\u65f6\u5668\u52a0\u5165\u5230\u5185\u6838\u52a8\u6001\u5b9a\u65f6\u5668\u94fe\u8868\u4e2d\u3002"),(0,o.kt)("p",null,"4.\u5220\u9664\u5b9a\u65f6\u5668"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int del_timer(struct timer_list * timer);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u51fd\u6570\u7528\u4e8e\u5220\u9664\u5b9a\u65f6\u5668\u3002"),(0,o.kt)("p",null,"del_timer_sync\uff08\uff09\u662fdel_timer\uff08\uff09\u7684\u540c\u6b65\u7248\uff0c\u5728\u5220\u9664\u4e00\u4e2a\u5b9a\u65f6\u5668\u65f6\u9700\u7b49\u5f85\u5176\u88ab\u5904\u7406\u5b8c\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u7684\u8c03\u7528\u4e0d\u80fd\u53d1\u751f\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u3002"),(0,o.kt)("p",null,"5.\u4fee\u6539\u5b9a\u65f6\u5668\u7684expire"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int mod_timer(struct timer_list *timer, unsigned long expires);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u51fd\u6570\u7528\u4e8e\u4fee\u6539\u5b9a\u65f6\u5668\u7684\u5230\u671f\u65f6\u95f4\uff0c\u5728\u65b0\u7684\u88ab\u4f20\u5165\u7684expires\u5230\u6765\u540e\u624d\u4f1a\u6267\u884c\u5b9a\u65f6\u5668\u51fd\u6570\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.10\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u5185\u6838\u5b9a\u65f6\u5668\u4f7f\u7528\u6a21\u677f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8bbe\u5907\u9a71\u52a8\u90fd\u5982\u8fd9\u4e2a\u6a21\u677f\u90a3\u6837\u4f7f\u7528\u5b9a\u65f6\u5668\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.10\u3000\u5185\u6838\u5b9a\u65f6\u5668\u4f7f\u7528\u6a21\u677f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1/* xxx\u8bbe\u5907\u7ed3\u6784\u4f53*/\n 2struct xxx_dev {\n 3  struct cdev cdev;\n 4  ...\n 5  timer_list xxx_timer;      /* \u8bbe\u5907\u8981\u4f7f\u7528\u7684\u5b9a\u65f6\u5668 */\n 6};\n 7\n 8/* xxx\u9a71\u52a8\u4e2d\u7684\u67d0\u51fd\u6570*/\n 9xxx_func1(\u2026)\n10{\n11  struct xxx_dev *dev = filp->private_data;\n12  ...\n13  /* \u521d\u59cb\u5316\u5b9a\u65f6\u5668*/\n14  init_timer(&dev->xxx_timer);\n15  dev->xxx_timer.function = &xxx_do_timer;\n16  dev->xxx_timer.data = (unsigned long)dev;\n17                      /* \u8bbe\u5907\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u53c2\u6570*/\n18  dev->xxx_timer.expires = jiffies + delay;\n19  /* \u6dfb\u52a0\uff08\u6ce8\u518c\uff09\u5b9a\u65f6\u5668*/\n20  add_timer(&dev->xxx_timer);\n21  ...\n22}\n23\n24/* xxx\u9a71\u52a8\u4e2d\u7684\u67d0\u51fd\u6570*/\n25xxx_func2(\u2026)\n26{\n27 ...\n28  /* \u5220\u9664\u5b9a\u65f6\u5668 */\n29  del_timer (&dev->xxx_timer);\n30  ...\n31}\n32\n33/* \u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570*/\n34static void xxx_do_timer(unsigned long arg)\n35{\n36  struct xxx_device *dev = (struct xxx_device *)(arg);\n37  ...\n38  /* \u8c03\u5ea6\u5b9a\u65f6\u5668\u518d\u6267\u884c*/\n39  dev->xxx_timer.expires = jiffies + delay;\n40  add_timer(&dev->xxx_timer);\n41  ...\n42}\n")),(0,o.kt)("p",null,"\u4ece\u4ee3\u7801\u6e05\u5355\u7b2c18\u300139\u884c\u53ef\u4ee5\u770b\u51fa\uff0c\u5b9a\u65f6\u5668\u7684\u5230\u671f\u65f6\u95f4\u5f80\u5f80\u662f\u5728\u76ee\u524djiffies\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u65f6\u5ef6\uff0c\u82e5\u4e3aHz\uff0c\u5219\u8868\u793a\u5ef6\u8fdf1s\u3002"),(0,o.kt)("p",null,"\u5728\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u5728\u5b8c\u6210\u76f8\u5e94\u7684\u5de5\u4f5c\u540e\uff0c\u5f80\u5f80\u4f1a\u5ef6\u540eexpires\u5e76\u5c06\u5b9a\u65f6\u5668\u518d\u6b21\u6dfb\u52a0\u5230\u5185\u6838\u5b9a\u65f6\u5668\u94fe\u8868\u4e2d\uff0c\u4ee5\u4fbf\u5b9a\u65f6\u5668\u80fd\u518d\u6b21\u88ab\u89e6\u53d1\u3002"),(0,o.kt)("p",null,"\u6b64\u5916\uff0cLinux\u5185\u6838\u652f\u6301tickless\u548cNO_HZ\u6a21\u5f0f\u540e\uff0c\u5185\u6838\u4e5f\u5305\u542b\u5bf9hrtimer\uff08\u9ad8\u7cbe\u5ea6\u5b9a\u65f6\u5668\uff09\u7684\u652f\u6301\uff0c\u5b83\u53ef\u4ee5\u652f\u6301\u5230\u5fae\u79d2\u7ea7\u522b\u7684\u7cbe\u5ea6\u3002\u5185\u6838\u4e5f\u5b9a\u4e49\u4e86hrtimer\u7ed3\u6784\u4f53\uff0chrtimer_set_expires\uff08\uff09\u3001hrtimer_start_expires\uff08\uff09\u3001hrtimer_forward_now\uff08\uff09\u3001hrtimer_restart\uff08\uff09\u7b49\u7c7b\u4f3c\u7684API\u6765\u5b8c\u6210hrtimer\u7684\u8bbe\u7f6e\u3001\u65f6\u95f4\u63a8\u79fb\u4ee5\u53ca\u5230\u671f\u56de\u8c03\u3002\u6211\u4eec\u53ef\u4ee5\u4ecesound/soc/fsl/imx-pcm-fiq.c\u4e2d\u63d0\u53d6\u51fa\u4e00\u4e2a\u4f7f\u7528\u8303\u4f8b\uff0c\u5982\u4ee3\u7801\u6e05\u535510.11\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.11\u3000\u5185\u6838\u9ad8\u7cbe\u5ea6\u5b9a\u65f6\u5668\uff08hrtimer\uff09\u4f7f\u7528\u6a21\u677f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static enum hrtimer_restart snd_hrtimer_callback(struct hrtimer *hrt)\n 2{\n 3        ...\n 4\n 5        hrtimer_forward_now(hrt, ns_to_ktime(iprtd->poll_time_ns));\n 6\n 7        return HRTIMER_RESTART;\n 8}\n 9\n10static int snd_imx_pcm_trigger(struct snd_pcm_substream *substream, int cmd)\n11{\n12        struct snd_pcm_runtime *runtime = substream->runtime;\n13        struct imx_pcm_runtime_data *iprtd = runtime->private_data;\n14\n15        switch (cmd) {\n16        case SNDRV_PCM_TRIGGER_START:\n17        case SNDRV_PCM_TRIGGER_RESUME:\n18        case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:\n19                ...\n20                hrtimer_start(&iprtd->hrt, ns_to_ktime(iprtd->poll_time_ns),\n21                      HRTIMER_MODE_REL);\n22        ...\n23}\n24\n25static int snd_imx_open(struct snd_pcm_substream *substream)\n26{\n27        ...\n28        hrtimer_init(&iprtd->hrt, CLOCK_MONOTONIC, HRTIMER_MODE_REL);\n29        iprtd->hrt.function = snd_hrtimer_callback;\n30\n31        ...\n32        return 0;\n33}\n34static int snd_imx_close(struct snd_pcm_substream *substream)\n35{\n36        ...\n37        hrtimer_cancel(&iprtd->hrt);\n38        ...\n39}\n")),(0,o.kt)("p",null,"\u7b2c28~29\u884c\u5728\u58f0\u5361\u6253\u5f00\u7684\u65f6\u5019\u901a\u8fc7hrtimer_init\uff08\uff09\u521d\u59cb\u5316\u4e86hrtimer\uff0c\u5e76\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u4e3asnd_hrtimer_callback\uff08\uff09\uff1b\u5728\u542f\u52a8\u64ad\u653e\uff08\u7b2c15~21\u884cSNDRV_PCM_TRIGGER_START\uff09\u7b49\u65f6\u523b\u901a\u8fc7hrtimer_start\uff08\uff09\u542f\u52a8\u4e86hrtimer\uff1biprtd->poll_time_ns\u7eb3\u79d2\u540e\uff0c\u65f6\u95f4\u5230snd_hrtimer_callback\uff08\uff09\u51fd\u6570\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u88ab\u6267\u884c\uff0c\u5b83\u7d27\u63a5\u7740\u53c8\u901a\u8fc7hrtimer_forward_now\uff08\uff09\u628ahrtimer\u7684\u65f6\u95f4\u524d\u79fb\u4e86iprtd->poll_time_ns\u7eb3\u79d2\uff0c\u8fd9\u6837\u5468\u800c\u590d\u59cb\uff1b\u76f4\u5230\u58f0\u5361\u88ab\u5173\u95ed\uff0c\u7b2c37\u884c\u53c8\u8c03\u7528\u4e86hrtimer_cancel\uff08\uff09\u53d6\u6d88\u5728open\u65f6\u521d\u59cb\u5316\u7684hrtimer\u3002"),(0,o.kt)("h1",{id:"1052\u5185\u6838\u4e2d\u5ef6\u8fdf\u7684\u5de5\u4f5cdelayed_work"},"10.5.2\u3000\u5185\u6838\u4e2d\u5ef6\u8fdf\u7684\u5de5\u4f5cdelayed_work"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u5468\u671f\u6027\u7684\u4efb\u52a1\uff0c\u9664\u4e86\u5b9a\u65f6\u5668\u4ee5\u5916\uff0c\u5728Linux\u5185\u6838\u4e2d\u8fd8\u53ef\u4ee5\u5229\u7528\u4e00\u5957\u5c01\u88c5\u5f97\u5f88\u597d\u7684\u5feb\u6377\u673a\u5236\uff0c\u5176\u672c\u8d28\u662f\u5229\u7528\u5de5\u4f5c\u961f\u5217\u548c\u5b9a\u65f6\u5668\u5b9e\u73b0\uff0c\u8fd9\u5957\u5feb\u6377\u673a\u5236\u5c31\u662fdelayed_work\uff0cdelayed_work\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535510.12\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.12\u3000delayed_work\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1struct delayed_work {\n2        struct work_struct work;\n3        struct timer_list timer;\n4\n5        /* target workqueue and CPU ->timer uses to queue ->work */\n6        struct workqueue_struct *wq;\n7        int cpu;\n8};\n")),(0,o.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u51fd\u6570\u8c03\u5ea6\u4e00\u4e2adelayed_work\u5728\u6307\u5b9a\u7684\u5ef6\u65f6\u540e\u6267\u884c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int schedule_delayed_work(struct delayed_work *work, unsigned long delay);\n")),(0,o.kt)("p",null,"\u5f53\u6307\u5b9a\u7684delay\u5230\u6765\u65f6\uff0cdelayed_work\u7ed3\u6784\u4f53\u4e2d\u7684work\u6210\u5458work_func_t\u7c7b\u578b\u6210\u5458func\uff08\uff09\u4f1a\u88ab\u6267\u884c\u3002work_func_t\u7c7b\u578b\u5b9a\u4e49\u4e3a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"typedef void (*work_func_t)(struct work_struct *work);\n")),(0,o.kt)("p",null,"\u5176\u4e2d\uff0cdelay\u53c2\u6570\u7684\u5355\u4f4d\u662fjiffies\uff0c\u56e0\u6b64\u4e00\u79cd\u5e38\u89c1\u7684\u7528\u6cd5\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"schedule_delayed_work(&work, msecs_to_jiffies(poll_interval));\n")),(0,o.kt)("p",null,"msecs_to_jiffies\uff08\uff09\u7528\u4e8e\u5c06\u6beb\u79d2\u8f6c\u5316\u4e3ajiffies\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u8981\u5468\u671f\u6027\u5730\u6267\u884c\u4efb\u52a1\uff0c\u901a\u5e38\u4f1a\u5728delayed_work\u7684\u5de5\u4f5c\u51fd\u6570\u4e2d\u518d\u6b21\u8c03\u7528schedule_delayed_work\uff08\uff09\uff0c\u5468\u800c\u590d\u59cb\u3002"),(0,o.kt)("p",null,"\u5982\u4e0b\u51fd\u6570\u7528\u6765\u53d6\u6d88delayed_work\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int cancel_delayed_work(struct delayed_work *work);\nint cancel_delayed_work_sync(struct delayed_work *work);\n")),(0,o.kt)("h1",{id:"1053\u5b9e\u4f8b\u79d2\u5b57\u7b26\u8bbe\u5907"},"10.5.3\u3000\u5b9e\u4f8b\uff1a\u79d2\u5b57\u7b26\u8bbe\u5907"),(0,o.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\u201csecond\u201d\uff08\u5373\u201c\u79d2\u201d\uff09\u7684\u9a71\u52a8\uff0c\u5b83\u5728\u88ab\u6253\u5f00\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e00\u4e2a\u5b9a\u65f6\u5668\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5185\u6838\u5b9a\u65f6\u5668\u94fe\u8868\u4e2d\uff0c\u6bcf\u79d2\u8f93\u51fa\u4e00\u6b21\u5f53\u524d\u7684jiffies\uff08\u4e3a\u6b64\uff0c\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u4e2d\u6bcf\u6b21\u90fd\u8981\u4fee\u6539\u65b0\u7684expires\uff09\uff0c\u6574\u4e2a\u7a0b\u5e8f\u5982\u4ee3\u7801\u6e05\u535510.13\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.13\u3000\u4f7f\u7528\u5185\u6838\u5b9a\u65f6\u5668\u7684second\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  1#include <linux/module.h>\n  2#include <linux/fs.h>\n  3#include <linux/mm.h>\n  4#include <linux/init.h>\n  5#include <linux/cdev.h>\n  6#include <linux/slab.h>\n  7#include <linux/uaccess.h>\n  8\n  9#define SECOND_MAJOR 248\n 10\n 11static int second_major = SECOND_MAJOR;\n 12module_param(second_major, int, S_IRUGO);\n 13\n 14struct second_dev {\n 15    struct cdev cdev;\n 16    atomic_t counter;\n 17    struct timer_list s_timer;\n 18};\n 19\n 20static struct second_dev *second_devp;\n 21\n 22static void second_timer_handler(unsigned long arg)\n 23{\n 24 mod_timer(&second_devp->s_timer, jiffies + HZ);  /* \u89e6\u53d1\u4e0b\u4e00\u6b21\u5b9a\u65f6*/\n 25 atomic_inc(&second_devp->counter);               /* \u589e\u52a0\u79d2\u8ba1\u6570*/\n 26\n 27 printk(KERN_INFO "current jiffies is %ld\\n", jiffies);\n 28}\n 29\n 30static int second_open(struct inode *inode, struct file *filp)\n 31{\n 32 init_timer(&second_devp->s_timer);\n 33 second_devp->s_timer.function = &second_timer_handler;\n 34 second_devp->s_timer.expires = jiffies + HZ;\n 35\n 36 add_timer(&second_devp->s_timer);\n 37\n 38 atomic_set(&second_devp->counter, 0);            /* \u521d\u59cb\u5316\u79d2\u8ba1\u6570\u4e3a0 */\n 39\n 40 return 0;\n 41}\n 42\n 43static int second_release(struct inode *inode, struct file *filp)\n 44{\n 45 del_timer(&second_devp->s_timer);\n 46\n 47 return 0;\n 48}\n 49\n 50static ssize_t second_read(struct file *filp, char __user * buf, size_t count,\n 51 loff_t * ppos)\n 52{\n 53 int counter;\n 54\n 55 counter = atomic_read(&second_devp->counter);\n 56 if (put_user(counter, (int *)buf))/* \u590d\u5236counter\u5230userspace */\n 57     return -EFAULT;\n 58 else\n 59   return sizeof(unsigned int);\n 60}\n 61\n 62static const struct file_operations second_fops = {\n 63 .owner = THIS_MODULE,\n 64 .open = second_open,\n 65 .release = second_release,\n 66 .read = second_read,\n 67};\n 68\n 69static void second_setup_cdev(struct second_dev *dev, int index)\n 70{\n 71 int err, devno = MKDEV(second_major, index);\n 72\n 73 cdev_init(&dev->cdev, &second_fops);\n 74 dev->cdev.owner = THIS_MODULE;\n 75 err = cdev_add(&dev->cdev, devno, 1);\n 76 if (err)\n 77     printk(KERN_ERR "Failed to add second device\\n");\n 78}\n 79\n 80static int __init second_init(void)\n 81{\n 82 int ret;\n 83 dev_t devno = MKDEV(second_major, 0);\n 84\n 85 if (second_major)\n 86     ret = register_chrdev_region(devno, 1, "second");\n 87 else {\n 88     ret = alloc_chrdev_region(&devno, 0, 1, "second");\n 89     second_major = MAJOR(devno);\n 90 }\n 91 if (ret < 0)\n 92     return ret;\n 93\n 94 second_devp = kzalloc(sizeof(*second_devp), GFP_KERNEL);\n 95 if (!second_devp) {\n 96     ret = -ENOMEM;\n 97     goto fail_malloc;\n 98 }\n 99\n100 second_setup_cdev(second_devp, 0);\n101\n102 return 0;\n103\n104fail_malloc:\n105 unregister_chrdev_region(devno, 1);\n106 return ret;\n107}\n108module_init(second_init);\n109\n110static void __exit second_exit(void)\n111{\n112 cdev_del(&second_devp->cdev);\n113 kfree(second_devp);\n114 unregister_chrdev_region(MKDEV(second_major, 0), 1);\n115}\n116module_exit(second_exit);\n117\n118MODULE_AUTHOR("Barry Song <21cnbao@gmail.com>");\n119MODULE_LICENSE("GPL v2");\n')),(0,o.kt)("p",null,"\u5728second\u7684open\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u5c06\u542f\u52a8\u5b9a\u65f6\u5668\uff0c\u6b64\u540e\u6bcf1s\u4f1a\u518d\u6b21\u8fd0\u884c\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\uff0c\u5728second\u7684release\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u5b9a\u65f6\u5668\u88ab\u5220\u9664\u3002"),(0,o.kt)("p",null,"second_dev\u7ed3\u6784\u4f53\u4e2d\u7684\u539f\u5b50\u53d8\u91cfcounter\u7528\u4e8e\u79d2\u8ba1\u6570\uff0c\u6bcf\u6b21\u5728\u5b9a\u65f6\u5668\u5904\u7406\u51fd\u6570\u4e2d\u8c03\u7528\u7684atomic_inc\uff08\uff09\u4f1a\u4ee4\u5176\u539f\u5b50\u6027\u5730\u589e1\uff0csecond\u7684read\uff08\uff09\u51fd\u6570\u4f1a\u5c06\u8fd9\u4e2a\u503c\u8fd4\u56de\u7ed9\u7528\u6237\u7a7a\u95f4\u3002"),(0,o.kt)("p",null,"\u672c\u4e66\u914d\u5957\u7684Ubuntu\u4e2d/home/baohua/develop/training/kernel/drivers/second/\u5305\u542b\u4e86second\u8bbe\u5907\u9a71\u52a8\u4ee5\u53casecond_test.c\u7528\u6237\u7a7a\u95f4\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u8fd0\u884cmake\u547d\u4ee4\u7f16\u8bd1\u5f97\u5230second.ko\u548csecond_test\uff0c\u52a0\u8f7dsecond.ko\u5185\u6838\u6a21\u5757\u5e76\u521b\u5efa/dev/second\u8bbe\u5907\u6587\u4ef6\u8282\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# mknod /dev/second c 248 0\n")),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.14\u7ed9\u51fa\u4e86second_test.c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u6253\u5f00/dev/second\uff0c\u5176\u540e\u4e0d\u65ad\u5730\u8bfb\u53d6\u81ea/dev/second\u8bbe\u5907\u6587\u4ef6\u6253\u5f00\u4ee5\u540e\u7ecf\u5386\u7684\u79d2\u6570\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535510.14\u3000second\u8bbe\u5907\u7528\u6237\u7a7a\u95f4\u6d4b\u8bd5\u7a0b\u5e8f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1#include ...\n 2\n 3main()\n 4{\n 5  int fd;\n 6  int counter = 0;\n 7  int old_counter = 0;\n 8\n 9  /* \u6253\u5f00/dev/second\u8bbe\u5907\u6587\u4ef6*/\n10  fd = open("/dev/second", O_RDONLY);\n11  if (fd != - 1) {\n13      while (1) {\n15         read(fd,&counter, sizeof(unsigned int));/* \u8bfb\u76ee\u524d\u7ecf\u5386\u7684\u79d2\u6570*/\n16         if(counter!=old_counter) {\n18            printf("seconds after open /dev/second :%d\\n",counter);\n19               old_counter = counter;\n20          }\n21      }\n22  } else {\n25      printf("Device open failure\\n");\n26  }\n27}\n')),(0,o.kt)("p",null,"\u8fd0\u884csecond_test\u540e\uff0c\u5185\u6838\u5c06\u4e0d\u65ad\u5730\u8f93\u51fa\u76ee\u524d\u7684jiffies\u503c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[13935.122093] current jiffies is 13635122\n[13936.124441] current jiffies is 13636124\n[13937.126078] current jiffies is 13637126\n[13952.832648] current jiffies is 13652832\n[13953.834078] current jiffies is 13653834\n[13954.836090] current jiffies is 13654836\n[13955.838389] current jiffies is 13655838\n[13956.840453] current jiffies is 13656840\n...\n")),(0,o.kt)("p",null,"\u4ece\u4e0a\u8ff0\u5185\u6838\u7684\u6253\u5370\u6d88\u606f\u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u672c\u4e66\u914d\u5957Ubuntu\u4e0a\u7684\u6bcf\u79d2jiffies\u5927\u6982\u8d701000\u6b21\u3002\u800c\u5e94\u7528\u7a0b\u5e8f\u5c06\u4e0d\u65ad\u8f93\u51fa\u81ea/dec/second\u6253\u5f00\u4ee5\u540e\u7ecf\u5386\u7684\u79d2\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# ./second_test\nseconds after open /dev/second :1\nseconds after open /dev/second :2\nseconds after open /dev/second :3\nseconds after open /dev/second :4\nseconds after open /dev/second :5\n...\n")))}p.isMDXComponent=!0}}]);