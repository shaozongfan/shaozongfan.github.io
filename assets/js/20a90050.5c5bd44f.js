"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[1449],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,P=d["".concat(l,".").concat(f)]||d[f]||_[f]||p;return t?r.createElement(P,i(i({ref:n},u),{},{components:t})):r.createElement(P,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var p=t.length,i=new Array(p);i[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<p;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},52181:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return _}});var r=t(87462),o=t(63366),p=(t(67294),t(3905)),i=["components"],a={},l=void 0,c={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP",title:"19.6\u3000OPP",description:"\u73b0\u4eca\u7684SoC\u4e00\u822c\u5305\u542b\u5f88\u591a\u96c6\u6210\u7ec4\u4ef6\uff0c\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u9700\u8981\u6240\u6709\u7684\u6a21\u5757\u90fd\u8fd0\u884c\u4e8e\u6700\u9ad8\u9891\u7387\u548c\u6700\u9ad8\u6027\u80fd\u3002\u5728SoC\u5185\uff0c\u67d0\u4e9bdomain\u53ef\u4ee5\u8fd0\u884c\u5728\u8f83\u4f4e\u7684\u9891\u7387\u548c\u7535\u538b\u4e0b\uff0c\u800c\u5176\u4ed6domain\u53ef\u4ee5\u8fd0\u884c\u5728\u8f83\u9ad8\u7684\u9891\u7387\u548c\u7535\u538b\u4e0b\uff0c\u67d0\u4e2adomain\u6240\u652f\u6301\u7684\u5bf9\u7684\u96c6\u5408\u88ab\u79f0\u4e3aOperating Performance Point\uff0c\u7f29\u5199\u4e3aOPP\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"19.5\u3000Regulator\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.5\u3000Regulator\u9a71\u52a8"},next:{title:"19.7\u3000PM QoS",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS"}},u={},_=[],d={toc:_};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,p.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"\u73b0\u4eca\u7684SoC\u4e00\u822c\u5305\u542b\u5f88\u591a\u96c6\u6210\u7ec4\u4ef6\uff0c\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u9700\u8981\u6240\u6709\u7684\u6a21\u5757\u90fd\u8fd0\u884c\u4e8e\u6700\u9ad8\u9891\u7387\u548c\u6700\u9ad8\u6027\u80fd\u3002\u5728SoC\u5185\uff0c\u67d0\u4e9bdomain\u53ef\u4ee5\u8fd0\u884c\u5728\u8f83\u4f4e\u7684\u9891\u7387\u548c\u7535\u538b\u4e0b\uff0c\u800c\u5176\u4ed6domain\u53ef\u4ee5\u8fd0\u884c\u5728\u8f83\u9ad8\u7684\u9891\u7387\u548c\u7535\u538b\u4e0b\uff0c\u67d0\u4e2adomain\u6240\u652f\u6301\u7684<\u9891\u7387\uff0c\u7535\u538b>\u5bf9\u7684\u96c6\u5408\u88ab\u79f0\u4e3aOperating Performance Point\uff0c\u7f29\u5199\u4e3aOPP\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"int opp_add(struct device *dev, unsigned long freq, unsigned long u_volt);\n")),(0,p.kt)("p",null,"\u76ee\u524d\uff0cTI OMAP CPUFreq\u9a71\u52a8\u7684\u5e95\u5c42\u5c31\u4f7f\u7528\u4e86OPP\u8fd9\u79cd\u673a\u5236\u6765\u83b7\u53d6CPU\u6240\u652f\u6301\u7684\u9891\u7387\u548c\u7535\u538b\u5217\u8868\u3002\u5728\u5f00\u673a\u7684\u8fc7\u7a0b\u4e2d\uff0cTI OMAP4\u82af\u7247\u4f1a\u6ce8\u518c\u9488\u5bf9CPU\u8bbe\u5907\u7684OPP\u8868\uff08\u4ee3\u7801\u4f4d\u4e8earch/arm/mach-omap2/\u4e2d\uff09\uff0c\u5982\u4ee3\u7801\u6e05\u535519.10\u6240\u793a\u3002"),(0,p.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.10\u3000TI OMAP4 CPU\u7684OPP\u8868"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'1static struct omap_opp_def __initdata omap44xx_opp_def_list[] = {\n2       /* MPU OPP1 - OPP50 */\n3       OPP_INITIALIZER("mpu", true, 300000000, OMAP4430_VDD_MPU_OPP50_UV),\n4       /* MPU OPP2 - OPP100 */\n5       OPP_INITIALIZER("mpu", true, 600000000, OMAP4430_VDD_MPU_OPP100_UV),\n6       /* MPU OPP3 - OPP-Turbo */\n7       OPP_INITIALIZER("mpu", true, 800000000, OMAP4430_VDD_MPU_OPPTURBO_UV),\n8       /* MPU OPP4 - OPP-SB */\n9       OPP_INITIALIZER("mpu", true, 1008000000, OMAP4430_VDD_MPU_OPPNITRO_UV),\n10      \u2026\n11};\n12/**\n13 * omap4_opp_init() - initialize omap4 opp table\n14 */\n15int __init omap4_opp_init(void)\n16{\n17      \u2026\n18      r = omap_init_opp_table(omap44xx_opp_def_list,\n19                   ARRAY_SIZE(omap44xx_opp_def_list));\n20\n21      return r;\n22}\n23device_initcall(omap4_opp_init);\n24int __init omap_init_opp_table(struct omap_opp_def *opp_def,\n25             u32 opp_def_size)\n26{\n27      \u2026\n28      /* Lets now register with OPP library */\n29      for (i = 0; i < opp_def_size; i++, opp_def++) {\n30            \u2026\n31            if (!strncmp(opp_def->hwmod_name, "mpu", 3)) {\n32                   /*\n33                    * All current OMAPs share voltage rail and\n34                    * clock source, so CPU0 is used to represent\n35                    * the MPU-SS.\n36                    */\n37                   dev = get_cpu_device(0);\n38            } \u2026\n39            r = opp_add(dev, opp_def->freq, opp_def->u_volt);\n40            \u2026\n41      }\n42      return 0;\n43}\n')),(0,p.kt)("p",null,"\u9488\u5bf9\u4e0edevice\u7ed3\u6784\u4f53\u6307\u9488dev\u5bf9\u5e94\u7684domain\u4e2d\u589e\u52a0\u4e00\u4e2a\u65b0\u7684OPP\uff0c\u53c2\u6570freq\u548cu_volt\u5373\u4e3a\u8be5OPP\u5bf9\u5e94\u7684\u9891\u7387\u548c\u7535\u538b\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"int opp_enable(struct device *dev, unsigned long freq);\nint opp_disable(struct device *dev, unsigned long freq);\n")),(0,p.kt)("p",null,"\u4e0a\u8ff0API\u7528\u4e8e\u4f7f\u80fd\u548c\u7981\u6b62\u67d0\u4e2aOPP\uff0c\u4e00\u65e6\u88ab\u7981\u6b62\uff0c\u5176available\u5c06\u6210\u4e3afalse\uff0c\u4e4b\u540e\u6709\u8bbe\u5907\u9a71\u52a8\u60f3\u8bbe\u7f6e\u4e3a\u8fd9\u4e2aOPP\u5c31\u4e0d\u518d\u53ef\u80fd\u4e86\u3002\u8b6c\u5982\uff0c\u5f53\u6e29\u5ea6\u8d85\u8fc7\u67d0\u4e2a\u8303\u56f4\u540e\uff0c\u7cfb\u7edf\u4e0d\u5141\u8bb81GHz\u7684\u5de5\u4f5c\u9891\u7387\uff0c\u53ef\u91c7\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"if (cur_temp > temp_high_thresh) {\n      /* Disable 1GHz if it was enabled */\n      rcu_read_lock();\nopp = opp_find_freq_exact(dev, 1000000000, true);\n      rcu_read_unlock();\n      /* just error check */\nif (!IS_ERR(opp))\nret = opp_disable(dev, 1000000000);\nelse\ngoto try_something_else;\n}\n")),(0,p.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8c03\u7528\u7684opp_find_freq_exact\uff08\uff09\u7528\u4e8e\u5bfb\u627e\u4e0e\u4e00\u4e2a\u786e\u5b9a\u9891\u7387\u548cavailable\u5339\u914d\u7684OPP\uff0c\u5176\u539f\u578b\u4e3a\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"struct opp *opp_find_freq_exact(struct device *dev, unsigned long freq,\nbool available);\n")),(0,p.kt)("p",null,"\u53e6\u5916\uff0cLinux\u8fd8\u63d0\u4f9b\u4e24\u4e2a\u53d8\u4f53\uff0copp_find_freq_floor\uff08\uff09\u7528\u4e8e\u5bfb\u627e1\u4e2aOPP\uff0c\u5b83\u7684\u9891\u7387\u5411\u4e0a\u63a5\u8fd1\u6216\u7b49\u4e8e\u6307\u5b9a\u7684\u9891\u7387\uff1bopp_find_freq_ceil\uff08\uff09\u7528\u4e8e\u5bfb\u627e1\u4e2aOPP\uff0c\u5b83\u7684\u9891\u7387\u5411\u4e0b\u63a5\u8fd1\u6216\u7b49\u4e8e\u6307\u5b9a\u7684\u9891\u7387\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"struct opp *opp_find_freq_floor(struct device *dev, unsigned long *freq);\nstruct opp *opp_find_freq_ceil(struct device *dev, unsigned long *freq);\n")),(0,p.kt)("p",null,"\u6211\u4eec\u53ef\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5206\u522b\u5bfb\u627e1\u4e2a\u8bbe\u5907\u7684\u6700\u5927\u548c\u6700\u5c0f\u5de5\u4f5c\u9891\u7387\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"freq = ULONG_MAX;\nrcu_read_lock();\nopp_find_freq_floor(dev, &freq);\nrcu_read_unlock();\nfreq = 0;\nrcu_read_lock();\nopp_find_freq_ceil(dev, &freq);\nrcu_read_unlock();\n")),(0,p.kt)("p",null,"\u5728\u9891\u7387\u964d\u4f4e\u7684\u540c\u65f6\uff0c\u652f\u6491\u8be5\u9891\u7387\u8fd0\u884c\u6240\u9700\u7684\u7535\u538b\u4e5f\u5f80\u5f80\u53ef\u4ee5\u52a8\u6001\u8c03\u4f4e\uff1b\u53cd\u4e4b\uff0c\u5219\u53ef\u80fd\u9700\u8981\u8c03\u9ad8\uff0c\u4e0b\u9762\u8fd9\u4e24\u4e2aAPI\u5206\u522b\u7528\u4e8e\u83b7\u53d6\u4e0e\u67d0OPP\u5bf9\u5e94\u7684\u7535\u538b\u548c\u9891\u7387\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"unsigned long opp_get_voltage(struct opp *opp);\nunsigned long opp_get_freq(struct opp *opp);\n")),(0,p.kt)("p",null,"\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u67d0CPUFreq\u9a71\u52a8\u60f3\u5c06CPU\u8bbe\u7f6e\u4e3a\u67d0\u4e00\u9891\u7387\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u80fd\u4f1a\u540c\u65f6\u8bbe\u7f6e\u7535\u538b\uff0c\u5176\u4ee3\u7801\u6d41\u7a0b\u4e3a\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"soc_switch_to_freq_voltage(freq)\n{\n     /* do things */\n     rcu_read_lock();\nopp = opp_find_freq_ceil(dev, &freq);\n     v = opp_get_voltage(opp);\n     rcu_read_unlock();\nif (v)\n           regulator_set_voltage(.., v);\n     /* do other things */\n}\n")),(0,p.kt)("p",null,"\u5982\u4e0b\u7b80\u5355\u7684API\u53ef\u7528\u4e8e\u83b7\u53d6\u67d0\u8bbe\u5907\u6240\u652f\u6301\u7684OPP\u7684\u4e2a\u6570\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"int opp_get_opp_count(struct device *dev);\n")),(0,p.kt)("p",null,"\u524d\u9762\u63d0\u5230\uff0cTI OMAP CPUFreq\u9a71\u52a8\u7684\u5e95\u5c42\u5c31\u4f7f\u7528\u4e86OPP\u8fd9\u79cd\u673a\u5236\u6765\u83b7\u53d6CPU\u6240\u652f\u6301\u7684\u9891\u7387\u548c\u7535\u538b\u5217\u8868\u3002\u5b83\u5728omap_init_opp_table\uff08\uff09\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e86\u76f8\u5e94\u7684OPP\uff0c\u5728TI OMAP\u82af\u7247\u7684CPUFreq\u9a71\u52a8drivers/cpufreq/omap-cpufreq.c\u4e2d\uff0c\u5219\u501f\u52a9\u4e86\u5feb\u6377\u51fd\u6570opp_init_cpufreq_table\uff08\uff09\u6765\u6839\u636e\u524d\u9762\u6ce8\u518c\u7684OPP\u5efa\u7acbCPUFreq\u7684\u9891\u7387\u8868\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"static int __cpuinit omap_cpu_init(struct cpufreq_policy *policy)\n{\n       \u2026\nif (!freq_table)\nresult = opp_init_cpufreq_table(mpu_dev, &freq_table);\n       \u2026\n}\n")),(0,p.kt)("p",null,"\u800c\u5728CPUFreq\u9a71\u52a8\u7684\u76ee\u6807\u6210\u5458\u51fd\u6570omap_target\uff08\uff09\u4e2d\uff0c\u5219\u4f7f\u7528\u4e0eOPP\u76f8\u5173\u7684API\u6765\u83b7\u53d6\u9891\u7387\u548c\u7535\u538b\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"static int omap_target(struct cpufreq_policy *policy,\nunsigned int target_freq,\nunsigned int relation)\n{\n      \u2026\nif (mpu_reg) {\nopp = opp_find_freq_ceil(mpu_dev, &freq);\n              \u2026\nvolt = opp_get_voltage(opp);\n              \u2026\n      }\n      \u2026\n}\n")),(0,p.kt)("p",null,"drivers/cpufreq/omap-cpufreq.c\u76f8\u5bf9\u6765\u8bf4\u8f83\u4e3a\u89c4\u8303\uff0c\u5b83\u5728<\u9891\u7387\uff0c\u7535\u538b>\u8868\u65b9\u9762\uff0c\u5728\u5e95\u5c42\u4f7f\u7528\u4e86OPP\uff0c\u5728\u8bbe\u7f6e\u7535\u538b\u7684\u65f6\u5019\u53c8\u4f7f\u7528\u4e86\u89c4\u8303\u7684Regulator API\u3002"),(0,p.kt)("p",null,"\u6bd4\u8f83\u65b0\u7684\u9a71\u52a8\u4e00\u822c\u4e0d\u592a\u559c\u6b22\u76f4\u63a5\u5728\u4ee3\u7801\u91cc\u9762\u56fa\u5316OPP\u8868\uff0c\u800c\u662f\u559c\u6b22\u5728\u76f8\u5e94\u7684\u8282\u70b9\u5904\u6dfb\u52a0operating-points\u5c5e\u6027\uff0c\u5982imx27.dtsi\u4e2d\u7684\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'cpus {\n              #size-cells = <0>;\n              #address-cells = <1>;\ncpu: cpu@0 {\n                    device_type = "cpu";\ncompatible = "arm,arm926ej-s";\noperating-points = <\n                          /* kHz uV */\n                          266000 1300000\n                          399000 1450000\n>;\nclock-latency = <62500>;\nclocks = <&clks IMX27_CLK_CPU_DIV>;\nvoltage-tolerance = <5>;\n             };\n       };\n')),(0,p.kt)("p",null,"\u5982\u679cCPUFreq\u7684\u53d8\u5316\u53ef\u4ee5\u4f7f\u7528\u975e\u5e38\u6807\u51c6\u7684regulator\u3001clk API\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528drivers/cpufreq/cpufreq-dt.c\u8fd9\u4e2a\u9a71\u52a8\u3002\u8fd9\u6837\u53ea\u9700\u8981\u5728CPU\u8282\u70b9\u4e0a\u586b\u5145\u597d\u9891\u7387\u7535\u538b\u8868\uff0c\u7136\u540e\u5728\u5e73\u53f0\u4ee3\u7801\u91cc\u9762\u6ce8\u518ccpufreq-dt\u8bbe\u5907\u5c31\u53ef\u4ee5\u4e86\uff0c\u5728arch/arm/mach-imx/imx27-dt.c\u3001arch/arm/mach-imx/mach-imx51.c\u4e2d\u53ef\u4ee5\u627e\u5230\u7c7b\u4f3c\u7684\u4f8b\u5b50\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'static void __init imx27_dt_init(void)\n{\nstruct platform_device_info devinfo = { .name = "cpufreq-dt", };\n       of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);\n       platform_device_register_full(&devinfo);\n}\n')))}f.isMDXComponent=!0}}]);