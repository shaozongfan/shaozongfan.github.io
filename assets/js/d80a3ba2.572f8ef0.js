"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[545],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return l}});var s=n(67294);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,u=function(e,t){if(null==e)return{};var n,s,u={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(u[n]=e[n]);return u}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(u[n]=e[n])}return u}var _=s.createContext({}),c=function(e){var t=s.useContext(_),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(_.Provider,{value:t},e.children)},a={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,u=e.mdxType,r=e.originalType,_=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),l=u,b=d["".concat(_,".").concat(l)]||d[l]||a[l]||r;return n?s.createElement(b,i(i({ref:t},p),{},{components:n})):s.createElement(b,i({ref:t},p))}));function l(e,t){var n=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var _ in t)hasOwnProperty.call(t,_)&&(o[_]=t[_]);o.originalType=e,o.mdxType="string"==typeof e?e:u,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4132:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return _},default:function(){return l},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return a}});var s=n(87462),u=n(63366),r=(n(67294),n(3905)),i=["components"],o={},_="16.4.1\u3000UDC\u548cGadget\u9a71\u52a8\u7684\u5173\u952e\u6570\u636e\u7ed3\u6784\u4e0eAPI",c={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8",title:"16.4.1\u3000UDC\u548cGadget\u9a71\u52a8\u7684\u5173\u952e\u6570\u636e\u7ed3\u6784\u4e0eAPI",description:"\u8fd9\u91cc\u7684USB\u8bbe\u5907\u63a7\u5236\u5668\uff08UDC\uff09\u9a71\u52a8\u6307\u7684\u662f\u4f5c\u4e3a\u5176\u4ed6USB\u4e3b\u673a\u63a7\u5236\u5668\u5916\u8bbe\u7684USB\u786c\u4ef6\u8bbe\u5907\u4e0a\u5e95\u5c42\u786c\u4ef6\u63a7\u5236\u5668\u7684\u9a71\u52a8\uff0c\u8be5\u786c\u4ef6\u548c\u9a71\u52a8\u8d1f\u8d23\u5c06\u4e00\u4e2aUSB\u8bbe\u5907\u4f9d\u9644\u4e8e\u4e00\u4e2aUSB\u4e3b\u673a\u63a7\u5236\u5668\u4e0a\u3002\u4f8b\u5982\uff0c\u5f53\u67d0\u8fd0\u884cLinux\u7cfb\u7edf\u7684\u624b\u673a\u4f5c\u4e3aPC\u7684U\u76d8\u65f6\uff0c\u624b\u673a\u4e2d\u7684\u5e95\u5c42USB\u63a7\u5236\u5668\u884c\u4f7fUSB\u8bbe\u5907\u63a7\u5236\u5668\u7684\u529f\u80fd\uff0c\u8fd9\u65f6\u5019\u8fd0\u884c\u5728\u5e95\u5c42\u7684\u662fUDC\u9a71\u52a8\uff0c\u800c\u624b\u673a\u8981\u6210\u4e3aU\u76d8\uff0c\u5728UDC\u9a71\u52a8\u4e4b\u4e0a\u4ecd\u7136\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u9a71\u52a8\uff0c\u5bf9\u4e8eUSB\u5927\u5bb9\u91cf\u5b58\u50a8\u5668\u800c\u8a00\uff0c\u8fd9\u4e2a\u9a71\u52a8\u4e3aFile Storage\u9a71\u52a8\uff0c\u79f0\u4e3aFunction\u9a71\u52a8\u3002\u4ece\u56fe16.1\u5de6\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0cUSB\u8bbe\u5907\u9a71\u52a8\u8c03\u7528USB\u6838\u5fc3\u7684API\uff0c\u56e0\u6b64\u5177\u4f53\u9a71\u52a8\u4e0eSoC\u65e0\u5173\uff1b\u540c\u6837\uff0c\u4ece\u56fe16.1\u53f3\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0cFunction\u9a71\u52a8\u8c03\u7528\u901a\u7528\u7684Gadget Function API\uff0c\u56e0\u6b64\u5177\u4f53Function\u9a71\u52a8\u4e5f\u53d8\u5f97\u4e0eSoC\u65e0\u5173\u3002\u8f6f\u4ef6\u5206\u5c42\u8bbe\u8ba1\u7684\u597d\u5904\u518d\u4e00\u6b21\u5f97\u5230\u4e86\u6df1\u523b\u7684\u4f53\u73b0",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.4\u3000USB UDC\u4e0eGadget\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"16.3.1\u3000USB\u8bbe\u5907\u9a71\u52a8\u7684\u6574\u4f53\u7ed3\u6784",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.3\u3000USB\u8bbe\u5907\u9a71\u52a8"},next:{title:"16.5\u3000USB OTG\u9a71\u52a8",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.5\u3000USB OTG\u9a71\u52a8"}},p={},a=[{value:"\uff081\uff09\u4f7f\u80fd\u548c\u7981\u6b62\u7aef\u70b9",id:"1\u4f7f\u80fd\u548c\u7981\u6b62\u7aef\u70b9",level:2},{value:"\uff082\uff09\u5206\u914d\u548c\u91ca\u653eusb_request",id:"2\u5206\u914d\u548c\u91ca\u653eusb_request",level:2},{value:"\uff083\uff09\u63d0\u4ea4\u548c\u53d6\u6d88usb_request",id:"3\u63d0\u4ea4\u548c\u53d6\u6d88usb_request",level:2},{value:"\uff084\uff09\u7aef\u70b9FIFO\u7ba1\u7406",id:"4\u7aef\u70b9fifo\u7ba1\u7406",level:2},{value:"\uff085\uff09\u7aef\u70b9\u81ea\u52a8\u914d\u7f6e",id:"5\u7aef\u70b9\u81ea\u52a8\u914d\u7f6e",level:2}],d={toc:a};function l(e){var t=e.components,n=(0,u.Z)(e,i);return(0,r.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1641udc\u548cgadget\u9a71\u52a8\u7684\u5173\u952e\u6570\u636e\u7ed3\u6784\u4e0eapi"},"16.4.1\u3000UDC\u548cGadget\u9a71\u52a8\u7684\u5173\u952e\u6570\u636e\u7ed3\u6784\u4e0eAPI"),(0,r.kt)("p",null,"\u8fd9\u91cc\u7684USB\u8bbe\u5907\u63a7\u5236\u5668\uff08UDC\uff09\u9a71\u52a8\u6307\u7684\u662f\u4f5c\u4e3a\u5176\u4ed6USB\u4e3b\u673a\u63a7\u5236\u5668\u5916\u8bbe\u7684USB\u786c\u4ef6\u8bbe\u5907\u4e0a\u5e95\u5c42\u786c\u4ef6\u63a7\u5236\u5668\u7684\u9a71\u52a8\uff0c\u8be5\u786c\u4ef6\u548c\u9a71\u52a8\u8d1f\u8d23\u5c06\u4e00\u4e2aUSB\u8bbe\u5907\u4f9d\u9644\u4e8e\u4e00\u4e2aUSB\u4e3b\u673a\u63a7\u5236\u5668\u4e0a\u3002\u4f8b\u5982\uff0c\u5f53\u67d0\u8fd0\u884cLinux\u7cfb\u7edf\u7684\u624b\u673a\u4f5c\u4e3aPC\u7684U\u76d8\u65f6\uff0c\u624b\u673a\u4e2d\u7684\u5e95\u5c42USB\u63a7\u5236\u5668\u884c\u4f7fUSB\u8bbe\u5907\u63a7\u5236\u5668\u7684\u529f\u80fd\uff0c\u8fd9\u65f6\u5019\u8fd0\u884c\u5728\u5e95\u5c42\u7684\u662fUDC\u9a71\u52a8\uff0c\u800c\u624b\u673a\u8981\u6210\u4e3aU\u76d8\uff0c\u5728UDC\u9a71\u52a8\u4e4b\u4e0a\u4ecd\u7136\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u9a71\u52a8\uff0c\u5bf9\u4e8eUSB\u5927\u5bb9\u91cf\u5b58\u50a8\u5668\u800c\u8a00\uff0c\u8fd9\u4e2a\u9a71\u52a8\u4e3aFile Storage\u9a71\u52a8\uff0c\u79f0\u4e3aFunction\u9a71\u52a8\u3002\u4ece\u56fe16.1\u5de6\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0cUSB\u8bbe\u5907\u9a71\u52a8\u8c03\u7528USB\u6838\u5fc3\u7684API\uff0c\u56e0\u6b64\u5177\u4f53\u9a71\u52a8\u4e0eSoC\u65e0\u5173\uff1b\u540c\u6837\uff0c\u4ece\u56fe16.1\u53f3\u8fb9\u53ef\u4ee5\u770b\u51fa\uff0cFunction\u9a71\u52a8\u8c03\u7528\u901a\u7528\u7684Gadget Function API\uff0c\u56e0\u6b64\u5177\u4f53Function\u9a71\u52a8\u4e5f\u53d8\u5f97\u4e0eSoC\u65e0\u5173\u3002\u8f6f\u4ef6\u5206\u5c42\u8bbe\u8ba1\u7684\u597d\u5904\u518d\u4e00\u6b21\u5f97\u5230\u4e86\u6df1\u523b\u7684\u4f53\u73b0"),(0,r.kt)("p",null,"UDC\u9a71\u52a8\u548cFunction\u9a71\u52a8\u90fd\u4f4d\u4e8e\u5185\u6838\u7684drivers/usb/gadget\u76ee\u5f55\u4e2d\uff0c\u5982drivers/usb/gadget/udc\u4e0b\u9762\u7684fsl_mxc_udc.c\u3001omap_udc.c\u3001s3c2410_udc.c\u7b49\u662f\u5bf9\u5e94SoC\u5e73\u53f0\u4e0a\u7684UDC\u9a71\u52a8\uff0c\u800cdrivers/usb/gadget/function\u5b50\u76ee\u5f55\u7684f_serial.c\u3001f_mass_storage.c\u3001f_rndis.c\u7b49\u6587\u4ef6\u5b9e\u73b0\u4e86\u4e00\u4e9bGadget\u529f\u80fd\uff0c\u91cd\u8981\u7684Function\u9a71\u52a8\u5982\u4e0b\u6240\u793a\u3002"),(0,r.kt)("p",null,'Ethernet over USB\uff1a\u8be5\u9a71\u52a8\u6a21\u62df\u4ee5\u592a\u7f51\u7f51\u53e3\uff0c\u5b83\u652f\u6301\u591a\u79cd\u8fd0\u884c\u65b9\u5f0f\u2014CDC Ethernet\uff08\u5b9e\u73b0\u6807\u51c6\u7684Communications Device Class"Ethernet Model"\u534f\u8bae\uff09\u3001CDC Subset\u4ee5\u53caRNDIS\uff08\u5fae\u8f6f\u516c\u53f8\u5bf9CDC Ethernet\u7684\u53d8\u79cd\u5b9e\u73b0\uff09\u3002'),(0,r.kt)("p",null,"File-Backed Storage Gadget\uff1a\u6700\u5e38\u89c1\u7684U\u76d8\u529f\u80fd\u5b9e\u73b0\u3002"),(0,r.kt)("p",null,"Serial Gadget\uff1a\u5305\u62ecGeneric Serial\u5b9e\u73b0\uff08\u53ea\u9700\u8981Bulk-in/Bulk-out\u7aef\u70b9+ep0\uff09\u548cCDC ACM\u89c4\u8303\u5b9e\u73b0\u3002\u5185\u6838\u6e90\u4ee3\u7801\u4e2d\u7684Documentation/usb/gadget_serial.txt\u6587\u6863\u8bb2\u89e3\u4e86\u5982\u4f55\u5c06Serial Gadget\u4e0eWindows\u548cLinux\u4e3b\u673a\u8fde\u63a5\u3002"),(0,r.kt)("p",null,"Gadget MIDI\uff1a\u66b4\u9732ALSA MIDI\u63a5\u53e3\u3002"),(0,r.kt)("p",null,"USB Video Class Gadget\u9a71\u52a8\uff1a\u8ba9Linux\u7cfb\u7edf\u6210\u4e3a\u53e6\u5916\u4e00\u4e2a\u7cfb\u7edf\u7684USB\u89c6\u9891\u91c7\u96c6\u6e90"),(0,r.kt)("p",null,"\u53e6\u5916\uff0cdrivers/usb/gadget\u6e90\u4ee3\u7801\u8fd8\u5b9e\u73b0\u4e86\u4e00\u4e2aGadget\u6587\u4ef6\u7cfb\u7edf\uff08GadgetFS\uff09\uff0c\u53ef\u4ee5\u5c06Gadget API\u63a5\u53e3\u66b4\u9732\u7ed9\u5e94\u7528\u5c42\uff0c\u4ee5\u4fbf\u5728\u5e94\u7528\u5c42\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u7684\u9a71\u52a8\u3002"),(0,r.kt)("p",null,"\u5728USB\u8bbe\u5907\u63a7\u5236\u5668\u9a71\u52a8\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u5fc3\u51e0\u4e2a\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5305\u62ec\u63cf\u8ff0\u4e00\u4e2aUSB\u8bbe\u5907\u63a7\u5236\u5668\u7684usb_gadget\u3001UDC\u64cd\u4f5cusb_gadget_ops\u3001\u63cf\u8ff0\u4e00\u4e2a\u7aef\u70b9\u7684usb_ep\u4ee5\u53ca\u63cf\u8ff0\u7aef\u70b9\u64cd\u4f5c\u7684usb_ep_ops\u7ed3\u6784\u4f53\u3002UDC\u9a71\u52a8\u56f4\u7ed5\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u53ca\u5176\u6210\u5458\u51fd\u6570\u800c\u5c55\u5f00\uff0c\u4ee3\u7801\u6e05\u535516.30\u5217\u51fa\u4e86\u8fd9\u4e9b\u5173\u952e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4eec\u90fd\u5b9a\u4e49\u4e8einclude/linux/usb/gadget.h\u6587\u4ef6\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.30\u3000UDC\u9a71\u52a8\u7684\u5173\u952e\u6570\u636e\u7ed3\u6784"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct usb_gadget {\n 2        struct work_struct              work;\n 3        /* readonly to gadget driver    */\n 4        const struct usb_gadget_ops       *ops;\n 5        struct usb_ep                   *ep0;\n 6        struct list_head                ep_list;        /* of usb_ep */\n 7        enum usb_device_speed            speed;\n 8        enum usb_device_speed            max_speed;\n 9        enum usb_device_state            state;\n10        const char                      *name;\n11        struct device                   dev;\n12        unsigned                       out_epnum;\n13        unsigned                       in_epnum;\n14\n15        unsigned                       sg_supported:1;\n16        unsigned                       is_otg:1;\n17        unsigned                       is_a_peripheral:1;\n18        unsigned                       b_hnp_enable:1;\n19        unsigned                       a_hnp_support:1;\n20        unsigned                       a_alt_hnp_support:1;\n21        unsigned                       quirk_ep_out_aligned_size:1;\n22        unsigned                       is_selfpowered:1;\n23};\n24\n25struct usb_ep {\n26        void                   *driver_data;\n27\n28        const char              *name;\n29        const struct usb_ep_ops   *ops;\n30        struct list_head        ep_list;\n31        unsigned               maxpacket:16;\n32        unsigned               maxpacket_limit:16;\n33        unsigned               max_streams:16;\n34        unsigned               mult:2;\n35        unsigned               maxburst:5;\n36        u8                    address;\n37        const struct usb_endpoint_descriptor    *desc;\n38        const struct usb_ss_ep_comp_descriptor  *comp_desc;\n39};\n40\n41struct usb_gadget_ops {\n42        int    (*get_frame)(struct usb_gadget *);\n43        int    (*wakeup)(struct usb_gadget *);\n44        int    (*set_selfpowered) (struct usb_gadget *, int is_selfpowered);\n45        int    (*vbus_session) (struct usb_gadget *, int is_active);\n46        int    (*vbus_draw) (struct usb_gadget *, unsigned mA);\n47        int    (*pullup) (struct usb_gadget *, int is_on);\n48        int    (*ioctl)(struct usb_gadget *,\n49                            unsigned code, unsigned long param);\n50        void   (*get_config_params)(struct usb_dcd_config_params *);\n51        int    (*udc_start)(struct usb_gadget *,\n52                     struct usb_gadget_driver *);\n53        int    (*udc_stop)(struct usb_gadget *);\n54};\n55struct usb_ep_ops {\n56        int (*enable) (struct usb_ep *ep,\n57               const struct usb_endpoint_descriptor *desc);\n58        int (*disable) (struct usb_ep *ep);\n59\n60        struct usb_request *(*alloc_request) (struct usb_ep *ep,\n61               gfp_t gfp_flags);\n62        void (*free_request) (struct usb_ep *ep, struct usb_request *req);\n63\n64        int (*queue) (struct usb_ep *ep, struct usb_request *req,\n65               gfp_t gfp_flags);\n66        int (*dequeue) (struct usb_ep *ep, struct usb_request *req);\n67\n68        int (*set_halt) (struct usb_ep *ep, int value);\n69        int (*set_wedge) (struct usb_ep *ep);\n70\n71        int (*fifo_status) (struct usb_ep *ep);\n72        void (*fifo_flush) (struct usb_ep *ep);\n73};\n")),(0,r.kt)("p",null,"\u5728\u5177\u4f53\u7684UDC\u9a71\u52a8\u4e2d\uff0c\u9700\u8981\u5c01\u88c5usb_gadget\u548c\u6bcf\u4e2a\u7aef\u70b9usb_ep\uff0c\u5b9e\u73b0usb_gadget\u7684usb_gadget_ops\u5e76\u5b9e\u73b0\u7aef\u70b9\u7684usb_ep_ops\uff0c\u5b8c\u6210usb_request\u3002\u8fd9\u4e9b\u4e8b\u60c5\u90fd\u641e\u5b9a\u540e\uff0c\u5c31\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2aUDC\uff0c\u5b83\u662f\u901a\u8fc7usb_add_gadget_udc\uff08\uff09API\u6765\u8fdb\u884c\u7684\uff0c\u5176\u539f\u578b\u4e3a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int usb_add_gadget_udc(struct device *parent, struct usb_gadget *gadget);\n")),(0,r.kt)("p",null,"\u5728\u6ce8\u518cUDC\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u628ausb_gadget\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u7684ep_list\uff0c\u5373\u7aef\u70b9\u94fe\u8868\u586b\u5145\u597d\uff0c\u5e76\u586b\u5145\u597dusb_gadget\u7684usb_gadget_ops\u4ee5\u53ca\u6bcf\u4e2a\u7aef\u70b9\u7684usb_gadget_ops\u3002"),(0,r.kt)("p",null,"\u800cGadget\u7684Function\u8fd9\u8fb9\uff0c\u5219\u9700\u8981\u81ea\u5df1\u586b\u5145usb_interface_descriptor\u3001usb_endpoint_descriptor\uff0c\u5408\u6210\u4e00\u4e9busb_descriptor_header\uff0c\u5e76\u5b9e\u73b0usb_function\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\uff0cusb_function\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e8einclude/linux/usb/composite.h\u4e2d\uff0c\u5176\u5f62\u5f0f\u5982\u4ee3\u7801\u6e05\u535516.31\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.31\u3000usb_function\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct usb_function {\n 2   const char            *name;\n 3   struct usb_gadget_strings  **strings;\n 4   struct usb_descriptor_header   **fs_descriptors;\n 5   struct usb_descriptor_header   **hs_descriptors;\n 6   struct usb_descriptor_header   **ss_descriptors;\n 7\n 8   struct usb_configuration  *config;\n 9\n10   struct usb_os_desc_table  *os_desc_table;\n11   unsigned                  os_desc_n;\n12\n13   /* configuration management:  bind/unbind */\n14   int          (*bind)(struct usb_configuration *,\n15                    struct usb_function *);\n16   void         (*unbind)(struct usb_configuration *,\n17                    struct usb_function *);\n18   void         (*free_func)(struct usb_function *f);\n19   struct module    *mod;\n20\n21   /* runtime state management */\n22   int          (*set_alt)(struct usb_function *,\n23                    unsigned interface, unsigned alt);\n24   int          (*get_alt)(struct usb_function *,\n25                    unsigned interface);\n26   void         (*disable)(struct usb_function *);\n27   int          (*setup)(struct usb_function *,\n28                    const struct usb_ctrlrequest *);\n29   void         (*suspend)(struct usb_function *);\n30   void         (*resume)(struct usb_function *);\n31\n32   /* USB 3.0 additions */\n33   int          (*get_status)(struct usb_function *);\n34   int          (*func_suspend)(struct usb_function *,\n35                        u8 suspend_opt);\n36   /* private: */\n37   /* internals */\n38   struct list_head     list;\n39   DECLARE_BITMAP(endpoints, 32);\n40   const struct usb_function_instance *fi;\n41};\n")),(0,r.kt)("p",null,"\u7b2c4\u884c\u7684fs_descriptors\u662f\u5168\u901f\u548c\u4f4e\u901f\u7684\u63cf\u8ff0\u7b26\u8868\uff1b\u7b2c5\u884c\u7684hs_descriptors\u662f\u9ad8\u901f\u63cf\u8ff0\u7b26\u8868\uff1bss_descriptors\u662f\u8d85\u9ad8\u901f\u63cf\u8ff0\u7b26\u3002bind\uff08\uff09\u5b8c\u6210\u5728Gadget\u6ce8\u518c\u65f6\u83b7\u53d6I/O\u7f13\u51b2\u3001\u7aef\u70b9\u7b49\u8d44\u6e90\u3002"),(0,r.kt)("p",null,"\u5728usb_function\u7684\u6210\u5458\u51fd\u6570\u4ee5\u53ca\u5404\u79cd\u63cf\u8ff0\u7b26\u51c6\u5907\u597d\u540e\uff0c\u5728\u5185\u6838\u901a\u8fc7usb_function_register\uff08\uff09API\u6765\u5b8c\u6210Gadget Function\u7684\u6ce8\u518c\uff0c\u8be5API\u7684\u539f\u578b\u4e3a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int usb_function_register(struct usb_function_driver *newf);\n")),(0,r.kt)("p",null,"\u5728Gadget\u9a71\u52a8\u4e2d\uff0c\u7528usb_request\u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u4e00\u6b21\u4f20\u8f93\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5730\u4f4d\u7c7b\u4f3c\u4e8eUSB\u4e3b\u673a\u4fa7\u7684URB\u3002usb_request\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535516.32\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.32\u3000usb_request\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct usb_request {\n 2        void                   *buf; /* Buffer used for data */\n 3        unsigned               length;\n 4        dma_addr_t             dma;  /* DMA address corresponding to 'buf' */\n 5\n 6        struct scatterlist       *sg; /* a scatterlist for SG-capable controllers */\n 7        unsigned              num_sgs;\n 8        unsigned              num_mapped_sgs;\n 9\n10        unsigned              stream_id:16;\n11        unsigned              no_interrupt:1;\n12        unsigned              zero:1;\n13        unsigned              short_not_ok:1;\n14\n15        void                  (*complete)(struct usb_ep *ep,\n16            struct usb_request *req);  /* Function called when request completes */\n17        void                  *context;\n18        struct list_head        list;\n19\n20        int                   status;\n21        unsigned               actual;\n22};\n")),(0,r.kt)("p",null,"\u5728include/linux/usb/gadget.h\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5c01\u88c5\u4e86\u4e00\u4e9b\u5e38\u7528\u7684API\uff0c\u4ee5\u4f9bGadget Function\u9a71\u52a8\u8c03\u7528\uff0c\u4ece\u800c\u4fbf\u4e8e\u5b83\u4eec\u64cd\u4f5c\u7aef\u70b9\uff0c\u5982\u4e0b\u6240\u793a\u3002"),(0,r.kt)("h2",{id:"1\u4f7f\u80fd\u548c\u7981\u6b62\u7aef\u70b9"},"\uff081\uff09\u4f7f\u80fd\u548c\u7981\u6b62\u7aef\u70b9"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"static inline int usb_ep_enable(struct usb_ep *ep);\nstatic inline int usb_ep_disable(struct usb_ep *ep);\n")),(0,r.kt)("p",null,"\u5b83\u4eec\u5206\u522b\u8c03\u7528\u4e86\u201cep->ops->enable\uff08ep\uff0cdesc\uff09\uff1b\u201d\u548c\u201cep->ops->disable\uff08ep\uff09\uff1b\u201d\u3002"),(0,r.kt)("h2",{id:"2\u5206\u914d\u548c\u91ca\u653eusb_request"},"\uff082\uff09\u5206\u914d\u548c\u91ca\u653eusb_request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct usb_request *alloc_ep_req(struct usb_ep *ep, int len, int default_len);\nstatic inline struct usb_request *usb_ep_alloc_request(struct usb_ep *ep,\n                                                       gfp_t gfp_flags);\nstatic inline void usb_ep_free_request(struct usb_ep *ep,\n                                       struct usb_request *req);\n")),(0,r.kt)("p",null,"usb_ep_alloc_request\uff08\uff09\u548cusb_ep_free_request\uff08\uff09\u5206\u522b\u8c03\u7528\u4e86\u201cep->ops->alloc_request\uff08ep\uff0cgfp_flags\uff09\uff1b\u201d\u548c\u201cep->ops->free_request\uff08ep\uff0creq\uff09\uff1b\u201d\uff0c\u4ee5\u7528\u4e8e\u5206\u914d\u548c\u91ca\u653e\u4e00\u4e2a\u4f9d\u9644\u4e8e\u67d0\u7aef\u70b9\u7684usb_request\uff0c\u800calloc_ep_req\uff08\uff09\u5219\u662f\u5185\u5d4c\u4e86\u5bf9usb_ep_alloc_request\uff08ep\uff0cGFP_ATOMIC\uff09\u7684\u8c03\u7528\uff0c\u540c\u65f6\u81ea\u52a8\u7533\u8bf7\u4e86usb_request\u7684\u7f13\u51b2\u5668\u7684\u5185\u5b58\u3002"),(0,r.kt)("h2",{id:"3\u63d0\u4ea4\u548c\u53d6\u6d88usb_request"},"\uff083\uff09\u63d0\u4ea4\u548c\u53d6\u6d88usb_request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"static inline int usb_ep_queue(struct usb_ep *ep,\n                               struct usb_request *req, gfp_t gfp_flags);\nstatic inline int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req);\n")),(0,r.kt)("h2",{id:"4\u7aef\u70b9fifo\u7ba1\u7406"},"\uff084\uff09\u7aef\u70b9FIFO\u7ba1\u7406"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"static inline int usb_ep_fifo_status(struct usb_ep *ep);\nstatic inline void usb_ep_fifo_flush(struct usb_ep *ep);\n")),(0,r.kt)("p",null,"\u524d\u8005\u8c03\u7528\u201cep->ops->fifo_status\uff08ep\uff09\u201d\u8fd4\u56de\u76ee\u524dFIFO\u4e2d\u7684\u5b57\u8282\u6570\uff0c\u540e\u8005\u8c03\u7528\u201cep->ops->fifo_flush\uff08ep\uff09\u201d\u4ee5\u51b2\u5237\u6389FIFO\u4e2d\u7684\u6570\u636e\u3002"),(0,r.kt)("h2",{id:"5\u7aef\u70b9\u81ea\u52a8\u914d\u7f6e"},"\uff085\uff09\u7aef\u70b9\u81ea\u52a8\u914d\u7f6e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct usb_ep *usb_ep_autoconfig(\n      struct usb_gadget               *gadget,\n      struct usb_endpoint_descriptor  *desc);\n")),(0,r.kt)("p",null,"\u6839\u636e\u7aef\u70b9\u63cf\u8ff0\u7b26\u53ca\u63a7\u5236\u5668\u7aef\u70b9\u60c5\u51b5\uff0c\u5206\u914d\u4e00\u4e2a\u5408\u9002\u7684\u7aef\u70b9\u3002"),(0,r.kt)("h1",{id:"1642\u5b9e\u4f8bchipidea-usb-udc\u9a71\u52a8"},"16.4.2\u3000\u5b9e\u4f8b\uff1aChipidea USB UDC\u9a71\u52a8"),(0,r.kt)("p",null,"drivers/usb/chipidea/udc.c\u662fChipidea USB UDC\u9a71\u52a8\u7684\u4e3b\u4f53\u4ee3\u7801\uff0c\u4ee3\u7801\u6e05\u535516.33\u5217\u51fa\u4e86\u5b83\u7684\u521d\u59cb\u5316\u6d41\u7a0b\u90e8\u5206\u3002\u5b83\u5b9a\u4e49\u4e86usb_ep_ops\u3001usb_gadget_ops\uff0c\u5728\u6700\u7ec8\u8fdb\u884cusb_add_gadget_udc\uff08\uff09\u4e4b\u524d\u586b\u5145\u597d\u4e86UDC\u7684\u7aef\u70b9\u5217\u8868\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.33\u3000Chipidea USB UDC\u9a71\u52a8\u5b9e\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1static const struct usb_ep_ops usb_ep_ops = {\n 2    .enable          = ep_enable,\n 3    .disable       = ep_disable,\n 4    .alloc_request  = ep_alloc_request,\n 5    .free_request  = ep_free_request,\n 6    .queue         = ep_queue,\n 7    .dequeue      = ep_dequeue,\n 8    .set_halt     = ep_set_halt,\n 9    .set_wedge    = ep_set_wedge,\n10    .fifo_flush   = ep_fifo_flush,\n11};\n12\n13static const struct usb_gadget_ops usb_gadget_ops = {\n14    .vbus_session= ci_udc_vbus_session,\n15    .wakeup      = ci_udc_wakeup,\n16    .set_selfpowered = ci_udc_selfpowered,\n17    .pullup      = ci_udc_pullup,\n18    .vbus_draw   = ci_udc_vbus_draw,\n19    .udc_start   = ci_udc_start,\n20    .udc_stop    = ci_udc_stop,\n21};\n22\n23static int init_eps(struct ci_hdrc *ci)\n24{\n25    int retval = 0, i, j;\n26\n27    for (i = 0; i < ci->hw_ep_max/2; i++)\n28        for (j = RX; j <= TX; j++) {\n29            int k = i + j * ci->hw_ep_max/2;\n30            struct ci_hw_ep *hwep = &ci->ci_hw_ep[k];\n31\n32            ...\n33\n34            hwep->ep.name      = hwep->name;\n35            hwep->ep.ops       = &usb_ep_ops;\n36\n37            usb_ep_set_maxpacket_limit(&hwep->ep, (unsigned short)~0);\n38\n39            ...\n40\n41            /*\n42             * set up shorthands for ep0 out and in endpoints,\n43             * don't add to gadget's ep_list\n44             */\n45            if (i == 0) {\n46                if (j == RX)\n47                ci->ep0out = hwep;\n48            else\n49                ci->ep0in = hwep;\n50\n51            usb_ep_set_maxpacket_limit(&hwep->ep, CTRL_PAYLOAD_MAX);\n52            continue;\n53        }\n54\n55        list_add_tail(&hwep->ep.ep_list, &ci->gadget.ep_list);\n56    }\n57\n58return retval;\n59}\n60\n61static int udc_start(struct ci_hdrc *ci)\n62{\n63    ...\n64    ci->gadget.ops    = &usb_gadget_ops;\n65    ci->gadget.speed     = USB_SPEED_UNKNOWN;\n66    ci->gadget.max_speed  = USB_SPEED_HIGH;\n67    ci->gadget.is_otg    = ci->is_otg   1 : 0;\n68    ci->gadget.name     = ci->platdata->name;\n69\n70    INIT_LIST_HEAD(&ci->gadget.ep_list);\n71\n72    ...\n73\n74    retval = init_eps(ci);\n75    if (retval)\n76        goto free_pools;\n77\n78    ci->gadget.ep0 = &ci->ep0in->ep;\n79\n80    retval = usb_add_gadget_udc(dev, &ci->gadget);\n81    ...\n82}\n")),(0,r.kt)("h1",{id:"1643\u5b9e\u4f8bloopback-function\u9a71\u52a8"},"16.4.3\u3000\u5b9e\u4f8b\uff1aLoopback Function\u9a71\u52a8"),(0,r.kt)("p",null,"drivers/usb/gadget/function/f_loopback.c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u7b80\u5355\u7684Loopback\u9a71\u52a8\uff0c\u5b83\u5b8c\u6210\u7684\u4e3b\u8981\u5de5\u4f5c\u5982\u4e0b\u3002"),(0,r.kt)("p",null,"1\uff09\u5b9e\u73b0usb_function\u5b9e\u4f8b\u53ca\u5176\u4e2d\u7684\u6210\u5458\u51fd\u6570bind\uff08\uff09\u3001set_alt\uff08\uff09\u3001disable\uff08\uff09\u3001free_func\uff08\uff09\u7b49\u6210\u5458\u51fd\u6570\u3002"),(0,r.kt)("p",null,"2\uff09\u51c6\u5907USB\u5916\u8bbe\u7684\u914d\u7f6e\u63cf\u8ff0\u7b26\u63a5\u53e3\u63cf\u8ff0\u7b26usb_interface_descriptor\u3001\u7aef\u70b9\u63cf\u8ff0\u7b26usb_endpoint_descriptor\u7b49\u3002"),(0,r.kt)("p",null,"3\uff09\u53d1\u8d77usb_request\u5904\u7406usb_request\u7684\u5b8c\u6210\u5e76\u56de\u73af\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.34\u662f\u62bd\u53d6\u4e86drivers/usb/gadget/function/f_loopback.c\u6587\u4ef6\u4e2d\u80fd\u53cd\u6620\u4e00\u4e2aFunction\u9a71\u52a8\u4e3b\u4f53\u7ed3\u6784\u7684\u5c11\u91cf\u4ee3\u7801\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535516.34\u3000Loopback USB Gadget Function\u9a71\u52a8\u5b9e\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  1static struct usb_interface_descriptor loopback_intf = {\n  2        .bLength =            sizeof loopback_intf,\n  3        .bDescriptorType =     USB_DT_INTERFACE,\n  4\n  5        .bNumEndpoints =       2,\n  6        .bInterfaceClass =     USB_CLASS_VENDOR_SPEC,\n  7        /* .iInterface = DYNAMIC */\n  8};\n  9\n 10static struct usb_endpoint_descriptor fs_loop_source_desc = {\n 11        .bLength =            USB_DT_ENDPOINT_SIZE,\n 12        .bDescriptorType =     USB_DT_ENDPOINT,\n 13\n 14        .bEndpointAddress =    USB_DIR_IN,\n 15        .bmAttributes =       USB_ENDPOINT_XFER_BULK,\n 16};\n 17static struct usb_descriptor_header *fs_loopback_descs[] = {\n 18        (struct usb_descriptor_header *) &loopback_intf,\n 19        (struct usb_descriptor_header *) &fs_loop_sink_desc,\n 20        (struct usb_descriptor_header *) &fs_loop_source_desc,\n 21        NULL,\n 22};\n 23static struct usb_string strings_loopback[] = {\n 24        [0].s = "loop input to output",\n 25        {  }                              /* end of list */\n 26};\n 27\n 28static struct usb_gadget_strings stringtab_loop = {\n 29        .language      = 0x0409,          /* en-us */\n 30        .strings       = strings_loopback,\n 31};\n 32\n 33static struct usb_gadget_strings *loopback_strings[] = {\n 34        &stringtab_loop,\n 35        NULL,\n 36};\n 37\n 38static int loopback_bind(struct usb_configuration *c, struct usb_function *f)\n 39{\n 40...\n 41loop->in_ep = usb_ep_autoconfig(cdev->gadget, &fs_loop_source_desc);\n 42...\n 43loop->out_ep = usb_ep_autoconfig(cdev->gadget, &fs_loop_sink_desc);\n 44if (!loop->out_ep)\n 45      goto autoconf_fail;\n 46loop->out_ep->driver_data = cdev;/* claim */\n 47\n 48/* support high speed hardware */\n 49hs_loop_source_desc.bEndpointAddress =\n 50      fs_loop_source_desc.bEndpointAddress;\n 51hs_loop_sink_desc.bEndpointAddress = fs_loop_sink_desc.bEndpointAddress;\n 52\n 53/* support super speed hardware */\n 54ss_loop_source_desc.bEndpointAddress =\n 55      fs_loop_source_desc.bEndpointAddress;\n 56ss_loop_sink_desc.bEndpointAddress = fs_loop_sink_desc.bEndpointAddress;\n 57\n 58ret = usb_assign_descriptors(f, fs_loopback_descs, hs_loopback_descs,\n 59            ss_loopback_descs);\n 60...\n 61return 0;\n 62}\n 63\n 64static void lb_free_func(struct usb_function *f)\n 65{\n 66...\n 67usb_free_all_descriptors(f);\n 68kfree(func_to_loop(f));\n 69}\n 70\n 71static struct usb_function *loopback_alloc(struct usb_function_instance *fi)\n 72{\n 73       ...\n 74       loop->function.name = "loopback";\n 75       loop->function.bind = loopback_bind;\n 76       loop->function.set_alt = loopback_set_alt;\n 77       loop->function.disable = loopback_disable;\n 78       loop->function.strings = loopback_strings;\n 79\n 80       loop->function.free_func = lb_free_func;\n 81\n 82       return &loop->function;\n 83}\n 84\n 85static void loopback_complete(struct usb_ep *ep, struct usb_request *req)\n 86{\n 87...\n 88}\n 89\n 90static int enable_endpoint(struct usb_composite_dev *cdev, struct f_loopback *loop,\n 91                          struct usb_ep *ep)\n 92{\n 93struct usb_request           *req;\n 94...\n 95result = config_ep_by_speed(cdev->gadget, &(loop->function), ep);\n 96\n 97result = usb_ep_enable(ep);\n 98\n 99ep->driver_data = loop;\n100\n101for (i = 0; i < qlen && result == 0; i++) {\n102      req = lb_alloc_ep_req(ep, 0);\n103      if (!req)\n104          goto fail1;\n105\n106      req->complete = loopback_complete;\n107      result = usb_ep_queue(ep, req, GFP_ATOMIC);\n108      if (result) {\n109          ERROR(cdev, "%s queue req --\x3e %d\\n",\n110                  ep->name, result);\n111          goto fail1;\n112      }\n113}\n114\n115...\n116}\n')))}l.isMDXComponent=!0}}]);