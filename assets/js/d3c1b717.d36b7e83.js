"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[57721],{3905:function(e,n,r){r.d(n,{Zo:function(){return o},kt:function(){return _}});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=t.createContext({}),a=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},o=function(e){var n=a(e.components);return t.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,c=e.originalType,u=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),s=a(r),_=i,d=s["".concat(u,".").concat(_)]||s[_]||f[_]||c;return r?t.createElement(d,l(l({ref:n},o),{},{components:r})):t.createElement(d,l({ref:n},o))}));function _(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=r.length,l=new Array(c);l[0]=s;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=e,p.mdxType="string"==typeof e?e:i,l[1]=p;for(var a=2;a<c;a++)l[a]=r[a];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},33099:function(e,n,r){r.r(n),r.d(n,{assets:function(){return o},contentTitle:function(){return u},default:function(){return _},frontMatter:function(){return p},metadata:function(){return a},toc:function(){return f}});var t=r(87462),i=r(63366),c=(r(67294),r(3905)),l=["components"],p={},u=void 0,a={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.2\u3000CPUFreq\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.2\u3000CPUFreq\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.2\u3000CPUFreq\u9a71\u52a8.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.2\u3000CPUFreq\u9a71\u52a8",description:"CPUFreq\u5b50\u7cfb\u7edf\u4f4d\u4e8edrivers/cpufreq\u76ee\u5f55\u4e0b\uff0c\u8d1f\u8d23\u8fdb\u884c\u8fd0\u884c\u8fc7\u7a0b\u4e2dCPU\u9891\u7387\u548c\u7535\u538b\u7684\u52a8\u6001\u8c03\u6574\uff0c\u5373DVFS\uff08Dynamic Voltage Frequency Scaling\uff0c\u52a8\u6001\u7535\u538b\u9891\u7387\u8c03\u6574\uff09\u3002\u8fd0\u884c\u65f6\u8fdb\u884cCPU\u7535\u538b\u548c\u9891\u7387\u8c03\u6574\u7684\u539f\u56e0\u662f\uff1aCMOS\u7535\u8def\u4e2d\u7684\u529f\u8017\u4e0e\u7535\u538b\u7684\u5e73\u65b9\u6210\u6b63\u6bd4\u3001\u4e0e\u9891\u7387\u6210\u6b63\u6bd4\uff08P\u221dfV2 \uff09\uff0c\u56e0\u6b64\u964d\u4f4e\u7535\u538b\u548c\u9891\u7387\u53ef\u964d\u4f4e\u529f\u8017\u3002",date:"2025-09-15T14:44:14.617Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:14.325,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.3\u3000\u5185\u6838\u6253\u5370\u4fe1\u606f\u2014printk\uff08\u200b\uff09",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.3\u3000\u5185\u6838\u6253\u5370\u4fe1\u606f\u2014printk\uff08\u200b\uff09"},nextItem:{title:"1.2\u3000\u65e0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u8bbe\u5907\u9a71\u52a8",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.2\u3000\u65e0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u8bbe\u5907\u9a71\u52a8"}},o={authorsImageUrls:[]},f=[],s={toc:f};function _(e){var n=e.components,p=(0,i.Z)(e,l);return(0,c.kt)("wrapper",(0,t.Z)({},s,p,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"CPUFreq\u5b50\u7cfb\u7edf\u4f4d\u4e8edrivers/cpufreq\u76ee\u5f55\u4e0b\uff0c\u8d1f\u8d23\u8fdb\u884c\u8fd0\u884c\u8fc7\u7a0b\u4e2dCPU\u9891\u7387\u548c\u7535\u538b\u7684\u52a8\u6001\u8c03\u6574\uff0c\u5373DVFS\uff08Dynamic Voltage Frequency Scaling\uff0c\u52a8\u6001\u7535\u538b\u9891\u7387\u8c03\u6574\uff09\u3002\u8fd0\u884c\u65f6\u8fdb\u884cCPU\u7535\u538b\u548c\u9891\u7387\u8c03\u6574\u7684\u539f\u56e0\u662f\uff1aCMOS\u7535\u8def\u4e2d\u7684\u529f\u8017\u4e0e\u7535\u538b\u7684\u5e73\u65b9\u6210\u6b63\u6bd4\u3001\u4e0e\u9891\u7387\u6210\u6b63\u6bd4\uff08P\u221dfV2 \uff09\uff0c\u56e0\u6b64\u964d\u4f4e\u7535\u538b\u548c\u9891\u7387\u53ef\u964d\u4f4e\u529f\u8017\u3002"),(0,c.kt)("p",null,"CPUFreq\u7684\u6838\u5fc3\u5c42\u4f4d\u4e8edrivers/cpufreq/cpufreq.c\u4e0b\uff0c\u5b83\u4e3a\u5404\u4e2aSoC\u7684CPUFreq\u9a71\u52a8\u7684\u5b9e\u73b0\u63d0\u4f9b\u4e86\u4e00\u5957\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u5e76\u5b9e\u73b0\u4e86\u4e00\u5957notifier\u673a\u5236\uff0c\u53ef\u4ee5\u5728CPUFreq\u7684\u7b56\u7565\u548c\u9891\u7387\u6539\u53d8\u7684\u65f6\u5019\u5411\u5176\u4ed6\u6a21\u5757\u53d1\u51fa\u901a\u77e5\u3002\u53e6\u5916\uff0c\u5728CPU\u8fd0\u884c\u9891\u7387\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u5185\u6838\u7684loops_per_jiffy\u5e38\u6570\u4e5f\u4f1a\u53d1\u751f\u76f8\u5e94\u53d8\u5316\u3002"),(0,c.kt)("h1",{id:"1921soc\u7684cpufreq\u9a71\u52a8\u5b9e\u73b0"},"19.2.1\u3000SoC\u7684CPUFreq\u9a71\u52a8\u5b9e\u73b0"),(0,c.kt)("p",null,"\u6bcf\u4e2aSoC\u7684\u5177\u4f53CPUFreq\u9a71\u52a8\u5b9e\u4f8b\u53ea\u9700\u8981\u5b9e\u73b0\u7535\u538b\u3001\u9891\u7387\u8868\uff0c\u4ee5\u53ca\u4ece\u786c\u4ef6\u5c42\u9762\u5b8c\u6210\u8fd9\u4e9b\u53d8\u5316\u3002"),(0,c.kt)("p",null,"CPUFreq\u6838\u5fc3\u5c42\u63d0\u4f9b\u4e86\u5982\u4e0bAPI\u4ee5\u4f9bSoC\u6ce8\u518c\u81ea\u8eab\u7684CPUFreq\u9a71\u52a8\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"intcpufreq_register_driver(struct cpufreq_driver *driver_data);\n")),(0,c.kt)("p",null,"\u5176\u53c2\u6570\u4e3a\u4e00\u4e2acpufreq_driver\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5b9e\u9645\u4e0a\uff0ccpufreq_driver\u5c01\u88c5\u4e86\u4e00\u4e2a\u5177\u4f53\u7684SoC\u7684CPUFreq\u9a71\u52a8\u7684\u4e3b\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u5f62\u5982\u4ee3\u7801\u6e05\u535519.1\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.1\u3000cpufreq_driver\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct cpufreq_driver {\n 2struct module         *owner;\n 3char                 name[CPUFREQ_NAME_LEN];\n 4 u8                   flags;\n 5\n 6       /* needed by all drivers */\n 7int    (*init)         (struct cpufreq_policy *policy);\n 8int    (*verify)       (struct cpufreq_policy *policy);\n 9\n10       /* define one out of two */\n11int     (*setpolicy)    (struct cpufreq_policy *policy);\n12int     (*target)       (struct cpufreq_policy *policy),\n13unsigned inttarget_freq,\n14unsigned int relation);\n15\n16      /* should be defined, if possible */\n17unsigned int    (*get)  (unsigned intcpu);\n18\n19      /* optional */\n20unsigned int (*getavg)  (struct cpufreq_policy *policy,\n21unsigned intcpu);\n22int     (*bios_limit)   (intcpu, unsigned int *limit);\n23\n24int     (*exit)         (struct cpufreq_policy *policy);\n25int     (*suspend)      (struct cpufreq_policy *policy);\n26int     (*resume)       (struct cpufreq_policy *policy);\n27structfreq_attr        **attr;\n28};\n")),(0,c.kt)("p",null,"\u5176\u4e2d\u7684owner\u6210\u5458\u4e00\u822c\u88ab\u8bbe\u7f6e\u4e3aTHIS_MODULE\uff1bname\u6210\u5458\u662fCPUFreq\u9a71\u52a8\u7684\u540d\u5b57\uff0c\u5982drivers/cpufreq/s5pv210-cpufreq.c\u8bbe\u7f6ename\u4e3as5pv210\uff0cdrivers/cpufreq/omap-cpufreq.c\u8bbe\u7f6ename\u4e3aomap\uff1bflags\u662f\u4e00\u4e9b\u6697\u793a\u6027\u7684\u6807\u5fd7\uff0c\u8b6c\u5982\uff0c\u82e5\u8bbe\u7f6e\u4e86CPUFREQ_CONST_LOOPS\uff0c\u5219\u662f\u544a\u8bc9\u5185\u6838loops_per_jiffy\u4e0d\u4f1a\u56e0\u4e3aCPU\u9891\u7387\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002"),(0,c.kt)("p",null,"init\uff08\uff09\u6210\u5458\u662f\u4e00\u4e2aper-CPU\u521d\u59cb\u5316\u51fd\u6570\u6307\u9488\uff0c\u6bcf\u5f53\u4e00\u4e2a\u65b0\u7684CPU\u88ab\u6ce8\u518c\u8fdb\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u8be5\u51fd\u6570\u5c31\u88ab\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2acpufreq_policy\u7684\u6307\u9488\u53c2\u6570\uff0c\u5728init\uff08\uff09\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u53ef\u8fdb\u884c\u5982\u4e0b\u8bbe\u7f6e\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"policy->cpuinfo.min_freq\npolicy->cpuinfo.max_freq\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u63cf\u8ff0\u7684\u662f\u8be5CPU\u652f\u6301\u7684\u6700\u5c0f\u9891\u7387\u548c\u6700\u5927\u9891\u7387\uff08\u5355\u4f4d\u662fkHz\uff09\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"policy->cpuinfo.transition_latency\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u63cf\u8ff0\u7684\u662fCPU\u8fdb\u884c\u9891\u7387\u5207\u6362\u6240\u9700\u8981\u7684\u5ef6\u8fdf\uff08\u5355\u4f4d\u662fns\uff09"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"policy->cur\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u63cf\u8ff0\u7684\u662fCPU\u7684\u5f53\u524d\u9891\u7387\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"policy->policy\npolicy->governor\npolicy->min\npolicy->max\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u5b9a\u4e49\u8be5CPU\u7684\u7f3a\u7701\u7b56\u7565\uff0c\u4ee5\u53ca\u5728\u7f3a\u7701\u7b56\u7565\u60c5\u51b5\u4e0b\uff0c\u8be5\u7b56\u7565\u652f\u6301\u7684\u6700\u5c0f\u3001\u6700\u5927CPU\u9891\u7387\u3002"),(0,c.kt)("p",null,"verify\uff08\uff09\u6210\u5458\u51fd\u6570\u7528\u4e8e\u5bf9\u7528\u6237\u7684CPUFreq\u7b56\u7565\u8bbe\u7f6e\u8fdb\u884c\u6709\u6548\u6027\u9a8c\u8bc1\u548c\u6570\u636e\u4fee\u6b63\u3002\u6bcf\u5f53\u7528\u6237\u8bbe\u5b9a\u4e00\u4e2a\u65b0\u7b56\u7565\u65f6\uff0c\u8be5\u51fd\u6570\u6839\u636e\u8001\u7684\u7b56\u7565\u548c\u65b0\u7684\u7b56\u7565\uff0c\u68c0\u9a8c\u65b0\u7b56\u7565\u8bbe\u7f6e\u7684\u6709\u6548\u6027\u5e76\u5bf9\u65e0\u6548\u8bbe\u7f6e\u8fdb\u884c\u5fc5\u8981\u7684\u4fee\u6b63\u3002\u5728\u8be5\u6210\u5458\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u5e38\u7528\u5230\u5982\u4e0b\u8f85\u52a9\u51fd\u6570\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"cpufreq_verify_within_limits(struct cpufreq_policy *policy, unsigned intmin_freq,\n        unsigned intmax_freq);\n")),(0,c.kt)("p",null,"setpolicy\uff08\uff09\u6210\u5458\u51fd\u6570\u63a5\u53d7\u4e00\u4e2apolicy\u53c2\u6570\uff08\u5305\u542bpolicy->policy\u3001policy->min\u548cpolicy->max\u7b49\u6210\u5458\uff09\uff0c\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u7684CPU\u4e00\u822c\u5177\u5907\u5728\u4e00\u4e2a\u8303\u56f4\uff08limit\uff0c\u4ecepolicy->min\u5230policy->max\uff09\u91cc\u81ea\u52a8\u8c03\u6574\u9891\u7387\u7684\u80fd\u529b\u3002\u76ee\u524d\u53ea\u6709\u5c11\u6570\u9a71\u52a8\uff08\u5982intel_pstate.c\u548clongrun.c\uff09\u5305\u542b\u8fd9\u6837\u7684\u6210\u5458\u51fd\u6570\uff0c\u800c\u7edd\u5927\u591a\u6570CPU\u90fd\u4e0d\u4f1a\u5b9e\u73b0\u6b64\u51fd\u6570\uff0c\u4e00\u822c\u53ea\u5b9e\u73b0target\uff08\uff09\u6210\u5458\u51fd\u6570\uff0ctarget\uff08\uff09\u7684\u53c2\u6570\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u6307\u5b9a\u7684\u9891\u7387\u3002"),(0,c.kt)("p",null,"target\uff08\uff09\u6210\u5458\u51fd\u6570\u7528\u4e8e\u5c06\u9891\u7387\u8c03\u6574\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u503c\uff0c\u63a5\u53d73\u4e2a\u53c2\u6570\uff1apolicy\u3001target_freq\u548crelation\u3002target_freq\u662f\u76ee\u6807\u9891\u7387\uff0c\u5b9e\u9645\u9a71\u52a8\u603b\u662f\u8981\u8bbe\u5b9a\u771f\u5b9e\u7684CPU\u9891\u7387\u5230\u6700\u63a5\u8fd1\u4e8etarget_freq\uff0c\u5e76\u4e14\u8bbe\u5b9a\u7684\u9891\u7387\u5fc5\u987b\u4f4d\u4e8epolicy->min\u5230policy->max\u4e4b\u95f4\u3002\u5728\u8bbe\u5b9a\u9891\u7387\u63a5\u8fd1target_freq\u7684\u60c5\u51b5\u4e0b\uff0crelation\u82e5\u4e3aCPUFREQ_REL_L\uff0c\u5219\u6697\u793a\u8bbe\u7f6e\u7684\u9891\u7387\u5e94\u8be5\u5927\u4e8e\u6216\u7b49\u4e8etarget_freq\uff1brelation\u82e5\u4e3aCPUFREQ_REL_H\uff0c\u5219\u6697\u793a\u8bbe\u7f6e\u7684\u9891\u7387\u5e94\u8be5\u5c0f\u4e8e\u6216\u7b49\u4e8etarget_freq\u3002"),(0,c.kt)("p",null,"\u886819.1\u63cf\u8ff0\u4e86setpolicy\uff08\uff09\u548ctarget\uff08\uff09\u6240\u9488\u5bf9\u7684CPU\u4ee5\u53ca\u8c03\u7528\u65b9\u5f0f\u4e0a\u7684\u533a\u522b\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1746005269313",src:r(39014).Z,width:"1420",height:"199"})),(0,c.kt)("p",null,"\u6839\u636e\u82af\u7247\u5185\u90e8PLL\u548c\u5206\u9891\u5668\u7684\u5173\u7cfb\uff0cARM SoC\u4e00\u822c\u4e0d\u5177\u5907\u72ec\u7acb\u8c03\u6574\u9891\u7387\u7684\u80fd\u529b\uff0c\u5f80\u5f80SoC\u7684CPUFreq\u9a71\u52a8\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u9891\u7387\u8868\uff0c\u9891\u7387\u5728\u8be5\u8868\u7684\u8303\u56f4\u5185\u8fdb\u884c\u53d8\u66f4\uff0c\u56e0\u6b64\u4e00\u822c\u5b9e\u73b0target\uff08\uff09\u6210\u5458\u51fd\u6570\u3002"),(0,c.kt)("p",null,"CPUFreq\u6838\u5fc3\u5c42\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0e\u9891\u7387\u8868\u76f8\u5173\u7684\u8f85\u52a9API\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"intcpufreq_frequency_table_cpuinfo(struct cpufreq_policy *policy,\nstruct cpufreq_frequency_table *table);\n")),(0,c.kt)("p",null,"\u5b83\u662fcpufreq_driver\u7684init\uff08\uff09\u6210\u5458\u51fd\u6570\u7684\u52a9\u624b\uff0c\u7528\u4e8e\u5c06policy->min\u548cpolicy->max\u8bbe\u7f6e\u4e3a\u4e0ecpuinfo.min_freq\u548ccpuinfo.max_freq\u76f8\u540c\u7684\u503c\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"intcpufreq_frequency_table_verify(struct cpufreq_policy *policy,\nstruct cpufreq_frequency_table *table);\n")),(0,c.kt)("p",null,"\u5b83\u662fcpufreq_driver\u7684verify\uff08\uff09\u6210\u5458\u51fd\u6570\u7684\u52a9\u624b\uff0c\u786e\u4fdd\u81f3\u5c11\u67091\u4e2a\u6709\u6548\u7684CPU\u9891\u7387\u4f4d\u4e8epolicy->min\u5230policy->max\u7684\u8303\u56f4\u5185\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"intcpufreq_frequency_table_target(struct cpufreq_policy *policy,\nstruct cpufreq_frequency_table *table,\nunsigned inttarget_freq,\nunsigned int relation,\nunsigned int *index);\n")),(0,c.kt)("p",null,"\u5b83\u662fcpufreq_driver\u7684target\uff08\uff09\u6210\u5458\u51fd\u6570\u7684\u52a9\u624b\uff0c\u8fd4\u56de\u9700\u8981\u8bbe\u5b9a\u7684\u9891\u7387\u5728\u9891\u7387\u8868\u4e2d\u7684\u7d22\u5f15\u3002"),(0,c.kt)("p",null,"\u7701\u7565\u6389\u5177\u4f53\u7684\u7ec6\u8282\uff0c1\u4e2aSoC\u7684CPUFreq\u9a71\u52a8\u5b9e\u4f8bdrivers/cpufreq/s3c64xx-cpufreq.c\u7684\u6838\u5fc3\u7ed3\u6784\u5982\u4ee3\u7801\u6e05\u535519.2\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.2\u3000S3C64xx\u7684CPUFreq\u9a71\u52a8"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'  1static unsigned long regulator_latency;\n  2\n  3struct s3c64xx_dvfs {\n  4unsigned intvddarm_min;\n  5unsigned intvddarm_max;\n  6};\n  7\n  8static struct s3c64xx_dvfs s3c64xx_dvfs_table[] = {\n  9[0] = { 1000000, 1150000 },\n 10\u2026\n 11[4] = { 1300000, 1350000 },\n 12};\n 13\n 14static struct cpufreq_frequency_table s3c64xx_freq_table[] = {\n 15{ 0,  66000 },\n 16{ 0, 100000 },\n 17\u2026\n 18{ 0, CPUFREQ_TABLE_END },\n 19};\n 20\n 21static int s3c64xx_cpufreq_verify_speed(struct cpufreq_policy *policy)\n 22{\n 23if (policy->cpu != 0)\n 24    return -EINVAL;\n 25\n 26return cpufreq_frequency_table_verify(policy, s3c64xx_freq_table);\n 27}\n 28\n 29static unsigned int s3c64xx_cpufreq_get_speed(unsigned intcpu)\n 30{\n 31if (cpu != 0)\n 32    return 0;\n 33\n 34return clk_get_rate(armclk) / 1000;\n 35}\n 36\n 37static int s3c64xx_cpufreq_set_target(struct cpufreq_policy *policy,\n 38             unsigned inttarget_freq,\n 39             unsigned int relation)\n 40{\n 41\u2026\n 42ret = cpufreq_frequency_table_target(policy, s3c64xx_freq_table,\n 43                 target_freq, relation, &i);\n 44\u2026\n 45freqs.cpu = 0;\n 46freqs.old = clk_get_rate(armclk) / 1000;\n 47freqs.new = s3c64xx_freq_table[i].frequency;\n 48freqs.flags = 0;\n 49dvfs = &s3c64xx_dvfs_table[s3c64xx_freq_table[i].index];\n 50\n 51if (freqs.old == freqs.new)\n 52    return 0;\n 53\n 54cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);\n 55\n 56if (vddarm&&freqs.new>freqs.old) {\n 57    ret = regulator_set_voltage(vddarm,\n 58                 dvfs->vddarm_min,\n 59                 dvfs->vddarm_max);\n 60    \u2026\n 61}\n 62\n 63ret = clk_set_rate(armclk, freqs.new * 1000);\n 64\u2026\n 65cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);\n 66\n 67if (vddarm&&freqs.new<freqs.old) {\n 68    ret = regulator_set_voltage(vddarm,\n 69                 dvfs->vddarm_min,\n 70                 dvfs->vddarm_max);\n 71    \u2026\n 72}\n 73\n 74return 0;\n 75}\n 76\n 77static int s3c64xx_cpufreq_driver_init(struct cpufreq_policy *policy)\n 78{\n 79\u2026\n 80armclk = clk_get(NULL, "armclk");\n 81\u2026\n 82vddarm = regulator_get(NULL, "vddarm");\n 83\u2026\n 84s3c64xx_cpufreq_config_regulator();\n 85\n 86freq = s3c64xx_freq_table;\n 87while (freq->frequency != CPUFREQ_TABLE_END) {\n 88    unsigned long r;\n 89    \u2026\n 90}\n 91\n 92policy->cur = clk_get_rate(armclk) / 1000;\n 93policy->cpuinfo.transition_latency = (500 * 1000) + regulator_latency;\n 94ret = cpufreq_frequency_table_cpuinfo(policy, s3c64xx_freq_table);\n 95\u2026\n 96return ret;\n 97}\n 98\n 99staticstruct cpufreq_driver s3c64xx_cpufreq_driver = {\n100.owner       = THIS_MODULE,\n101.flags         = 0,\n102.verify      = s3c64xx_cpufreq_verify_speed,\n103.target      = s3c64xx_cpufreq_set_target,\n104.get     = s3c64xx_cpufreq_get_speed,\n105.init        = s3c64xx_cpufreq_driver_init,\n106.name        = "s3c",\n107};\n108\n109static int __init s3c64xx_cpufreq_init(void)\n110{\n111return cpufreq_register_driver(&s3c64xx_cpufreq_driver);\n112}\n113module_init(s3c64xx_cpufreq_init);\n')),(0,c.kt)("p",null,"\u7b2c37\u884cs3c64xx_cpufreq_set_target\uff08\uff09\u5c31\u662f\u5b8c\u6210\u76ee\u6807\u9891\u7387\u8bbe\u7f6e\u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528\u4e86cpufreq_frequency_table_target\uff08\uff09\u4eces3c64xx\u652f\u6301\u7684\u9891\u7387\u8868s3c64xx_freq_table\u91cc\u627e\u5230\u5408\u9002\u7684\u9891\u7387\u3002\u5728\u5177\u4f53\u7684\u9891\u7387\u548c\u7535\u538b\u8bbe\u7f6e\u73af\u8282\uff0c\u7528\u7684\u90fd\u662fLinux\u7684\u6807\u51c6API regulator_set_voltage\uff08\uff09\u548cclk_set_rate\uff08\uff09\u4e4b\u7c7b\u7684\u51fd\u6570\u3002"),(0,c.kt)("p",null,"\u7b2c111\u884c\u5728\u6a21\u5757\u521d\u59cb\u5316\u7684\u65f6\u5019\u901a\u8fc7cpufreq_register_driver\uff08\uff09\u6ce8\u518c\u4e86cpufreq_driver\u7684\u5b9e\u4f8b\uff0c\u7b2c94\u884c\uff0c\u5728CPUFreq\u7684\u521d\u59cb\u5316\u9636\u6bb5\u8c03\u7528cpufreq_frequency_table_cpuinfo\uff08\uff09\u6ce8\u518c\u4e86\u9891\u7387\u8868\u3002\u5173\u4e8e\u9891\u7387\u8868\uff0c\u6bd4\u8f83\u65b0\u7684\u5185\u6838\u559c\u6b22\u4f7f\u7528\u540e\u9762\u7ae0\u8282\u5c06\u4ecb\u7ecd\u7684OPP\u3002"),(0,c.kt)("h1",{id:"1922cpufreq\u7684\u7b56\u7565"},"19.2.2\u3000CPUFreq\u7684\u7b56\u7565"),(0,c.kt)("p",null,"SoCCPUFreq\u9a71\u52a8\u53ea\u662f\u8bbe\u5b9a\u4e86CPU\u7684\u9891\u7387\u53c2\u6570\uff0c\u4ee5\u53ca\u63d0\u4f9b\u4e86\u8bbe\u7f6e\u9891\u7387\u7684\u9014\u5f84\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u4f1a\u7ba1CPU\u81ea\u8eab\u7a76\u7adf\u5e94\u8be5\u8fd0\u884c\u5728\u54ea\u79cd\u9891\u7387\u4e0a\u3002\u7a76\u7adf\u9891\u7387\u4f9d\u636e\u7684\u662f\u54ea\u79cd\u6807\u51c6\uff0c\u8fdb\u884c\u4f55\u79cd\u53d8\u5316\uff0c\u800c\u8fd9\u4e9b\u5b8c\u5168\u7531CPUFreq\u7684\u7b56\u7565\uff08policy\uff09\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u7b56\u7565\u5982\u886819.2\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u886819.2\u3000CPUFrep\u7684\u7b56\u7565\u53ca\u5176\u5b9e\u73b0\u65b9\u6cd5"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1746022386526",src:r(61824).Z,width:"1464",height:"351"})),(0,c.kt)("p",null,"\u5728Android\u7cfb\u7edf\u4e2d\uff0c\u5219\u589e\u52a0\u4e861\u4e2a\u4ea4\u4e92\u7b56\u7565\uff0c\u8be5\u7b56\u7565\u9002\u5408\u4e8e\u5bf9\u5ef6\u8fdf\u654f\u611f\u7684UI\u4ea4\u4e92\u4efb\u52a1\uff0c\u5f53\u6709UI\u4ea4\u4e92\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u8be5\u7b56\u7565\u4f1a\u66f4\u52a0\u6fc0\u8fdb\u5e76\u53ca\u65f6\u5730\u8c03\u6574CPU\u9891\u7387\u3002"),(0,c.kt)("p",null,"\u603b\u800c\u8a00\u4e4b\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u4ee5\u53caCPUFreq\u7684\u7b56\u7565\u5171\u540c\u51b3\u5b9a\u4e86CPU\u9891\u7387\u8df3\u53d8\u7684\u76ee\u6807\uff0cCPUFreq\u6838\u5fc3\u5c42\u5e76\u5c06\u76ee\u6807\u9891\u7387\u4f20\u9012\u7ed9\u5e95\u5c42\u5177\u4f53SoC\u7684CPUFreq\u9a71\u52a8\uff0c\u8be5\u9a71\u52a8\u4fee\u6539\u786c\u4ef6\uff0c\u5b8c\u6210\u9891\u7387\u7684\u53d8\u6362\uff0c\u5982\u56fe19.2\u6240\u793a\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1746022458907",src:r(28552).Z,width:"958",height:"562"})),(0,c.kt)("p",null,"\u56fe19.2\u3000CPUFreq\u3001\u7cfb\u7edf\u8d1f\u8f7d\u3001\u7b56\u7565\u4e0e\u8c03\u9891"),(0,c.kt)("p",null,"\u7528\u6237\u7a7a\u95f4\u4e00\u822c\u53ef\u901a\u8fc7/sys/devices/system/cpu/cpux/cpufreq\u8282\u70b9\u6765\u8bbe\u7f6eCPUFreq\u3002\u8b6c\u5982\uff0c\u6211\u4eec\u8981\u8bbe\u7f6eCPUFreq\u5230700MHz\uff0c\u91c7\u7528userspace\u7b56\u7565\uff0c\u5219\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"# echo userspace > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n# echo 700000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed\n")),(0,c.kt)("h1",{id:"1923cpufreq\u7684\u6027\u80fd\u6d4b\u8bd5\u548c\u8c03\u4f18"},"19.2.3\u3000CPUFreq\u7684\u6027\u80fd\u6d4b\u8bd5\u548c\u8c03\u4f18"),(0,c.kt)("p",null,"Linux 3.1\u4ee5\u540e\u7684\u5185\u6838\u5df2\u7ecf\u5c06cpupower-utils\u5de5\u5177\u96c6\u653e\u5165\u5185\u6838\u7684tools/power/cpupower\u76ee\u5f55\u4e2d\uff0c\u8be5\u5de5\u5177\u96c6\u5f53\u4e2d\u7684cpufreq-bench\u5de5\u5177\u53ef\u4ee5\u5e2e\u52a9\u5de5\u7a0b\u5e08\u5206\u6790\u91c7\u7528CPUFreq\u540e\u5bf9\u7cfb\u7edf\u6027\u80fd\u7684\u5f71\u54cd\u3002"),(0,c.kt)("p",null,"cpufreq-bench\u5de5\u5177\u7684\u5de5\u4f5c\u539f\u7406\u662f\u6a21\u62df\u7cfb\u7edf\u8fd0\u884c\u65f6\u5019\u7684\u201c\u7a7a\u95f2\u2192\u5fd9\u2192\u7a7a\u95f2\u2192\u5fd9\u201d\u573a\u666f\uff0c\u4ece\u800c\u89e6\u53d1\u7cfb\u7edf\u7684\u52a8\u6001\u9891\u7387\u53d8\u5316\uff0c\u7136\u540e\u5728\u4f7f\u7528ondemand\u3001conservative\u3001interactive\u7b49\u7b56\u7565\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5728\u505a\u4e0eperformance\u9ad8\u9891\u6a21\u5f0f\u4e0b\u540c\u6837\u7684\u8fd0\u7b97\u5b8c\u6210\u4efb\u52a1\u7684\u65f6\u95f4\u6bd4\u4f8b\u3002"),(0,c.kt)("p",null,"\u4ea4\u53c9\u7f16\u8bd1\u8be5\u5de5\u5177\u540e\uff0c\u53ef\u653e\u5165\u76ee\u6807\u7535\u8def\u677f\u6587\u4ef6\u7cfb\u7edf\u7684/usr/sbin/\u7b49\u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c\u8be5\u5de5\u5177\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"# cpufreq-bench -l 50000 -s 100000 -x 50000 -y 100000 -g ondemand -r 5 -n 5 -v\n")),(0,c.kt)("p",null,"\u4f1a\u8f93\u51fa\u4e00\u7cfb\u5217\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u63d0\u53d6\u5176\u4e2d\u7684Round n\u8fd9\u6837\u7684\u884c\uff0c\u5b83\u8868\u660e\u4e86-g ondemand\u9009\u9879\u4e2d\u8bbe\u5b9a\u7684ondemand\u7b56\u7565\u76f8\u5bf9\u4e8eperformance\u7b56\u7565\u7684\u6027\u80fd\u6bd4\u4f8b\uff0c\u5047\u8bbe\u503c\u4e3a\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Round 1 - 39.74%\nRound 2 - 36.35%\nRound 3 - 47.91%\nRound 4 - 54.22%\nRound 5 - 58.64%\n")),(0,c.kt)("p",null,"\u8fd9\u663e\u7136\u4e0d\u592a\u7406\u60f3\uff0c\u6211\u4eec\u5728\u540c\u6837\u7684\u5e73\u53f0\u4e0b\u91c7\u7528Android\u7684\u4ea4\u4e92\u7b56\u7565\uff0c\u5f97\u5230\u65b0\u7684\u6d4b\u8bd5\u7ed3\u679c\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Round 1 - 72.95%\nRound 2 - 87.20%\nRound 3 - 91.21%\nRound 4 - 94.10%\nRound 5 - 94.93%\n")),(0,c.kt)("p",null,"\u4e00\u822c\u7684\u76ee\u6807\u662f\u5728\u91c7\u7528CPUFreq\u52a8\u6001\u8c03\u6574\u9891\u7387\u548c\u7535\u538b\u540e\uff0c\u6027\u80fd\u5e94\u8be5\u4e3aperformance\u8fd9\u4e2a\u9ad8\u6027\u80fd\u7b56\u7565\u4e0b\u768490%\u5de6\u53f3\uff0c\u8fd9\u6837\u624d\u6bd4\u8f83\u7406\u60f3\u3002"),(0,c.kt)("h1",{id:"1924cpufreq\u901a\u77e5"},"19.2.4\u3000CPUFreq\u901a\u77e5"),(0,c.kt)("p",null,"CPUFreq\u5b50\u7cfb\u7edf\u4f1a\u53d1\u51fa\u901a\u77e5\u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1aCPUFreq\u7684\u7b56\u7565\u53d8\u5316\u6216\u8005CPU\u8fd0\u884c\u9891\u7387\u53d8\u5316\u3002"),(0,c.kt)("p",null,"\u5728\u7b56\u7565\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u53d1\u90013\u6b21\u901a\u77e5\uff1a"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"\xb7CPUFREQ_ADJUST\uff1a\u6240\u6709\u6ce8\u518c\u7684notifier\u53ef\u4ee5\u6839\u636e\u786c\u4ef6\u6216\u8005\u6e29\u5ea6\u7684\u60c5\u51b5\u53bb\u4fee\u6539\u8303\u56f4\uff08\u5373policy->min\u548cpolicy->max\uff09\uff1b")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"\xb7CPUFREQ_INCOMPATIBLE\uff1a\u9664\u975e\u524d\u9762\u7684\u7b56\u7565\u8bbe\u5b9a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u786c\u4ef6\u51fa\u9519\uff0c\u5426\u5219\u88ab\u6ce8\u518c\u7684notifier\u4e0d\u80fd\u6539\u53d8\u8303\u56f4\u7b49\u8bbe\u5b9a\uff1b")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"\xb7CPUFREQ_NOTIFY\uff1a\u6240\u6709\u6ce8\u518c\u7684notifier\u90fd\u4f1a\u88ab\u544a\u77e5\u65b0\u7684\u7b56\u7565\u5df2\u7ecf\u88ab\u8bbe\u7f6e\u3002"))),(0,c.kt)("p",null,"\u5728\u9891\u7387\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u53d1\u90012\u6b21\u901a\u77e5\uff1a"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"\xb7CPUFREQ_PRECHANGE\uff1a\u51c6\u5907\u8fdb\u884c\u9891\u7387\u53d8\u66f4\uff1b"),(0,c.kt)("li",{parentName:"ul"},"\xb7CPUFREQ_POSTCHANGE\uff1a\u5df2\u7ecf\u5b8c\u6210\u9891\u7387\u53d8\u66f4\u3002")),(0,c.kt)("p",null,"notifier\u4e2d\u7684\u7b2c3\u4e2a\u53c2\u6570\u662f\u4e00\u4e2acpufreq_freqs\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542bcpu\uff08CPU\u53f7\uff09\u3001old\uff08\u8fc7\u53bb\u7684\u9891\u7387\uff09\u548cnew\uff08\u73b0\u5728\u7684\u9891\u7387\uff09\u8fd93\u4e2a\u6210\u5458\u3002\u53d1\u9001CPUFREQ_PRECHANGE\u548cCPUFREQ_POSTCHANGE\u7684\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"srcu_notifier_call_chain(&cpufreq_transition_notifier_list,\nCPUFREQ_PRECHANGE, freqs);\nsrcu_notifier_call_chain(&cpufreq_transition_notifier_list,\nCPUFREQ_POSTCHANGE, freqs);\n")),(0,c.kt)("p",null,"\u5982\u679c\u67d0\u6a21\u5757\u5173\u5fc3CPUFREQ_PRECHANGE\u6216CPUFREQ_POSTCHANGE\u4e8b\u4ef6\uff0c\u53ef\u7b80\u5355\u5730\u4f7f\u7528Linux notifier\u673a\u5236\u76d1\u63a7\u3002\u8b6c\u5982\uff0cdrivers/video/sa1100fb.c\u5728CPU\u9891\u7387\u53d8\u5316\u8fc7\u7a0b\u4e2d\u9700\u5bf9\u81ea\u8eab\u786c\u4ef6\u8fdb\u884c\u76f8\u5173\u8bbe\u7f6e\uff0c\u56e0\u6b64\u5b83\u6ce8\u518c\u4e86notifier\u5e76\u5728CPUFREQ_PRECHANGE\u548cCPUFREQ_POSTCHANGE\u60c5\u51b5\u4e0b\u5206\u522b\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u5982\u4ee3\u7801\u6e05\u535519.3\u6240\u793a\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.3\u3000CPUFreq notifier\u6848\u4f8b"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1fbi->freq_transition.notifier_call = sa1100fb_freq_transition;\n 2cpufreq_register_notifier(&fbi->freq_transition, CPUFREQ_TRANSITION_NOTIFIER);\n 3...\n 4sa1100fb_freq_transition(structnotifier_block *nb, unsigned long val,\n 5void *data)\n 6{\n 7 struct sa1100fb_info *fbi = TO_INF(nb, freq_transition);\n 8 struct cpufreq_freqs *f = data;\n 9     u_intpcd;\n10\n11     switch (val) {\n12         case CPUFREQ_PRECHANGE:\n13             set_ctrlr_state(fbi, C_DISABLE_CLKCHANGE);\n14             break;\n15         case CPUFREQ_POSTCHANGE:\n16             pcd = get_pcd(fbi->fb.var.pixclock, f->new);\n17             fbi->reg_lccr3 = (fbi->reg_lccr3& ~0xff) | LCCR3_PixClkDiv(pcd);\n18             set_ctrlr_state(fbi, C_ENABLE_CLKCHANGE);\n19             break;\n20     }\n21     return 0;\n22}\n")),(0,c.kt)("p",null,"\u6b64\u5916\uff0c\u5982\u679c\u5728\u7cfb\u7edf\u6302\u8d77/\u6062\u590d\u7684\u8fc7\u7a0b\u4e2dCPU\u9891\u7387\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5219CPUFreq\u5b50\u7cfb\u7edf\u4e5f\u4f1a\u53d1\u51faCPUFREQ_SUSPENDCHANGE\u548cCPUFREQ_RESUMECHANGE\u8fd9\u4e24\u4e2a\u901a\u77e5\u3002"),(0,c.kt)("p",null,"\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86CPU\u4ee5\u5916\uff0c\u4e00\u4e9b\u975eCPU\u8bbe\u5907\u4e5f\u652f\u6301\u591a\u4e2a\u64cd\u4f5c\u9891\u7387\u548c\u7535\u538b\uff0c\u5b58\u5728\u591a\u4e2aOPP\u3002Linux 3.2\u4e4b\u540e\u7684\u5185\u6838\u4e5f\u652f\u6301\u9488\u5bf9\u8fd9\u79cd\u975eCPU\u8bbe\u5907\u7684DVFS\uff0c\u8be5\u5957\u5b50\u7cfb\u7edf\u4e3aDevfreq\u3002\u4e0eCPUFreq\u5b58\u5728\u4e00\u4e2adrivers/cpufreq\u76ee\u5f55\u76f8\u4f3c\uff0c\u5728\u5185\u6838\u4e2d\u4e5f\u5b58\u5728\u4e00\u4e2adrivers/devfreq\u7684\u76ee\u5f55\u3002"))}_.isMDXComponent=!0},39014:function(e,n,r){n.Z=r.p+"assets/images/1746005269313-62ea6b6234818fa7700e6183da80bc64.png"},61824:function(e,n,r){n.Z=r.p+"assets/images/1746022386526-1ecb37d8efc34a190ea5582390a18dbd.png"},28552:function(e,n,r){n.Z=r.p+"assets/images/1746022458907-b5a4d4aa003d59cbbb7b4947729fb648.png"}}]);