"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[98634],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),p=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=p(r),d=o,m=f["".concat(i,".").concat(d)]||f[d]||s[d]||a;return r?t.createElement(m,l(l({ref:n},u),{},{components:r})):t.createElement(m,l({ref:n},u))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var p=2;p<a;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},65664:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return s}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),l=["components"],c={},i=void 0,p={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops",title:"21.6\u3000Oops",description:"\u5f53\u5185\u6838\u51fa\u73b0\u7c7b\u4f3c\u7528\u6237\u7a7a\u95f4\u7684Segmentation Fault\u65f6\uff08\u4f8b\u5982\u5185\u6838\u8bbf\u95ee\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u865a\u62df\u5730\u5740\uff09\uff0cOops\u4f1a\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u548c\u5199\u5165\u5185\u6838log\u7f13\u51b2\u533a\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"21.5\u3000\u4f7f\u7528\u201cproc\u201d",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.5\u3000\u4f7f\u7528\u201cproc\u201d"},next:{title:"21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09"}},u={},s=[],f={toc:s};function d(e){var n=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u5f53\u5185\u6838\u51fa\u73b0\u7c7b\u4f3c\u7528\u6237\u7a7a\u95f4\u7684Segmentation Fault\u65f6\uff08\u4f8b\u5982\u5185\u6838\u8bbf\u95ee\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u865a\u62df\u5730\u5740\uff09\uff0cOops\u4f1a\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u548c\u5199\u5165\u5185\u6838log\u7f13\u51b2\u533a\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u5728globalmem.c\u7684globalmem_read\uff08\uff09\u51fd\u6570\u4e2d\u52a0\u4e0a\u4e0b\u9762\u4e00\u884c\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'        } else {\n                *ppos += count;\n                ret = count;\n                *(unsigned int *)0 = 1; /* a kernel panic */\n                printk(KERN_INFO "read %u bytes(s) from %lu\\n", count, p);\n        }\n')),(0,a.kt)("p",null,"\u5047\u8bbe\u8fd9\u4e2a\u5b57\u7b26\u8bbe\u5907\u5bf9\u5e94\u7684\u8bbe\u5907\u8282\u70b9\u662f/dev/globalmem\uff0c\u901a\u8fc7cat/dev/globalmem\u547d\u4ee4\u8bfb\u8bbe\u5907\u6587\u4ef6\uff0c\u5c06\u5f97\u5230\u5982\u4e0bOops\u4fe1\u606f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# cat /dev/globalmem\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\npgd = 9ec08000\n[00000000] *pgd=7f733831, *pte=00000000, *ppte=00000000\nInternal error: Oops: 817 [#1] SMP ARM\nModules linked in: globalmem\nCPU: 0 PID: 609 Comm: cat Not tainted 3.16.0+ #13\ntask: 9f7d8000 ti: 9f722000 task.ti: 9f722000\nPC is at globalmem_read+0xbc/0xcc [globalmem]\nLR is at 0x0\npc : [<7f000200>]    lr : [<00000000>]    psr: 00000013\nsp : 9f723f30  ip : 00000000  fp : 00000000\nr10: 9f414000  r9 : 00000000  r8 : 00001000\nr7 : 00000000  r6 : 00001000  r5 : 00001000  r4 : 00000000\nr3 : 00000001  r2 : 00000000  r1 : 00001000  r0 : 7f0003cc\nFlags: nzcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user\nControl: 10c53c7d  Table: 7ec08059  DAC: 00000015\nProcess cat (pid: 609, stack limit = 0x9f722240)\nStack: (0x9f723f30 to 0x9f724000)\n3f20:                                     7ed5ff91 9f723f80 00000000 9f79ab40\n3f40: 00001000 7ed5eb18 9f723f80 00000000 00000000 800cb114 00000020 9f722000\n3f60: 9f5e4628 9f79ab40 9f79ab40 00001000 7ed5eb18 00000000 00000000 800cb2ec\n3f80: 00001000 00000000 9f7168c0 00001000 7ed5eb18 00000003 00000003 8000e4e4\n3fa0: 9f722000 8000e360 00001000 7ed5eb18 00000003 7ed5eb18 00001000 0000002f\n3fc0: 00001000 7ed5eb18 00000003 00000003 7ed5eb18 00000001 00000003 00000000\n3fe0: 0015c23c 7ed5eb00 0000f718 00008d8c 60000010 00000003 00000000 00000000\n[<7f000200>] (globalmem_read [globalmem]) from [<800cb114>] (vfs_read+0x98/0x13c)\n[<800cb114>] (vfs_read) from [<800cb2ec>] (SyS_read+0x44/0x84)\n[<800cb2ec>] (SyS_read) from [<8000e360>] (ret_fast_syscall+0x0/0x30)\nCode: e1a05008 e2a77000 e1c360f0 e3a03001 (e58c3000)\n---[ end trace 5a36d6470da50d02 ]---\nSegmentation fault\n")),(0,a.kt)("p",null,"\u4e0a\u8ff0Oops\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u201c\u539f\u56e0\u201d\uff0c\u5373\u8bbf\u95ee\u4e86NULL pointer\u3002Oops\u4e2d\u7684PC is at globalmem_read+0xbc/0xcc\u8fd9\u4e00\u884c\u4ee3\u7801\u4e5f\u6bd4\u8f83\u5173\u952e\uff0c\u7ed9\u51fa\u4e86\u201c\u4e8b\u53d1\u73b0\u573a\u201d\uff0c\u5373globalmem_read\uff08\uff09\u51fd\u6570\u504f\u79fb0xbc\u5b57\u8282\u7684\u6307\u4ee4\u5904\u3002"),(0,a.kt)("p",null,"\u901a\u8fc7\u53cd\u6c47\u7f16globalmem.o\u53ef\u4ee5\u5bfb\u627e\u5230globalmem_read\uff08\uff09\u51fd\u6570\u5f00\u5934\u4f4d\u7f6e\u504f\u79fb0xbc\u7684\u6307\u4ee4\uff0c\u53cd\u6c47\u7f16\u65b9\u6cd5\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"drivers/char/globalmem$ arm-linux-gnueabihf-objdump -d -S globalmem.o\n")),(0,a.kt)("p",null,"\u5bf9\u5e94\u7684\u53cd\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff0cglobal_read\uff08\uff09\u5f00\u59cb\u4e8e0x144\uff0c\u504f\u79fb0xbc\u7684\u4f4d\u7f6e\u4e3a0x200\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static ssize_t globalmem_read(struct file *filp, char __user * buf, size_t size,\n                 loff_t * ppos)\n{\n 144:      e92d45f0      push    {r4, r5, r6, r7, r8, sl, lr}\n 148:      e24dd00c      sub     sp, sp, #12\n    unsigned long p = *ppos;\n 14c:      e5934000      ldr     r4, [r3]\n    \u2026\n           *ppos += count;\n 1f4:      e2a77000      adc     r7, r7, #0\n 1f8:      e1c360f0      strd    r6, [r3]\n           ret = count;\n           *(unsigned int *)0 = 1; /* a kernel panic */\n 1fc:      e3a03001      mov     r3, #1\n 200:      e58c3000      str     r3, [ip]\n           printk(KERN_INFO "read %u bytes(s) from %lu\\n", count, p);\n 204:      \u2026\n    return ret;\n}\n')),(0,a.kt)("p",null,"\u201cstr r3\uff0c","[ip]","\u201d\u662f\u5f15\u8d77Oops\u7684\u6307\u4ee4\u3002\u8fd9\u91cc\u4ec5\u4ec5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5de5\u7a0b\u5b9e\u8df5\u4e2d\u7684\u201c\u4e8b\u53d1\u73b0\u573a\u201d\u5e76\u4e0d\u5168\u90a3\u4e48\u5bb9\u6613\u627e\u5230\uff0c\u4f46\u65b9\u6cd5\u90fd\u662f\u7c7b\u4f3c\u7684\u3002"))}d.isMDXComponent=!0}}]);