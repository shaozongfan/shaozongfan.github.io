"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[657],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),_=l(n),d=o,m=_["".concat(u,".").concat(d)]||_[d]||p[d]||a;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=_;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},23925:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],i={},u=void 0,l={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS",title:"19.7\u3000PM QoS",description:"Linux\u5185\u6838\u7684PM QoS\u7cfb\u7edf\u9488\u5bf9\u5185\u6838\u548c\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u5957\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u5b9a\u81ea\u8eab\u5bf9\u6027\u80fd\u7684\u671f\u671b\u3002\u4e00\u7c7b\u662f\u7cfb\u7edf\u7ea7\u7684\u9700\u6c42\uff0c\u901a\u8fc7cpudmalatency\u3001networklatency\u548cnetworkthroughput\u8fd9\u4e9b\u53c2\u6570\u6765\u8bbe\u5b9a\uff1b\u53e6\u4e00\u7c7b\u662f\u5355\u4e2a\u8bbe\u5907\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u6027\u80fd\u9700\u6c42\u53d1\u8d77per-device\u7684PM QoS\u8bf7\u6c42\u3002",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.7\u3000PM QoS.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"19.6\u3000OPP",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.6\u3000OPP"},next:{title:"19.8\u3000CPU\u70ed\u63d2\u62d4",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.8\u3000CPU\u70ed\u63d2\u62d4"}},c={},p=[],_={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Linux\u5185\u6838\u7684PM QoS\u7cfb\u7edf\u9488\u5bf9\u5185\u6838\u548c\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u5957\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u5b9a\u81ea\u8eab\u5bf9\u6027\u80fd\u7684\u671f\u671b\u3002\u4e00\u7c7b\u662f\u7cfb\u7edf\u7ea7\u7684\u9700\u6c42\uff0c\u901a\u8fc7cpu_dma_latency\u3001network_latency\u548cnetwork_throughput\u8fd9\u4e9b\u53c2\u6570\u6765\u8bbe\u5b9a\uff1b\u53e6\u4e00\u7c7b\u662f\u5355\u4e2a\u8bbe\u5907\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u6027\u80fd\u9700\u6c42\u53d1\u8d77per-device\u7684PM QoS\u8bf7\u6c42\u3002"),(0,a.kt)("p",null,"\u5728\u5185\u6838\u7a7a\u95f4\uff0c\u901a\u8fc7pm_qos_add_request\uff08\uff09\u51fd\u6570\u53ef\u4ee5\u6ce8\u518cPM QoS\u8bf7\u6c42\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"void pm_qos_add_request(struct pm_qos_request *req,\nint pm_qos_class, s32 value);\n")),(0,a.kt)("p",null,"\u901a\u8fc7pm_qos_update_request\uff08\uff09\u51fd\u6570\u53ef\u4ee5\u66f4\u65b0\u5df2\u6ce8\u518c\u7684PM QoS\u8bf7\u6c42\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"void pm_qos_update_request(struct pm_qos_request *req,\n                      s32 new_value);\nvoid pm_qos_update_request_timeout(struct pm_qos_request *req, s32 new_value,\nunsigned long timeout_us);\n")),(0,a.kt)("p",null,"\u901a\u8fc7pm_qos_remove_request\uff08\uff09\u51fd\u6570\u53ef\u4ee5\u5220\u9664\u5df2\u6ce8\u518c\u7684PM QoS\u8bf7\u6c42\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"void pm_qos_remove_request(struct pm_qos_request *req);\n")),(0,a.kt)("p",null,"\u8b6c\u5982\u5728drivers/media/platform/via-camera.c\u8fd9\u4e2a\u6444\u50cf\u5934\u9a71\u52a8\u4e2d\uff0c\u5f53\u6444\u50cf\u5934\u5f00\u542f\u540e\uff0c\u901a\u8fc7\u5982\u4e0b\u8bed\u53e5\u53ef\u4ee5\u963b\u6b62CPU\u8fdb\u5165C3\u7ea7\u522b\u7684\u6df1\u5ea6Idle\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"static int viacam_streamon(struct file *filp, void *priv, enum v4l2_buf_type t)\n{\n    \u2026\n    pm_qos_add_request(&cam->qos_request, PM_QOS_CPU_DMA_LATENCY, 50);\n    \u2026\n}\n")),(0,a.kt)("p",null,"\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728CPUIdle\u5b50\u7cfb\u7edf\u4e2d\uff0c\u4f1a\u6839\u636ePM_QOS_CPU_DMA_LATENCY\u8bf7\u6c42\u7684\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684C\u72b6\u6001\uff0c\u5982drivers/cpuidle/governors/ladder.c\u4e2d\u7684ladder_select_state\uff08\uff09\u5c31\u4f1a\u5224\u65ad\u76ee\u6807C\u72b6\u6001\u7684exit_latency\u4e0eQoS\u8981\u6c42\u7684\u5173\u7cfb\uff0c\u5982\u4ee3\u7801\u6e05\u535519.11\u6240\u793a\u3002"),(0,a.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.11\u3000CPUIdle LADDER governor\u5bf9QoS\u7684\u5224\u65ad"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," 1static int ladder_select_state(struct cpuidle_driver *drv,\n 2                          struct cpuidle_device *dev)\n 3{\n 4      \u2026\n 5      int latency_req = pm_qos_request(PM_QOS_CPU_DMA_LATENCY);\n 6\n 7      \u2026\n 8\n 9      /* consider promotion */\n10      if (last_idx < drv->state_count - 1 &&\n11         !drv->states[last_idx + 1].disabled &&\n12         !dev->states_usage[last_idx + 1].disable &&\n13         last_residency > last_state->threshold.promotion_time &&\n14         drv->states[last_idx + 1].exit_latency <= latency_req) {\n15            last_state->stats.promotion_count++;\n16            last_state->stats.demotion_count = 0;\n17            if(last_state->stats.promotion_count>=\n18             last_state->threshold.promotion_count) {\n19                  ladder_do_selection(ldev, last_idx, last_idx + 1);\n20                  return last_idx + 1;\n21            }\n22      }\n23      \u2026\n24}\n")),(0,a.kt)("p",null,"LADDER\u5728\u9009\u62e9\u662f\u5426\u8fdb\u5165\u66f4\u6df1\u5c42\u6b21\u7684C\u72b6\u6001\u65f6\uff0c\u4f1a\u6bd4\u8f83C\u72b6\u6001\u7684exit_latency\u8981\u5c0f\u4e8e\u901a\u8fc7pm_qos_request\uff08PM_QOS_CPU_DMA_LATENCY\uff09\u5f97\u5230\u7684PM QoS\u8bf7\u6c42\u7684\u5ef6\u8fdf\uff0c\u89c1\u4ee3\u7801\u6e05\u535519.11\u7684\u7b2c14\u884c\u3002"),(0,a.kt)("p",null,"\u540c\u6837\u7684\u903b\u8f91\u4e5f\u51fa\u73b0\u4e8edrivers/cpuidle/governors/menu.c\u4e2d\uff0c\u5982\u4ee3\u7801\u6e05\u535519.12\u7684\u7b2c18~19\u884c\u3002"),(0,a.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.12\u3000CPUIdle MENU governor\u5bf9QoS\u7684\u5224\u65ad"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," 1static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)\n 2{\n 3       struct menu_device *data = &__get_cpu_var(menu_devices);\n 4       int latency_req = pm_qos_request(PM_QOS_CPU_DMA_LATENCY);\n 5       \u2026\n 6       /*\n 7        * Find the idle state with the lowest power while satisfying\n 8        * our constraints.\n 9        */\n10       for (i = CPUIDLE_DRIVER_STATE_START; i < drv->state_count; i++) {\n11              struct cpuidle_state *s = &drv->states[i];\n12              struct cpuidle_state_usage *su = &dev->states_usage[i];\n13\n14              if (s->disabled || su->disable)\n15                     continue;\n16              if (s->target_residency > data->predicted_us)\n17                     continue;\n18              if ( s->exit_latency > latency_req)\n19                      continue;\n20              if (s->exit_latency * multiplier > data->predicted_us)\n21                     continue;\n22\n23              if (s->power_usage < power_usage) {\n24                     power_usage = s->power_usage;\n25                     data->last_state_idx = i;\n26                     data->exit_us = s->exit_latency;\n27              }\n28       }\n29\n30       return data->last_state_idx;\n31}\n")),(0,a.kt)("p",null,"\u8fd8\u662f\u56de\u5230drivers/media/platform/via-camera.c\u4e2d\uff0c\u5f53\u6444\u50cf\u5934\u5173\u95ed\u540e\uff0c\u5b83\u4f1a\u901a\u8fc7\u5982\u4e0b\u8bed\u53e5\u544a\u77e5\u4e0a\u8ff0\u4ee3\u7801\u5bf9PM_QOS_CPU_DMA_LATENCY\u7684\u6027\u80fd\u8981\u6c42\u53d6\u6d88\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"static int viacam_streamon(struct file *filp, void *priv, enum v4l2_buf_type t)\n{\n    \u2026\n    pm_qos_remove_request(&cam->qos_request);\n    \u2026\n}\n")),(0,a.kt)("p",null,"\u7c7b\u4f3c\u7684\u5728\u8bbe\u5907\u9a71\u52a8\u4e2d\u7533\u8bf7QoS\u7279\u6027\u7684\u4f8b\u5b50\u8fd8\u5305\u62ecdrivers/net/wireless/ipw2x00/ipw2100.c\u3001drivers/tty/serial/omap-serial.c\u3001drivers/net/ethernet/intel/e1000e/netdev.c\u7b49\u3002"),(0,a.kt)("p",null,"\u5e94\u7528\u7a0b\u5e8f\u5219\u53ef\u4ee5\u901a\u8fc7\u5411/dev/cpu_dma_latency\u548c/dev/network_latency\u8fd9\u6837\u7684\u8bbe\u5907\u8282\u70b9\u5199\u5165\u503c\u6765\u53d1\u8d77QoS\u7684\u6027\u80fd\u8bf7\u6c42\u3002"))}d.isMDXComponent=!0}}]);