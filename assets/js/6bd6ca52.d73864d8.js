"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[4963],{3905:function(e,n,t){t.d(n,{Zo:function(){return a},kt:function(){return _}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),o=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},a=function(e){var n=o(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,u=e.parentName,a=d(e,["components","mdxType","originalType","parentName"]),s=o(t),_=i,v=s["".concat(u,".").concat(_)]||s[_]||p[_]||l;return t?r.createElement(v,c(c({ref:n},a),{},{components:t})):r.createElement(v,c({ref:n},a))}));function _(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,c=new Array(l);c[0]=s;var d={};for(var u in n)hasOwnProperty.call(n,u)&&(d[u]=n[u]);d.originalType=e,d.mdxType="string"==typeof e?e:i,c[1]=d;for(var o=2;o<l;o++)c[o]=t[o];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},18573:function(e,n,t){t.r(n),t.d(n,{assets:function(){return a},contentTitle:function(){return u},default:function(){return _},frontMatter:function(){return d},metadata:function(){return o},toc:function(){return p}});var r=t(87462),i=t(63366),l=(t(67294),t(3905)),c=["components"],d={},u=void 0,o={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8",title:"19.3\u3000CPUIdle\u9a71\u52a8",description:"\u76ee\u524d\u7684ARM SoC\u5927\u591a\u652f\u6301\u51e0\u4e2a\u4e0d\u540c\u7684Idle\u7ea7\u522b\uff0cCPUIdle\u9a71\u52a8\u5b50\u7cfb\u7edf\u5b58\u5728\u7684\u76ee\u7684\u5c31\u662f\u5bf9\u8fd9\u4e9bIdle\u72b6\u6001\u8fdb\u884c\u7ba1\u7406\uff0c\u5e76\u6839\u636e\u7cfb\u7edf\u7684\u8fd0\u884c\u60c5\u51b5\u8fdb\u5165\u4e0d\u540c\u7684Idle\u7ea7\u522b\u3002\u5177\u4f53SoC\u7684\u5e95\u5c42CPUIdle\u9a71\u52a8\u5b9e\u73b0\u5219\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u4f3c\u4e8eCPUFreq\u9a71\u52a8\u9891\u7387\u8868\u7684Idle\u7ea7\u522b\u8868\uff0c\u5e76\u5b9e\u73b0\u5404\u79cd\u4e0d\u540cIdle\u72b6\u6001\u7684\u8fdb\u5165\u548c\u9000\u51fa\u6d41\u7a0b\u3002",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.3\u3000CPUIdle\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"19.2\u3000CPUFreq\u9a71\u52a8",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.2\u3000CPUFreq\u9a71\u52a8"},next:{title:"19.4\u3000PowerTop",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.4\u3000PowerTop"}},a={},p=[],s={toc:p};function _(e){var n=e.components,d=(0,i.Z)(e,c);return(0,l.kt)("wrapper",(0,r.Z)({},s,d,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u76ee\u524d\u7684ARM SoC\u5927\u591a\u652f\u6301\u51e0\u4e2a\u4e0d\u540c\u7684Idle\u7ea7\u522b\uff0cCPUIdle\u9a71\u52a8\u5b50\u7cfb\u7edf\u5b58\u5728\u7684\u76ee\u7684\u5c31\u662f\u5bf9\u8fd9\u4e9bIdle\u72b6\u6001\u8fdb\u884c\u7ba1\u7406\uff0c\u5e76\u6839\u636e\u7cfb\u7edf\u7684\u8fd0\u884c\u60c5\u51b5\u8fdb\u5165\u4e0d\u540c\u7684Idle\u7ea7\u522b\u3002\u5177\u4f53SoC\u7684\u5e95\u5c42CPUIdle\u9a71\u52a8\u5b9e\u73b0\u5219\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u4f3c\u4e8eCPUFreq\u9a71\u52a8\u9891\u7387\u8868\u7684Idle\u7ea7\u522b\u8868\uff0c\u5e76\u5b9e\u73b0\u5404\u79cd\u4e0d\u540cIdle\u72b6\u6001\u7684\u8fdb\u5165\u548c\u9000\u51fa\u6d41\u7a0b\u3002"),(0,l.kt)("p",null,"\u5bf9\u4e8eIntel\u7cfb\u5217\u7b14\u8bb0\u672c\u8ba1\u7b97\u673a\u800c\u8a00\uff0c\u652f\u6301ACPI\uff08Advanced Configuration and Power Interface\uff0c\u9ad8\u7ea7\u914d\u7f6e\u548c\u7535\u6e90\u63a5\u53e3\uff09\uff0c\u4e00\u822c\u67094\u4e2a\u4e0d\u540c\u7684C\u72b6\u6001\uff08\u5176\u4e2dC0\u4e3a\u64cd\u4f5c\u72b6\u6001\uff0cC1\u662fHalt\u72b6\u6001\uff0cC2\u662fStop-Clock\u72b6\u6001\uff0cC3\u662fSleep\u72b6\u6001\uff09\uff0c\u5982\u886819.3\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u886819.3\u30004\u4e2a\u4e0d\u540c\u7684C\u72b6\u6001"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"1746023437149",src:t(96692).Z,width:"1416",height:"255"})),(0,l.kt)("p",null,"\u800c\u5bf9\u4e8eARM\u800c\u8a00\uff0c\u5404\u4e2aSoC\u5bf9\u4e8eIdle\u7684\u5b9e\u73b0\u65b9\u6cd5\u5dee\u5f02\u6bd4\u8f83\u5927\uff0c\u6700\u7b80\u5355\u7684Idle\u7ea7\u522b\u83ab\u8fc7\u4e8e\u5c06CPU\u6838\u7f6e\u4e8eWFI\uff08\u7b49\u5f85\u4e2d\u65ad\u53d1\u751f\uff09\u72b6\u6001\uff0c\u56e0\u6b64\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u82e5SoC\u672a\u5b9e\u73b0\u81ea\u8eab\u7684\u82af\u7247\u7ea7CPUIdle\u9a71\u52a8\uff0c\u5219\u4f1a\u8fdb\u5165cpu_do_idle\uff08\uff09\uff0c\u5bf9\u4e8eARM V7\u800c\u8a00\uff0c\u5176\u5b9e\u73b0\u4f4d\u4e8earch/arm/mm/proc-v7.S\u4e2d\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ENTRY(cpu_v7_do_idle)\ndsb                                     @ WFI may enter a low-power mode\nwfi\nmov    pc, lr\nENDPROC(cpu_v7_do_idle)\n")),(0,l.kt)("p",null,"\u4e0eCPUFreq\u7c7b\u4f3c\uff0cCPUIdle\u7684\u6838\u5fc3\u5c42\u63d0\u4f9b\u4e86\u5982\u4e0bAPI\u4ee5\u7528\u4e8e\u6ce8\u518c\u4e00\u4e2acpuidle_driver\u7684\u5b9e\u4f8b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"intcpuidle_register_driver(struct cpuidle_driver *drv);\n")),(0,l.kt)("p",null,"\u5e76\u63d0\u4f9b\u4e86\u5982\u4e0bAPI\u6765\u6ce8\u518c\u4e00\u4e2acpuidle_device\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"int cpuidle_register_device(struct cpuidle_device *dev);\n")),(0,l.kt)("p",null,"CPUIdle\u9a71\u52a8\u5fc5\u987b\u9488\u5bf9\u6bcf\u4e2aCPU\u6ce8\u518c\u76f8\u5e94\u7684cpuidle_device\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u591a\u6838CPU\u800c\u8a00\uff0c\u9700\u8981\u9488\u5bf9\u6bcf\u4e2aCPU\u6ce8\u518c\u4e00\u6b21\u3002"),(0,l.kt)("p",null,"cpuidle_register_driver\uff08\uff09\u63a5\u53d71\u4e2acpuidle_driver\u7ed3\u6784\u4f53\u7684\u6307\u9488\u53c2\u6570\uff0c\u8be5\u7ed3\u6784\u4f53\u662fCPUIdle\u9a71\u52a8\u7684\u4e3b\u4f53\uff0c\u5176\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535519.4\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.4\u3000cpuidle_driver\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct cpuidle_driver {\n 2 const char            *name;\n 3 struct module         *owner;\n 4\n 5 unsigned int          power_specified:1;\n 6      /* set to 1 to use the core cpuidle time keeping (for all states). */\n 7 unsigned int          en_core_tk_irqen:1;\n 8 struct cpuidle_state   states[CPUIDLE_STATE_MAX];\n 9 int state_count;\n10 int safe_state_index;\n11};\n")),(0,l.kt)("p",null,"\u8be5\u7ed3\u6784\u4f53\u7684\u5173\u952e\u6210\u5458\u662f1\u4e2acpuidle_state\u7684\u8868\uff0c\u5176\u5b9e\u8be5\u8868\u5c31\u662f\u7528\u4e8e\u5b58\u50a8\u5404\u79cd\u4e0d\u540cIdle\u7ea7\u522b\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535519.5\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.5\u3000cpuidle_state\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct cpuidle_state {\n 2 char name[CPUIDLE_NAME_LEN];\n 3 chardesc[CPUIDLE_DESC_LEN];\n 4\n 5 unsigned int    flags;\n 6 unsigned intexit_latency; /* in US */\n 7 int power_usage; /* in mW */\n 8 unsigned inttarget_residency; /* in US */\n 9 bool          disabled; /* disabled on all CPUs */\n10\n11 int (*enter)    (struct cpuidle_device *dev,\n12     struct cpuidle_driver *drv,\n13     int index);\n14\n15 int (*enter_dead) (struct cpuidle_device *dev, int index);\n16};\n")),(0,l.kt)("p",null,"name\u548cdesc\u662f\u8be5Idle\u72b6\u6001\u7684\u540d\u79f0\u548c\u63cf\u8ff0\uff0cexit_latency\u662f\u9000\u51fa\u8be5Idle\u72b6\u6001\u9700\u8981\u7684\u5ef6\u8fdf\uff0center\uff08\uff09\u662f\u8fdb\u5165\u8be5Idle\u72b6\u6001\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002"),(0,l.kt)("p",null,"\u5ffd\u7565\u7ec6\u8282\uff0c\u4e00\u4e2a\u5177\u4f53\u7684SoC\u7684CPUIdle\u9a71\u52a8\u5b9e\u4f8b\u53ef\u89c1\u4e8earch/arm/mach-ux500/cpuidle.c\uff08\u6700\u65b0\u7684\u5185\u6838\u5df2\u7ecf\u5c06\u4ee3\u7801\u8f6c\u79fb\u5230\u4e86drivers/cpuidle/cpuidle-ux500.c\u4e2d\uff09\uff0c\u5b83\u6709\u4e24\u4e2aIdle\u7ea7\u522b\uff0c\u5373WFI\u548cApIdle\uff0c\u5176\u5177\u4f53\u5b9e\u73b0\u6846\u67b6\u5982\u4ee3\u7801\u6e05\u535519.6\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535519.6\u3000ux500CPUIdle\u9a71\u52a8\u6848\u4f8b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1staticatomic_t master = ATOMIC_INIT(0);\n 2static DEFINE_SPINLOCK(master_lock);\n 3static DEFINE_PER_CPU(struct cpuidle_device, ux500_cpuidle_device);\n 4\n 5static inline int ux500_enter_idle(struct cpuidle_device *dev,\n 6              struct cpuidle_driver *drv, int index)\n 7{\n 8 \u2026\n 9}\n10\n11staticstruct cpuidle_driver ux500_idle_driver = {\n12 .name = "ux500_idle",\n13 .owner = THIS_MODULE,\n14 .en_core_tk_irqen = 1,\n15 .states = {\n16     ARM_CPUIDLE_WFI_STATE,\n17     {\n18         .enter         = ux500_enter_idle,\n19         .exit_latency  = 70,\n20         .target_residency = 260,\n21         .flags          = CPUIDLE_FLAG_TIME_VALID,\n22         .name          = "ApIdle",\n23         .desc          = "ARM Retention",\n24     },\n25 },\n26 .safe_state_index = 0,\n27 .state_count = 2,\n28};\n29\n30/*\n31 * For each cpu, setup the broadcast timer because we will\n32 * need to migrate the timers for the states >= ApIdle.\n33 */\n34static void ux500_setup_broadcast_timer(void *arg)\n35{\n36 intcpu = smp_processor_id();\n37 clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_ON, &cpu);\n38}\n39\n40int __init ux500_idle_init(void)\n41{\n42 \u2026\n43 ret = cpuidle_register_driver(&ux500_idle_driver);\n44 \u2026\n45 for_each_online_cpu(cpu) {\n46     device = &per_cpu(ux500_cpuidle_device, cpu);\n47     device->cpu = cpu;\n48     ret = cpuidle_register_device(device);\n49     \u2026\n50 }\n51 \u2026\n52}\n53device_initcall(ux500_idle_init);\n')),(0,l.kt)("p",null,"\u4e0eCPUFreq\u7c7b\u4f3c\uff0c\u5728CPUIdle\u5b50\u7cfb\u7edf\u4e2d\u4e5f\u6709\u5bf9\u5e94\u7684governor\u6765\u6289\u62e9\u4f55\u65f6\u8fdb\u5165\u4f55\u79cdIdle\u7ea7\u522b\u7684\u7b56\u7565\uff0c\u8fd9\u4e9bgovernor\u5305\u62ecCPU_IDLE_GOV_LADDER\u3001CPU_IDLE_GOV_MENU\u3002LADDER\u5728\u8fdb\u5165\u548c\u9000\u51faIdle\u7ea7\u522b\u7684\u65f6\u5019\u662f\u6b65\u8fdb\u7684\uff0c\u5b83\u4ee5\u8fc7\u53bb\u7684Idle\u65f6\u95f4\u4f5c\u4e3a\u53c2\u8003\uff0c\u800cMENU\u603b\u662f\u6839\u636e\u9884\u671f\u7684\u7a7a\u95f2\u65f6\u95f4\u76f4\u63a5\u8fdb\u5165\u76ee\u6807Idle\u7ea7\u522b\u3002\u524d\u8005\u9002\u7528\u4e8e\u6ca1\u6709\u91c7\u7528\u52a8\u6001\u65f6\u95f4\u8282\u62cd\u7684\u7cfb\u7edf\uff08\u5373\u6ca1\u6709\u9009\u62e9NO_HZ\u7684\u7cfb\u7edf\uff09\uff0c\u4e0d\u4f9d\u8d56\u4e8eNO_HZ\u914d\u7f6e\u9009\u9879\uff0c\u800c\u540e\u8005\u4f9d\u8d56\u4e8e\u5185\u6838\u7684NO_HZ\u9009\u9879\u3002"),(0,l.kt)("p",null,"\u56fe19.3\u6f14\u793a\u4e86LADDER\u6b65\u8fdb\u4eceC0\u8fdb\u5165C3\uff0c\u800cMENU\u5219\u53ef\u80fd\u76f4\u63a5\u4eceC0\u8df3\u5165C3\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"1746024633914",src:t(64757).Z,width:"709",height:"322"})),(0,l.kt)("p",null,"\u56fe19.3\u3000LADDER\u4e0eMENU\u7684\u533a\u522b"),(0,l.kt)("p",null,"CPUIdle\u5b50\u7cfb\u7edf\u8fd8\u901a\u8fc7sys\u5411userspace\u5bfc\u51fa\u4e86\u4e00\u4e9b\u8282\u70b9\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\xb7\u4e00\u7c7b\u662f\u9488\u5bf9\u6574\u4e2a\u7cfb\u7edf\u7684/sys/devices/system/cpu/cpuidle\uff0c\u901a\u8fc7\u5176\u4e2d\u7684current_driver\u3001current_governor\u3001available_governors\u7b49\u8282\u70b9\u53ef\u4ee5\u83b7\u53d6\u6216\u8bbe\u7f6eCPUIdle\u7684\u9a71\u52a8\u4fe1\u606f\u4ee5\u53cagovernor\u3002"),(0,l.kt)("li",{parentName:"ul"},"\xb7\u4e00\u7c7b\u662f\u9488\u5bf9\u6bcf\u4e2aCPU\u7684/sys/devices/system/cpu/cpux/cpuidle\uff0c\u901a\u8fc7\u5b50\u8282\u70b9\u66b4\u9732\u5404\u4e2a\u5728\u7ebf\u7684CPU\u4e2d\u6bcf\u4e2a\u4e0d\u540cIdle\u7ea7\u522b\u7684name\u3001desc\u3001power\u3001latency\u7b49\u4fe1\u606f\u3002")),(0,l.kt)("p",null,"\u7efc\u5408\u4ee5\u4e0a\u7684\u5404\u4e2a\u8981\u7d20\uff0c\u53ef\u4ee5\u7ed9\u51faLinux CPUIdle\u5b50\u7cfb\u7edf\u7684\u603b\u4f53\u67b6\u6784\uff0c\u5982\u56fe19.4\u6240\u793a\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"1746024736502",src:t(20519).Z,width:"790",height:"831"})))}_.isMDXComponent=!0},96692:function(e,n,t){n.Z=t.p+"assets/images/1746023437149-65b24353eed89fbfb36345b132436df9.png"},64757:function(e,n,t){n.Z=t.p+"assets/images/1746024633914-0742d2776ddaabe3239de57817ebd20e.png"},20519:function(e,n,t){n.Z=t.p+"assets/images/1746024736502-718d607e8fbbe0b9353d18d6b2d28065.png"}}]);