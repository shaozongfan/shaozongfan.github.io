"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[35836],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return s}});var l=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function f(e,n){if(null==e)return{};var t,l,o=function(e,n){if(null==e)return{};var t,l,o={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=l.createContext({}),p=function(e){var n=l.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return l.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,a=e.parentName,c=f(e,["components","mdxType","originalType","parentName"]),d=p(t),s=o,b=d["".concat(a,".").concat(s)]||d[s]||u[s]||r;return t?l.createElement(b,i(i({ref:n},c),{},{components:t})):l.createElement(b,i({ref:n},c))}));function s(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var f={};for(var a in n)hasOwnProperty.call(n,a)&&(f[a]=n[a]);f.originalType=e,f.mdxType="string"==typeof e?e:o,i[1]=f;for(var p=2;p<r;p++)i[p]=t[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81985:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return f},metadata:function(){return p},toc:function(){return u}});var l=t(87462),o=t(63366),r=(t(67294),t(3905)),i=["components"],f={},a="8.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c",p={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8.md",title:"8.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c",description:"\u5728globalfifo\u7684poll\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5c06\u8bbe\u5907\u7ed3\u6784\u4f53\u4e2d\u7684rwait\u548cwwait\u7b49\u5f85\u961f\u5217\u5934\u90e8\u6dfb\u52a0\u5230\u7b49\u5f85\u5217\u8868\u4e2d\uff08\u610f\u5473\u7740\u56e0\u8c03\u7528select\u800c\u963b\u585e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u88abrwait\u548cwwait\u5524\u9192\uff09\uff0c\u7136\u540e\u901a\u8fc7\u5224\u65addev->currentlen\u662f\u5426\u7b49\u4e8e0\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u901a\u8fc7\u5224\u65addev->currentlen\u662f\u5426\u7b49\u4e8eGLOBALFIFO_SIZE\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u5199\u72b6\u6001\uff0c\u5982\u4ee3\u7801\u6e05\u53558.9\u6240\u793a\u3002",date:"2025-09-15T14:44:14.953Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:4.175,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.8\u3000strace",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.8\u3000strace"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.3\u3000\u4e2d\u65ad\u5c4f\u853d",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.3\u3000\u4e2d\u65ad\u5c4f\u853d"}},c={authorsImageUrls:[]},u=[],d={toc:u};function s(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,l.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u5728globalfifo\u7684poll\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5c06\u8bbe\u5907\u7ed3\u6784\u4f53\u4e2d\u7684r_wait\u548cw_wait\u7b49\u5f85\u961f\u5217\u5934\u90e8\u6dfb\u52a0\u5230\u7b49\u5f85\u5217\u8868\u4e2d\uff08\u610f\u5473\u7740\u56e0\u8c03\u7528select\u800c\u963b\u585e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u88abr_wait\u548cw_wait\u5524\u9192\uff09\uff0c\u7136\u540e\u901a\u8fc7\u5224\u65addev->current_len\u662f\u5426\u7b49\u4e8e0\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u901a\u8fc7\u5224\u65addev->current_len\u662f\u5426\u7b49\u4e8eGLOBALFIFO_SIZE\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u5199\u72b6\u6001\uff0c\u5982\u4ee3\u7801\u6e05\u53558.9\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.9\u3000globalfifo\u8bbe\u5907\u9a71\u52a8\u7684poll\uff08\uff09\u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1static unsigned int globalfifo_poll(struct file *filp, poll_table * wait)\n 2{\n 3  unsigned int mask = 0;\n 4  struct globalfifo_dev *dev = filp->private_data;\n 5\n 6  mutex_lock(&dev->mutex);;\n 7\n 8  poll_wait(filp, &dev->r_wait, wait);\n 9  poll_wait(filp, &dev->w_wait, wait);\n10\n11  if (dev->current_len != 0) {\n12       mask |= POLLIN | POLLRDNORM;\n13  }\n14\n15  if (dev->current_len != GLOBALFIFO_SIZE) {\n16       mask |= POLLOUT | POLLWRNORM;\n17  }\n18\n19  mutex_unlock(&dev->mutex);;\n20  return mask;\n21}\n")),(0,r.kt)("p",null,"\u6ce8\u610f\uff0c\u8981\u628aglobalfifo_poll\u8d4b\u7ed9globalfifo_fops\u7684poll\u6210\u5458\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"static const struct file_operations globalfifo_fops = {\n   ...\n   .poll = globalfifo_poll,\n   ...\n};\n")),(0,r.kt)("h1",{id:"832\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u8bbe\u5907\u7684\u8f6e\u8be2"},"8.3.2\u3000\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u8bbe\u5907\u7684\u8f6e\u8be2"),(0,r.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8fglobalfifo_poll.c\uff0c\u4ee5\u7528select\uff08\uff09\u76d1\u63a7globalfifo\u7684\u53ef\u8bfb\u5199\u72b6\u6001\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5982\u4ee3\u7801\u6e05\u53558.10\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.10\u3000\u4f7f\u7528select\u76d1\u63a7globalfifo\u662f\u5426\u53ef\u975e\u963b\u585e\u8bfb\u3001\u5199\u7684\u5e94\u7528\u7a0b\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#define FIFO_CLEAR 0x1\n 2#define BUFFER_LEN 20\n 3void main(void)\n 4{\n 5  int fd, num;\n 6  char rd_ch[BUFFER_LEN];\n 7  fd_set rfds, wfds; /* \u8bfb/\u5199\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6 */\n 8\n 9  /* \u4ee5\u975e\u963b\u585e\u65b9\u5f0f\u6253\u5f00/dev/globalfifo\u8bbe\u5907\u6587\u4ef6 */\n10  fd = open("/dev/globalfifo", O_RDONLY | O_NONBLOCK);\n11  if (fd != -1) {\n12       /* FIFO\u6e050 */\n13       if (ioctl(fd, FIFO_CLEAR, 0) < 0)\n14            printf("ioctl command failed\\n");\n15\n16       while (1) {\n17            FD_ZERO(&rfds);\n18            FD_ZERO(&wfds);\n19            FD_SET(fd, &rfds);\n20            FD_SET(fd, &wfds);\n21\n22            select(fd + 1, &rfds, &wfds, NULL, NULL);\n23            /* \u6570\u636e\u53ef\u83b7\u5f97*/\n24            if (FD_ISSET(fd, &rfds))\n25                 printf("Poll monitor:can be read\\n");\n26            /* \u6570\u636e\u53ef\u5199\u5165*/\n27            if (FD_ISSET(fd, &wfds))\n28                 printf("Poll monitor:can be written\\n");\n29       }\n30  } else {\n31       printf("Device open failure\\n");\n32  }\n33}\n')),(0,r.kt)("p",null,"\u5728\u8fd0\u884c\u65f6\u53ef\u770b\u5230\uff0c\u5f53\u6ca1\u6709\u4efb\u4f55\u8f93\u5165\uff0c\u5373FIFO\u4e3a\u7a7a\u65f6\uff0c\u7a0b\u5e8f\u4e0d\u65ad\u5730\u8f93\u51faPoll monitor\uff1acan be written\uff0c\u5f53\u901a\u8fc7echo\u5411/dev/globalfifo\u5199\u5165\u4e00\u4e9b\u6570\u636e\u540e\uff0c\u5c06\u8f93\u51faPoll monitor\uff1acan be read\u548cPoll monitor\uff1acan be written\uff0c\u5982\u679c\u4e0d\u65ad\u5730\u901a\u8fc7echo\u5411/dev/globalfifo\u5199\u5165\u6570\u636e\u76f4\u81f3\u5199\u6ee1FIFO\uff0c\u5219\u53d1\u73b0pollmonitor\u7a0b\u5e8f\u5c06\u53ea\u8f93\u51faPoll monitor\uff1acan be read\u3002\u5bf9\u4e8eglobalfifo\u800c\u8a00\uff0c\u4e0d\u4f1a\u51fa\u73b0\u65e2\u4e0d\u80fd\u8bfb\uff0c\u53c8\u4e0d\u80fd\u5199\u7684\u60c5\u51b5\u3002"),(0,r.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8fglobalfifo_epoll.c\uff0c\u4ee5\u7528epoll\u76d1\u63a7globalfifo\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5982\u4ee3\u7801\u6e05\u53558.11\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.11\u3000\u4f7f\u7528epoll\u76d1\u63a7globalfifo\u662f\u5426\u53ef\u975e\u963b\u585e\u8bfb\u7684\u5e94\u7528\u7a0b\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#define FIFO_CLEAR 0x1\n 2#define BUFFER_LEN 20\n 3void main(void)\n 4{\n 5  int fd;\n 6\n 7  fd = open("/dev/globalfifo", O_RDONLY | O_NONBLOCK);\n 8  if (fd != -1) {\n 9       struct epoll_event ev_globalfifo;\n10       int err;\n11       int epfd;\n12\n13       if (ioctl(fd, FIFO_CLEAR, 0) < 0)\n14            printf("ioctl command failed\\n");\n15\n16       epfd = epoll_create(1);\n17       if (epfd < 0) {\n18            perror("epoll_create()");\n19            return;\n20       }\n21\n22       bzero(&ev_globalfifo, sizeof(struct epoll_event));\n23       ev_globalfifo.events = EPOLLIN | EPOLLPRI;\n24\n25       err = epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &ev_globalfifo);\n26       if (err < 0) {\n27            perror("epoll_ctl()");\n28            return;\n29       }\n30       err = epoll_wait(epfd, &ev_globalfifo, 1, 15000);\n31       if (err < 0) {\n32            perror("epoll_wait()");\n33       } else if (err == 0) {\n34            printf("No data input in FIFO within 15 seconds.\\n");\n35       } else {\n36            printf("FIFO is not empty\\n");\n37       }\n38       err = epoll_ctl(epfd, EPOLL_CTL_DEL, fd, &ev_globalfifo);\n39       if (err < 0)\n40            perror("epoll_ctl()");\n41  } else {\n42       printf("Device open failure\\n");\n43  }\n44}\n')),(0,r.kt)("p",null,"\u4e0a\u8ff0\u7a0b\u5e8f\u7b2c25\u884cepoll_ctl\uff08epfd\uff0cEPOLL_CTL_ADD\uff0cfd\uff0c&ev_globalfifo\uff09\u5c06globalfifo\u5bf9\u5e94\u7684fd\u52a0\u5165\u5230\u4e86\u4fa6\u542c\u7684\u884c\u5217\uff0c\u7b2c23\u884c\u8bbe\u7f6e\u4fa6\u542c\u8bfb\u4e8b\u4ef6\uff0c\u7b2c30\u884c\u8fdb\u884c\u7b49\u5f85\uff0c\u82e515\u79d2\u5185\u6ca1\u6709\u4eba\u5199/dev/globalfifo\uff0c\u8be5\u7a0b\u5e8f\u4f1a\u6253\u5370No data input in FIFO within 15seconds\uff0c\u5426\u5219\u7a0b\u5e8f\u4f1a\u6253\u5370FIFO is not empty\u3002"))}s.isMDXComponent=!0}}]);