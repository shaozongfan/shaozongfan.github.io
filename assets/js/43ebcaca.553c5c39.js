"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[3362],{3905:function(e,n,t){t.d(n,{Zo:function(){return a},kt:function(){return m}});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var u=r.createContext({}),b=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},a=function(e){var n=b(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,u=e.parentName,a=_(e,["components","mdxType","originalType","parentName"]),l=b(t),m=s,p=l["".concat(u,".").concat(m)]||l[m]||c[m]||i;return t?r.createElement(p,o(o({ref:n},a),{},{components:t})):r.createElement(p,o({ref:n},a))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=l;var _={};for(var u in n)hasOwnProperty.call(n,u)&&(_[u]=n[u]);_.originalType=e,_.mdxType="string"==typeof e?e:s,o[1]=_;for(var b=2;b<i;b++)o[b]=t[b];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},55674:function(e,n,t){t.r(n),t.d(n,{assets:function(){return a},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return _},metadata:function(){return b},toc:function(){return c}});var r=t(87462),s=t(63366),i=(t(67294),t(3905)),o=["components"],_={},u="13.6.1\u3000\u4f7f\u7528\u8bf7\u6c42\u961f\u5217",b={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406",title:"13.6.1\u3000\u4f7f\u7528\u8bf7\u6c42\u961f\u5217",description:"\u5757\u8bbe\u5907\u9a71\u52a8\u5728\u4f7f\u7528\u8bf7\u6c42\u961f\u5217\u7684\u573a\u666f\u4e0b\uff0c\u4f1a\u7528blkinitqueue\uff08\uff09\u521d\u59cb\u5316requestqueue\uff0c\u800c\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\u3002requestqueue\u4f1a\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u6211\u4eec\u5728\u8c03\u7528blkinitqueue\uff08\uff09\u65f6\u6307\u5b9a\u7684\u8bf7\u6c42\u5904\u7406\u51fd\u6570\uff0c\u5757\u8bbe\u5907\u9a71\u52a8\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"13.5\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684ioctl\u51fd\u6570",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.5\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684ioctl\u51fd\u6570"},next:{title:"13.7.1\u3000vmem_disk\u7684\u786c\u4ef6\u539f\u7406",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8"}},a={},c=[],l={toc:c};function m(e){var n=e.components,t=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1361\u4f7f\u7528\u8bf7\u6c42\u961f\u5217"},"13.6.1\u3000\u4f7f\u7528\u8bf7\u6c42\u961f\u5217"),(0,i.kt)("p",null,"\u5757\u8bbe\u5907\u9a71\u52a8\u5728\u4f7f\u7528\u8bf7\u6c42\u961f\u5217\u7684\u573a\u666f\u4e0b\uff0c\u4f1a\u7528blk_init_queue\uff08\uff09\u521d\u59cb\u5316request_queue\uff0c\u800c\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\u3002request_queue\u4f1a\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u6211\u4eec\u5728\u8c03\u7528blk_init_queue\uff08\uff09\u65f6\u6307\u5b9a\u7684\u8bf7\u6c42\u5904\u7406\u51fd\u6570\uff0c\u5757\u8bbe\u5907\u9a71\u52a8\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"static void xxx_req(struct request_queue *q)\n")),(0,i.kt)("p",null,"\u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u7531\u9a71\u52a8\u81ea\u5df1\u8c03\u7528\uff0c\u53ea\u6709\u5f53\u5185\u6838\u8ba4\u4e3a\u662f\u65f6\u5019\u8ba9\u9a71\u52a8\u5904\u7406\u5bf9\u8bbe\u5907\u7684\u8bfb\u5199\u7b49\u64cd\u4f5c\u65f6\uff0c\u5b83\u624d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u8be5\u51fd\u6570\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u53d1\u8d77\u4e0erequest\u5bf9\u5e94\u7684\u5757\u8bbe\u5907I/O\u52a8\u4f5c\uff08\u4f46\u662f\u5177\u4f53\u7684I/O\u5de5\u4f5c\u4e0d\u4e00\u5b9a\u8981\u5728\u8be5\u51fd\u6570\u5185\u540c\u6b65\u5b8c\u6210\uff09\u3002\u4ee3\u7801\u6e05\u535513.9\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5b83\u6765\u6e90\u4e8edrivers/memstick/core/ms_block.c\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.9\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u8bf7\u6c42\u51fd\u6570\u4f8b\u7a0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' 1static void msb_submit_req(struct request_queue *q)\n 2{\n 3       struct memstick_dev *card = q->queuedata;\n 4       struct msb_data *msb = memstick_get_drvdata(card);\n 5       struct request *req = NULL;\n 6\n 7       dbg_verbose("Submit request");\n 8\n 9       if (msb->card_dead) {\n10              dbg("Refusing requests on removed card");\n11\n12              WARN_ON(!msb->io_queue_stopped);\n13\n14              while ((req = blk_fetch_request(q)) != NULL)\n15                      __blk_end_request_all(req, -ENODEV);\n16              return;\n17       }\n18\n19       if (msb->req)\n20               return;\n21\n22       if (!msb->io_queue_stopped)\n23              queue_work(msb->io_queue, &msb->io_work);\n24}\n')),(0,i.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7b2c14\u884c\u4f7f\u7528blk_fetch_request\uff08\uff09\u83b7\u5f97\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u8bf7\u6c42\uff0c\u7531\u4e8emsb->card_dead\u6210\u7acb\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u5904\u7406\u4e0d\u4e86\u8be5\u8bf7\u6c42\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u901a\u8fc7__blk_end_request_all\uff08req\uff0c-ENODEV\uff09\u8fd4\u56de\u9519\u8bef\u4e86"),(0,i.kt)("p",null,"\u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7queue_work\uff08msb->io_queue\uff0c&msb->io_work\uff09\u542f\u52a8\u5de5\u4f5c\u961f\u5217\u6267\u884cmsb_io_work\uff08struct work_struct*work\uff09\u8fd9\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u539f\u578b\u5982\u4ee3\u7801\u6e05\u535513.10\u6240\u793a\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.10\u3000msb_io_work\uff08\uff09\u5b8c\u6210\u8bf7\u6c42\u5904\u7406"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' 1static void msb_io_work(struct work_struct *work)\n 2{\n 3       struct msb_data *msb = container_of(work, struct msb_data, io_work);\n 4       int page, error, len;\n 5       sector_t lba;\n 6       unsigned long flags;\n 7       struct scatterlist *sg = msb->prealloc_sg;\n 8\n 9       dbg_verbose("IO: work started");\n10\n11       while (1) {\n12               spin_lock_irqsave(&msb->q_lock, flags);\n13\n14               if (msb->need_flush_cache) {\n15                     msb->need_flush_cache = false;\n16                     spin_unlock_irqrestore(&msb->q_lock, flags);\n17                     msb_cache_flush(msb);\n18                     continue;\n19               }\n20\n21               if (!msb->req) {\n22                     msb->req = blk_fetch_request(msb->queue);\n23                     if (!msb->req) {\n24                             dbg_verbose("IO: no more requests exiting");\n25                             spin_unlock_irqrestore(&msb->q_lock, flags);\n26                             return;\n27                     }\n28               }\n29\n30               spin_unlock_irqrestore(&msb->q_lock, flags);\n31\n32               /* If card was removed meanwhile */\n33               if (!msb->req)\n34                     return;\n35\n36               /* process the request */\n37               dbg_verbose("IO: processing new request");\n38               blk_rq_map_sg(msb->queue, msb->req, sg);\n39\n40               lba = blk_rq_pos(msb->req);\n41\n42               sector_div(lba, msb->page_size / 512);\n43               page = do_div(lba, msb->pages_in_block);\n44\n45               if (rq_data_dir(msb->req) == READ)\n46                       error = msb_do_read_request(msb, lba, page, sg,\n47                               blk_rq_bytes(msb->req), &len);\n48               else\n49                       error = msb_do_write_request(msb, lba, page, sg,\n50                               blk_rq_bytes(msb->req), &len);\n51\n52               spin_lock_irqsave(&msb->q_lock, flags);\n53\n54               if (len)\n55                       if (!__blk_end_request(msb->req, 0, len))\n56                               msb->req = NULL;\n57\n58               if (error && msb->req) {\n59                     dbg_verbose("IO: ending one sector of the request with error");\n60                     if (!__blk_end_request(msb->req, error, msb->page_size))\n61                             msb->req = NULL;\n62               }\n63\n64               if (msb->req)\n65                     dbg_verbose("IO: request still pending");\n66\n67               spin_unlock_irqrestore(&msb->q_lock, flags);\n68       }\n69}\n')),(0,i.kt)("p",null,"\u5728\u8bfb\u5199\u65e0\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c55\u884c\u8c03\u7528\u7684",(0,i.kt)("strong",{parentName:"p"},"blk_end_request\uff08msb->req\uff0c0\uff0clen\uff09\u5b9e\u9645\u4e0a\u544a\u8bc9\u4e86\u4e0a\u5c42\u8be5\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u3002\u5982\u679c\u8bfb\u5199\u6709\u9519\uff0c\u5219\u8c03\u7528"),"blk_end_request\uff08msb->req\uff0cerror\uff0cmsb->page_size\uff09\uff0c\u628a\u51fa\u9519\u539f\u56e0\u4f5c\u4e3a\u7b2c2\u4e2a\u53c2\u6570\u4f20\u5165\u4e0a\u5c42\u3002"),(0,i.kt)("p",null,"\u7b2c38\u884c\u8c03\u7528\u7684blk_rq_map_sg\uff08\uff09\u51fd\u6570\u5b9e\u73b0\u4e8eblock/blk-merge.c\u6587\u4ef6\u3002\u4ee3\u7801\u6e05\u535513.11\u5217\u51fa\u4e86\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u4e2d\u6bd4\u8f83\u7cbe\u534e\u7684\u90e8\u5206\uff0c\u5b83\u901a\u8fc7rq_for_each_bio\uff08\uff09\u3001bio_for_each_segment\uff08\uff09\u6765\u904d\u5386\u6240\u6709\u7684bio\uff0c\u4ee5\u53ca\u6240\u6709\u7684\u7247\u6bb5\uff0c\u5c06\u6240\u6709\u4e0e\u67d0\u8bf7\u6c42\u76f8\u5173\u7684\u9875\u7ec4\u6210\u4e00\u4e2ascatter/gather\u7684\u5217\u8868\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.11\u3000blk_rq_map_sg\uff08\uff09\u51fd\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1int blk_rq_map_sg(struct request_queue *q, struct request *rq,\n 2                  struct scatterlist *sglist)\n 3{\n 4      struct scatterlist *sg = NULL;\n 5      int nsegs = 0;\n 6\n 7      if (rq->bio)\n 8              nsegs = __blk_bios_map_sg(q, rq->bio, sglist, &sg);\n 9      ...\n10}\n11\n12static int __blk_bios_map_sg(struct request_queue *q, struct bio *bio,\n13                             struct scatterlist *sglist,\n14                             struct scatterlist **sg)\n15{\n16        struct bio_vec bvec, bvprv = { NULL };\n17        struct bvec_iter iter;\n18        int nsegs, cluster;\n19\n20      nsegs = 0;\n21      cluster = blk_queue_cluster(q);\n22      ...\n23      for_each_bio(bio)\n24              bio_for_each_segment(bvec, bio, iter)\n25                      __blk_segment_map_sg(q, &bvec, sglist, &bvprv, sg,\n26                                           &nsegs, &cluster);\n27\n28      return nsegs;\n29}\n30\n31static inline void\n32__blk_segment_map_sg(struct request_queue *q, struct bio_vec *bvec,\n33                     struct scatterlist *sglist, struct bio_vec *bvprv,\n34                     struct scatterlist **sg, int *nsegs, int *cluster)\n35{\n36\n37      int nbytes = bvec->bv_len;\n38\n39      if (*sg && *cluster) {\n40              if ((*sg)->length + nbytes > queue_max_segment_size(q))\n41                      goto new_segment;\n42\n43              if (!BIOVEC_PHYS_MERGEABLE(bvprv, bvec))\n44                      goto new_segment;\n45              if (!BIOVEC_SEG_BOUNDARY(q, bvprv, bvec))\n46                      goto new_segment;\n47\n48              (*sg)->length += nbytes;\n49      } else {\n50new_segment:\n51                if (!*sg)\n52                      *sg = sglist;\n53                else {\n54                      /*\n55                       * If the driver previously mapped a shorter\n56                       * list, we could see a termination bit\n57                       * prematurely unless it fully inits the sg\n58                       * table on each mapping. We KNOW that there\n59                       * must be more entries here or the driver\n60                       * would be buggy, so force clear the\n61                       * termination bit to avoid doing a full\n62                       * sg_init_table() in drivers for each command.\n63                       */\n64                      sg_unmark_end(*sg);\n65                      *sg = sg_next(*sg);\n66                }\n67\n68                sg_set_page(*sg, bvec->bv_page, nbytes, bvec->bv_offset);\n69                (*nsegs)++;\n70        }\n71        *bvprv = *bvec;\n")),(0,i.kt)("p",null,"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u82e5\u5916\u8bbe\u652f\u6301scatter/gather\u6a21\u5f0f\u7684DMA\u64cd\u4f5c\uff0c\u7d27\u63a5\u7740\uff0c\u5b83\u5c31\u4f1a\u6267\u884cpci_map_sg\uff08\uff09\u6216\u8005dma_map_sg\uff08\uff09\u6765\u8fdb\u884c\u4e0a\u8ff0scatter/gather\u5217\u8868\u7684DMA\u6620\u5c04\u4e86\uff0c\u4e4b\u540e\u8fdb\u884c\u786c\u4ef6\u7684\u8bbf\u95ee\u3002"),(0,i.kt)("h1",{id:"1362\u4e0d\u4f7f\u7528\u8bf7\u6c42\u961f\u5217"},"13.6.2\u3000\u4e0d\u4f7f\u7528\u8bf7\u6c42\u961f\u5217"),(0,i.kt)("p",null,"\u4f7f\u7528\u8bf7\u6c42\u961f\u5217\u5bf9\u4e8e\u4e00\u4e2a\u673a\u68b0\u78c1\u76d8\u8bbe\u5907\u800c\u8a00\u7684\u786e\u6709\u52a9\u4e8e\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8eRAMDISK\u3001ZRAM\uff08Compressed RAM Block Device\uff09\u7b49\u5b8c\u5168\u53ef\u771f\u6b63\u968f\u673a\u8bbf\u95ee\u7684\u8bbe\u5907\u800c\u8a00\uff0c\u65e0\u6cd5\u4ece\u9ad8\u7ea7\u7684\u8bf7\u6c42\u961f\u5217\u903b\u8f91\u4e2d\u83b7\u76ca\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u8bbe\u5907\uff0c\u5757\u5c42\u652f\u6301\u201c\u65e0\u961f\u5217\u201d\u7684\u64cd\u4f5c\u6a21\u5f0f\uff0c\u4e3a\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u9a71\u52a8\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u8bf7\u6c42\u5904\u7406\u51fd\u6570\uff0c\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"static void xxx_make_request(struct request_queue *queue, struct bio *bio);\n")),(0,i.kt)("p",null,"\u5757\u8bbe\u5907\u9a71\u52a8\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e0d\u518d\u8c03\u7528blk_init_queue\uff08\uff09\uff0c\u800c\u662f\u8c03\u7528blk_alloc_queue\uff08\uff09\u548cblk_queue_make_request\uff08\uff09\uff0cxxx_make_request\u5219\u4f1a\u6210\u4e3ablk_queue_make_request\uff08\uff09\u7684\u7b2c2\u4e2a\u53c2\u6570\u3002"),(0,i.kt)("p",null,"xxx_make_request\uff08\uff09\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ecd\u7136\u662f\u201c\u8bf7\u6c42\u961f\u5217\u201d\uff0c\u4f46\u662f\u8fd9\u4e2a\u201c\u8bf7\u6c42\u961f\u5217\u201d\u5b9e\u9645\u4e0d\u5305\u542b\u4efb\u4f55\u8bf7\u6c42\uff0c\u56e0\u4e3a\u5757\u5c42\u6ca1\u6709\u5fc5\u8981\u5c06bio\u8c03\u6574\u4e3a\u8bf7\u6c42\u3002\u56e0\u6b64\uff0c\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\u7684\u4e3b\u8981\u53c2\u6570\u662fbio\u7ed3\u6784\u4f53\u3002\u4ee3\u7801\u6e05\u535513.12\u6240\u793a\u4e3a\u4e00\u4e2a\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5b83\u53d6\u6750\u4e8edrivers/block/zram/zram_drv.c\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.12\u3000\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\u4f8b\u7a0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1static void zram_make_request(struct request_queue *queue, struct bio *bio)\n 2{\n 3        ...\n 4        __zram_make_request(zram, bio);\n 5        ...\n 6}\n 7\n 8static void __zram_make_request(struct zram *zram, struct bio *bio)\n 9{\n10        int offset;\n11        u32index;\n12        struct bio_vec bvec;\n13        struct bvec_iter iter;\n14\n15        index = bio->bi_iter.bi_sector >> SECTORS_PER_PAGE_SHIFT;\n16        offset = (bio->bi_iter.bi_sector &\n17                  (SECTORS_PER_PAGE - 1)) << SECTOR_SHIFT;\n18\n19        if (unlikely(bio->bi_rw & REQ_DISCARD)) {\n20                zram_bio_discard(zram, index, offset, bio);\n21                bio_endio(bio, 0);\n22                return;\n23        }\n24\n25        bio_for_each_segment(bvec, bio, iter) {\n26                int max_transfer_size = PAGE_SIZE - offset;\n27\n28                if (bvec.bv_len > max_transfer_size) {\n29                        /*\n30                         * zram_bvec_rw() can only make operation on a single\n31                         * zram page. Split the bio vector.\n32                         */\n33                        struct bio_vec bv;\n34\n35                        bv.bv_page = bvec.bv_page;\n36                        bv.bv_len = max_transfer_size;\n37                        bv.bv_offset = bvec.bv_offset;\n38\n39                        if (zram_bvec_rw(zram, &bv, index, offset, bio) < 0)\n40                                goto out;\n41\n42                        bv.bv_len = bvec.bv_len - max_transfer_size;\n43                        bv.bv_offset += max_transfer_size;\n44                        if (zram_bvec_rw(zram, &bv, index + 1, 0, bio) < 0)\n45                                goto out;\n46                } else\n47                        if (zram_bvec_rw(zram, &bvec, index, offset, bio) < 0)\n48                                goto out;\n49\n50                update_position(&index, &offset, &bvec);\n51        }\n52\n53        set_bit(BIO_UPTODATE, &bio->bi_flags);\n54        bio_endio(bio, 0);\n55        return;\n56\n57out:\n58        bio_io_error(bio);\n59}\n")),(0,i.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u901a\u8fc7bio_for_each_segment\uff08\uff09\u8fed\u4ee3bio\u4e2d\u7684\u6bcf\u4e2asegement\uff0c\u6700\u7ec8\u8c03\u7528zram_bvec_rw\uff08\uff09\u5b8c\u6210\u5185\u5b58\u7684\u538b\u7f29\u3001\u89e3\u538b\u3001\u8bfb\u53d6\u548c\u5199\u5165\u3002"),(0,i.kt)("p",null,"ZRAM\u662fLinux\u7684\u4e00\u79cd\u5185\u5b58\u4f18\u5316\u6280\u672f\uff0c\u5b83\u5212\u5b9a\u4e00\u7247\u5185\u5b58\u533a\u57df\u4f5c\u4e3aSWAP\u7684\u4ea4\u6362\u5206\u533a\uff0c\u4f46\u662f\u5b83\u672c\u8eab\u5177\u5907\u81ea\u52a8\u538b\u7f29\u529f\u80fd\uff0c\u4ece\u800c\u53ef\u4ee5\u8fbe\u5230\u8f85\u52a9Linux\u533f\u540d\u9875\u7684\u4ea4\u6362\u6548\u679c\uff0c\u53d8\u76f8\u201c\u589e\u5927\u201d\u4e86\u5185\u5b58\u3002"))}m.isMDXComponent=!0}}]);