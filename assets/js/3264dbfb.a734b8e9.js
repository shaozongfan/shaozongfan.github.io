"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[35777],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),_=l(t),d=s,m=_["".concat(i,".").concat(d)]||_[d]||c[d]||o;return t?r.createElement(m,p(p({ref:n},u),{},{components:t})):r.createElement(m,p({ref:n},u))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,p=new Array(o);p[0]=_;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:s,p[1]=a;for(var l=2;l<o;l++)p[l]=t[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},84445:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var r=t(87462),s=t(63366),o=(t(67294),t(3905)),p=["components"],a={},i=void 0,l={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.4\u3000SMP\u591a\u6838\u542f\u52a8\u4ee5\u53caCPU\u70ed\u63d2\u62d4\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.4\u3000SMP\u591a\u6838\u542f\u52a8\u4ee5\u53caCPU\u70ed\u63d2\u62d4\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.4\u3000SMP\u591a\u6838\u542f\u52a8\u4ee5\u53caCPU\u70ed\u63d2\u62d4\u9a71\u52a8.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.4\u3000SMP\u591a\u6838\u542f\u52a8\u4ee5\u53caCPU\u70ed\u63d2\u62d4\u9a71\u52a8",description:"\u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u5bf9\u4e8e\u591a\u6838\u7684ARM\u82af\u7247\u800c\u8a00\uff0c\u5728Bootrom\u4ee3\u7801\u4e2d\uff0c\u6bcf\u4e2aCPU\u90fd\u4f1a\u8bc6\u522b\u81ea\u8eabID\uff0c\u5982\u679cID\u662f0\uff0c\u5219\u5f15\u5bfcBootloader\u548cLinux\u5185\u6838\u6267\u884c\uff0c\u5982\u679cID\u4e0d\u662f0\uff0c\u5219Bootrom\u4e00\u822c\u5728\u4e0a\u7535\u65f6\u5c06\u81ea\u8eab\u7f6e\u4e8eWFI\u6216\u8005WFE\u72b6\u6001\uff0c\u5e76\u7b49\u5f85CPU0\u7ed9\u5176\u53d1CPU\u6838\u95f4\u4e2d\u65ad\u6216\u4e8b\u4ef6\uff08\u4e00\u822c\u901a\u8fc7SEV\u6307\u4ee4\uff09\u4ee5\u5524\u9192\u5b83\u3002\u4e00\u4e2a\u5178\u578b\u7684\u591a\u6838Linux\u542f\u52a8\u8fc7\u7a0b\u5982\u56fe20.6\u6240\u793a\u3002",date:"2025-09-15T14:44:14.193Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:9.185,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.10\u3000\u603b\u7ed3",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.10\u3000\u603b\u7ed3"},nextItem:{title:"8.2.1\u3000\u8f6e\u8be2\u7684\u6982\u5ff5\u4e0e\u4f5c\u7528",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.2\u3000\u8f6e\u8be2\u64cd\u4f5c"}},u={authorsImageUrls:[]},c=[],_={toc:c};function d(e){var n=e.components,a=(0,s.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},_,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u5bf9\u4e8e\u591a\u6838\u7684ARM\u82af\u7247\u800c\u8a00\uff0c\u5728Bootrom\u4ee3\u7801\u4e2d\uff0c\u6bcf\u4e2aCPU\u90fd\u4f1a\u8bc6\u522b\u81ea\u8eabID\uff0c\u5982\u679cID\u662f0\uff0c\u5219\u5f15\u5bfcBootloader\u548cLinux\u5185\u6838\u6267\u884c\uff0c\u5982\u679cID\u4e0d\u662f0\uff0c\u5219Bootrom\u4e00\u822c\u5728\u4e0a\u7535\u65f6\u5c06\u81ea\u8eab\u7f6e\u4e8eWFI\u6216\u8005WFE\u72b6\u6001\uff0c\u5e76\u7b49\u5f85CPU0\u7ed9\u5176\u53d1CPU\u6838\u95f4\u4e2d\u65ad\u6216\u4e8b\u4ef6\uff08\u4e00\u822c\u901a\u8fc7SEV\u6307\u4ee4\uff09\u4ee5\u5524\u9192\u5b83\u3002\u4e00\u4e2a\u5178\u578b\u7684\u591a\u6838Linux\u542f\u52a8\u8fc7\u7a0b\u5982\u56fe20.6\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u88abCPU0\u5524\u9192\u7684CPUn\u53ef\u4ee5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u70ed\u63d2\u62d4\uff0c\u8b6c\u5982\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u5373\u53ef\u5378\u8f7dCPU1\uff0c\u5e76\u4e14\u5c06CPU1\u4e0a\u7684\u4efb\u52a1\u5168\u90e8\u8fc1\u79fb\u5230\u5176\u4ed6CPU\u4e2d\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# echo 0 > /sys/devices/system/cpu/cpu1/online\n")),(0,o.kt)("p",null,"\u540c\u7406\uff0c\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u518d\u6b21\u542f\u52a8CPU1\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# echo 1 > /sys/devices/system/cpu/cpu1/online\n")),(0,o.kt)("p",null,"\u4e4b\u540eCPU1\u4f1a\u4e3b\u52a8\u53c2\u4e0e\u7cfb\u7edf\u4e2d\u5404\u4e2aCPU\u4e4b\u95f4\u8981\u8fd0\u884c\u4efb\u52a1\u7684\u8d1f\u8f7d\u5747\u8861\u5de5\u4f5c\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1747234215141",src:t(77960).Z,width:"976",height:"847"})),(0,o.kt)("p",null,"\u56fe20.6\u3000\u4e00\u4e2a\u5178\u578b\u7684\u591a\u6838Linux\u542f\u52a8\u8fc7\u7a0b"),(0,o.kt)("p",null,"CPU0\u5524\u9192\u5176\u4ed6CPU\u7684\u52a8\u4f5c\u5728\u5185\u6838\u4e2d\u88ab\u5c01\u88c5\u4e3a\u4e00\u4e2asmp_operations\u7684\u7ed3\u6784\u4f53\uff0c\u5bf9\u4e8eARM\u800c\u8a00\uff0c\u5b83\u5b9a\u4e49\u4e8earch/arm/include/asm/smp.h\u4e2d\u3002\u8be5\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\u5982\u4ee3\u7801\u6e05\u535520.8\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.8\u3000smp_operations\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct smp_operations {\n 2#ifdef CONFIG_SMP\n 3        /*\n 4         * Setup the set of possible CPUs (via set_cpu_possible)\n 5         */\n 6        void (*smp_init_cpus)(void);\n 7        /*\n 8         * Initialize cpu_possible map, and enable coherency\n 9         */\n10        void (*smp_prepare_cpus)(unsigned int max_cpus);\n11\n12        /*\n13         * Perform platform specific initialisation of the specified CPU.\n14         */\n15        void (*smp_secondary_init)(unsigned int cpu);\n16        /*\n17         * Boot a secondary CPU, and assign it the specified idle task.\n18         * This also gives us the initial stack to use for this CPU.\n19         */\n20        int  (*smp_boot_secondary)(unsigned int cpu, struct task_struct *idle);\n21#ifdef CONFIG_HOTPLUG_CPU\n22        int  (*cpu_kill)(unsigned int cpu);\n23        void (*cpu_die)(unsigned int cpu);\n24        int  (*cpu_disable)(unsigned int cpu);\n25#endif\n26#endif\n27};\n")),(0,o.kt)("p",null,"\u6211\u4eec\u4ecearch/arm/mach-vexpress/v2m.c\u4e2d\u770b\u5230VEXPRESS\u7535\u8def\u677f\u7528\u5230\u7684smp_ops\uff08\uff09\u4e3avexpress_smp_ops\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'DT_MACHINE_START(VEXPRESS_DT, "ARM-Versatile Express")\n        .dt_compat      = v2m_dt_match,\n        .smp            = smp_ops(vexpress_smp_ops),\n        .map_io         = v2m_dt_map_io,\n        \u2026\nMACHINE_END\n')),(0,o.kt)("p",null,"\u901a\u8fc7arch/arm/mach-vexpress/platsmp.c\u7684\u5b9e\u73b0\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0csmp_operations\u7684\u6210\u5458\u51fd\u6570smp_init_cpus\uff08\uff09\uff0c\u5373vexpress_smp_init_cpus\uff08\uff09\u8c03\u7528\u7684ct_ca9x4_init_cpu_map\uff08\uff09\u4f1a\u63a2\u6d4bSoC\u5185CPU\u6838\u7684\u4e2a\u6570\uff0c\u5e76\u901a\u8fc7set_cpu_possible\uff08\uff09\u8bbe\u7f6e\u8fd9\u4e9bCPU\u53ef\u89c1\u3002"),(0,o.kt)("p",null,"\u800csmp_operations\u7684\u6210\u5458\u51fd\u6570smp_prepare_cpus\uff08\uff09\uff0c\u5373vexpress_smp_prepare_cpus\uff08\uff09\u5219\u4f1a\u901a\u8fc7v2m_flags_set\uff08virt_to_phys\uff08versatile_secondary_startup\uff09\uff09\u8bbe\u7f6e\u5176\u4ed6CPU\u7684\u542f\u52a8\u5730\u5740\u4e3aversatile_secondary_startup\uff0c\u5982\u4ee3\u7801\u6e05\u535520.9\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.9\u3000\u5728smp_prepare_cpus\uff08\uff09\u4e2d\u8bbe\u7f6eCPU1...n\u7684\u542f\u52a8\u5730\u5740"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static void __init vexpress_smp_prepare_cpus(unsigned int max_cpus)\n 2{\n 3        \u2026\n 4\n 5        /*\n 6         * Write the address of secondary startup into the\n 7         * system-wide flags register. The boot monitor waits\n 8         * until it receives a soft interrupt, and then the\n 9         * secondary CPU branches to this address.\n10         */\n11        v2m_flags_set(virt_to_phys(versatile_secondary_startup));\n12}\n")),(0,o.kt)("p",null,"\u6ce8\u610f\u8fd9\u90e8\u5206\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u662f\u4e0eSoC\u76f8\u5173\u7684\uff0c\u7531\u82af\u7247\u7684\u8bbe\u8ba1\u4ee5\u53ca\u82af\u7247\u5185\u90e8\u7684Bootrom\u51b3\u5b9a\u3002\u5bf9\u4e8eVEXPRESS\u6765\u8bb2\uff0c\u8bbe\u7f6e\u65b9\u6cd5\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void __init v2m_flags_set(u32 data)\n{\n        writel(~0, v2m_sysreg_base + V2M_SYS_FLAGSCLR);\n        writel(data, v2m_sysreg_base + V2M_SYS_FLAGSSET);\n}\n")),(0,o.kt)("p",null,"\u5373\u586b\u5145v2m_sysreg_base+V2M_SYS_FLAGSCLR\u6807\u8bb0\u6e05\u9664\u5bc4\u5b58\u5668\u4e3a0xFFFFFFFF\uff0c\u5c06CPU1...n\u521d\u59cb\u542f\u52a8\u6267\u884c\u7684\u6307\u4ee4\u5730\u5740\u586b\u5165v2m_sysreg_base+V2M_SYS_FLAGSSET\u5bc4\u5b58\u5668\u3002\u8fd9\u4e24\u4e2a\u5730\u5740\u7531\u82af\u7247\u5b9e\u73b0\u65f6\u5185\u90e8\u7684Bootrom\u7a0b\u5e8f\u8bbe\u5b9a\u7684\u3002\u586b\u5165CPU1...n\u7684\u8d77\u59cb\u5730\u5740\u90fd\u901a\u8fc7virt_to_phys\uff08\uff09\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u56e0\u4e3a\u6b64\u65f6CPU1...n\u7684MMU\u5c1a\u672a\u5f00\u542f\u3002"),(0,o.kt)("p",null,"\u6bd4\u8f83\u5173\u952e\u7684\u662fsmp_operations\u7684\u6210\u5458\u51fd\u6570smp_boot_secondary\uff08\uff09\uff0c\u5bf9\u4e8e\u672c\u4f8b\u800c\u8a00\u4e3aversatile_boot_secondary\uff08\uff09\uff0c\u5b83\u5b8c\u6210CPU\u7684\u6700\u7ec8\u5524\u9192\u5de5\u4f5c\uff0c\u5982\u4ee3\u7801\u6e05\u535520.10\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.10\u3000CPU0\u901a\u8fc7\u4e2d\u65ad\u5524\u9192\u5176\u4ed6CPU"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static void write_pen_release(int val)\n 2{\n 3pen_release = val;\n 4smp_wmb();\n 5sync_cache_w(&pen_release);\n 6}\n 7\n 8int versatile_boot_secondary(unsigned int cpu, struct task_struct *idle)\n 9{\n10unsigned long timeout;\n11...\n12/*\n13 * This is really belt and braces; we hold unintended secondary\n14 * CPUs in the holding pen until we\u2019re ready for them.  However,\n15 * since we haven\u2019t sent them a soft interrupt, they shouldn\u2019t\n16 * be there.\n17 */\n18write_pen_release(cpu_logical_map(cpu));\n19\n20/*\n21 * Send the secondary CPU a soft interrupt, thereby causing\n22 * the boot monitor to read the system wide flags register,\n23 * and branch to the address found there.\n24 */\n25arch_send_wakeup_ipi_mask(cpumask_of(cpu));\n26\n27timeout = jiffies + (1 * HZ);\n28while (time_before(jiffies, timeout)) {\n29        smp_rmb();\n30        if (pen_release == -1)\n31               break;\n32\n33        udelay(10);\n34}\n35...\n36return pen_release != -1   -ENOSYS : 0;\n37}\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7b2c18\u884c\u8c03\u7528\u7684write_pen_release\uff08\uff09\u4f1a\u5c06pen_release\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u8981\u5524\u9192\u7684CPU\u6838\u7684CPU\u53f7cpu_logical_map\uff08cpu\uff09\uff0c\u800c\u540e\u901a\u8fc7arch_send_wakeup_ipi_mask\uff08\uff09\u7ed9\u8981\u5524\u9192\u7684CPU\u53d1IPI\u4e2d\u65ad\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u88ab\u5524\u9192\u7684CPU\u4f1a\u9000\u51faWFI\u72b6\u6001\u5e76\u4ece\u524d\u9762smp_operations\u4e2d\u7684smp_prepare_cpus\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u5373vexpress_smp_prepare_cpus\uff08\uff09\u91cc\u901a\u8fc7v2m_flags_set\uff08\uff09\u8bbe\u7f6e\u7684\u8d77\u59cb\u5730\u5740versatile_secondary_startup\u5f00\u59cb\u6267\u884c\uff0c\u5982\u679c\u987a\u5229\u7684\u8bdd\uff0c\u8be5CPU\u4f1a\u5c06\u539f\u5148\u4e3a\u6b63\u6570\u7684pen_release\u5199\u4e3a-1\uff0c\u4ee5\u4fbfCPU0\u4ece\u7b49\u5f85pen_release\u6210\u4e3a-1\u7684\u5faa\u73af\uff08\u89c1\u7b2c28~34\u884c\uff09\u4e2d\u8df3\u51fa\u3002"),(0,o.kt)("p",null,"versatile_secondary_startup\u5b9e\u73b0\u4e8earch/arm/plat-versatile/headsmp.S\u4e2d\uff0c\u662f\u4e00\u6bb5\u6c47\u7f16\uff0c\u5982\u4ee3\u7801\u6e05\u535520.11\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.11\u3000\u88ab\u5524\u9192CPU\u7684\u6267\u884c\u5165\u53e3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1ENTRY(versatile_secondary_startup)\n 2        mrc     p15, 0, r0, c0, c0, 5\n 3        and     r0, r0, #15\n 4        adr     r4, 1f\n 5        ldmia   r4, {r5, r6}\n 6        sub     r4, r4, r5\n 7        add     r6, r6, r4\n 8pen:    ldr     r7, [r6]\n 9        cmp     r7, r0\n10        bne     pen\n11\n12        /*\n13         * we\u2019ve been released from the holding pen: secondary_stack\n14         * should now contain the SVC stack for this core\n15         */\n16        b       secondary_startup\n17\n18        .align\n191:      .long   .\n20        .long   pen_release\n21ENDPROC(versatile_secondary_startup)\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7b2c8~10\u884c\u7684\u5faa\u73af\u662f\u7b49\u5f85pen_release\u53d8\u91cf\u6210\u4e3aCPU0\u8bbe\u7f6e\u7684cpu_logical_map\uff08cpu\uff09\uff0c\u4e00\u822c\u76f4\u63a5\u5c31\u6210\u7acb\u4e86\u3002\u7b2c16\u884c\u5219\u8c03\u7528\u5185\u6838\u901a\u7528\u7684secondary_startup\uff08\uff09\u51fd\u6570\uff0c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u521d\u59cb\u5316\uff08\u5982MMU\u7b49\uff09\uff0c\u6700\u7ec8\u65b0\u7684\u88ab\u5524\u9192\u7684CPU\u5c06\u8c03\u7528smp_operations\u7684smp_secondary_init\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u5bf9\u4e8e\u672c\u4f8b\u4e3aversatile_secondary_init\uff08\uff09\uff0c\u5982\u4ee3\u7801\u6e05\u535520.12\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.12\u3000\u88ab\u5524\u9192\u7684CPU\u6062\u590dpen_release\uff08\uff09"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1void versatile_secondary_init(unsigned int cpu)\n 2{\n 3        /*\n 4         * let the primary processor know we\u2019re out of the\n 5         * pen, then head off into the C entry point\n 6         */\n 7        write_pen_release(-1);\n 8\n 9        /*\n10         * Synchronise with the boot thread.\n11         */\n12        spin_lock(&boot_lock);\n13        spin_unlock(&boot_lock);\n14}\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7b2c7\u884c\u4f1a\u5c06pen_release\u5199\u4e3a-1\uff0c\u4e8e\u662fCPU0\u8fd8\u5728\u6267\u884c\u7684\u4ee3\u7801\u6e05\u535520.10\u91ccversatile_boot_secondary\uff08\uff09\u51fd\u6570\u4e2d\u7684\u5982\u4e0b\u5faa\u73af\u5c31\u9000\u51fa\u4e86\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"while (time_before(jiffies, timeout)) {\n        smp_rmb();\n        if (pen_release == -1)\n                break;\n        udelay(10);\n}\n")),(0,o.kt)("p",null,"\u8fd9\u6837CPU0\u5c31\u77e5\u9053\u76ee\u6807CPU\u5df2\u7ecf\u88ab\u6b63\u786e\u5730\u5524\u9192\uff0c\u6b64\u540eCPU0\u548c\u65b0\u5524\u9192\u7684\u5176\u4ed6CPU\u5404\u81ea\u8fd0\u884c\u3002\u6574\u4e2a\u7cfb\u7edf\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u8fdb\u884c\u5b9e\u65f6\u8fdb\u7a0b\u548c\u6b63\u5e38\u8fdb\u7a0b\u7684\u52a8\u6001\u8d1f\u8f7d\u5747\u8861\u3002"),(0,o.kt)("p",null,"\u56fe20.7\u603b\u7ed3\u6027\u5730\u63cf\u8ff0\u4e86\u524d\u6587\u63d0\u5230\u7684vexpress_smp_prepare_cpus\uff08\uff09\u3001versatile_boot_secondary\uff08\uff09\u3001write_pen_release\uff08\uff09\u3001versatile_secondary_startup\uff08\uff09\u3001versatile_secondary_init\uff08\uff09\u8fd9\u4e9b\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1747234563927",src:t(55575).Z,width:"1120",height:"1026"})),(0,o.kt)("p",null,"\u56fe20.7\u3000CPU0\u5524\u9192\u5176\u4ed6CPU\u8fc7\u7a0b"),(0,o.kt)("p",null,"CPU\u70ed\u63d2\u62d4\u7684\u5b9e\u73b0\u4e5f\u662f\u4e0e\u82af\u7247\u76f8\u5173\u7684\uff0c\u5bf9\u4e8eVEXPRESS\u800c\u8a00\uff0c\u5b9e\u73b0\u4e86smp_operations\u7684cpu_die\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u5373vexpress_cpu_die\uff08\uff09\u3002\u5b83\u4f1a\u5728\u8fdb\u884cCPUn\u7684\u62d4\u9664\u64cd\u4f5c\u65f6\u5c06CPUn\u6295\u5165\u4f4e\u529f\u8017\u7684WFI\u72b6\u6001\uff0c\u76f8\u5173\u4ee3\u7801\u4f4d\u4e8earch/arm/mach-vexpress/hotplug.c\u4e2d\uff0c\u5982\u4ee3\u7801\u6e05\u535520.13\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.13\u3000smp_operations\u7684cpu_die\uff08\uff09\u6210\u5458\u51fd\u6570\u6848\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1void __ref vexpress_cpu_die(unsigned int cpu)\n 2{\n 3        int spurious = 0;\n 4\n 5        /*\n 6         * we\u2019re ready for shutdown now, so do it\n 7         */\n 8        cpu_enter_lowpower();\n 9        platform_do_lowpower(cpu, &spurious);\n10\n11        /*\n12         * bring this CPU back into the world of cache\n13         * coherency, and then restore interrupts\n14         */\n15        cpu_leave_lowpower();\n16\n17        if (spurious)\n18                pr_warn("CPU%u: %u spurious wakeup calls\\n", cpu, spurious);\n19}\n20static inline void platform_do_lowpower(unsigned int cpu, int *spurious)\n21{\n22        /*\n23         * there is no power-control hardware on this platform, so all\n24         * we can do is put the core into WFI; this is safe as the calling\n25         * code will have already disabled interrupts\n26         */\n27        for (;;) {\n28                wfi();\n29\n30                if (pen_release == cpu_logical_map(cpu)) {\n31                        /*\n32                         * OK, proper wakeup, we\'re done\n33                         */\n34                        break;\n35                }\n36\n37                /*\n38                 * Getting here, means that we have come out of WFI without\n39                 * having been woken up - this shouldn\u2019t happen\n40                 *\n41                 * Just note it happening - when we\u2019re woken, we can report\n42                 * its occurrence.\n43                 */\n44                (*spurious)++;\n45        }\n46}\n')),(0,o.kt)("p",null,"CPUn\u7761\u7720\u4e8ewfi\uff08\uff09\uff0c\u4e4b\u540e\u518d\u6b21\u5728\u7ebf\u7684\u65f6\u5019\uff0c\u53c8\u4f1a\u56e0\u4e3aCPU0\u7ed9\u5b83\u53d1\u51fa\u7684IPI\u800c\u4ecewfi\uff08\uff09\u51fd\u6570\u8fd4\u56de\u7ee7\u7eed\u6267\u884c\uff0c\u9192\u6765\u65f6CPUn\u4e5f\u5224\u65ad\u201cpen_release==cpu_logical_map\uff08cpu\uff09\u201d\u662f\u5426\u6210\u7acb\uff0c\u4ee5\u786e\u5b9a\u8be5\u6b21\u9192\u6765\u786e\u5b9e\u662f\u7531CPU0\u5524\u9192\u7684\u4e00\u6b21\u6b63\u5e38\u9192\u6765\u3002"))}d.isMDXComponent=!0},77960:function(e,n,t){n.Z=t.p+"assets/images/1747234215141-2523e04756487f4848dc15e1a615288a.png"},55575:function(e,n,t){n.Z=t.p+"assets/images/1747234563927-5b5bc24d7f64913424af01a246cbc8a6.png"}}]);