"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[301],{3905:function(n,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var t=r(67294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function c(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function d(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},c=Object.keys(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var l=t.createContext({}),s=function(n){var e=t.useContext(l),r=e;return n&&(r="function"==typeof n?n(e):d(d({},e),n)),r},u=function(n){var e=s(n.components);return t.createElement(l.Provider,{value:e},n.children)},o={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,c=n.originalType,l=n.parentName,u=a(n,["components","mdxType","originalType","parentName"]),p=s(r),f=i,_=p["".concat(l,".").concat(f)]||p[f]||o[f]||c;return r?t.createElement(_,d(d({ref:e},u),{},{components:r})):t.createElement(_,d({ref:e},u))}));function f(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var c=r.length,d=new Array(c);d[0]=p;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a.mdxType="string"==typeof n?n:i,d[1]=a;for(var s=2;s<c;s++)d[s]=r[s];return t.createElement.apply(null,d)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},61651:function(n,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return o}});var t=r(87462),i=r(63366),c=(r(67294),r(3905)),d=["components"],a={},l=void 0,s={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8",title:"15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8",description:"I2 C\u8bbe\u5907\u9a71\u52a8\u8981\u4f7f\u7528i2cdriver\u548ci2cclient\u6570\u636e\u7ed3\u6784\u5e76\u586b\u5145i2cdriver\u4e2d\u7684\u6210\u5458\u51fd\u6570\u3002i2cclient\u4e00\u822c\u88ab\u5305\u542b\u5728\u8bbe\u5907\u7684\u79c1\u6709\u4fe1\u606f\u7ed3\u6784\u4f53yyydata\u4e2d\uff0c\u800ci2cdriver\u5219\u9002\u5408\u88ab\u5b9a\u4e49\u4e3a\u5168\u5c40\u53d8\u91cf\u5e76\u521d\u59cb\u5316\uff0c\u4ee3\u7801\u6e05\u535515.12\u6240\u793a\u4e3a\u5df2\u88ab\u521d\u59cb\u5316\u7684i2c_driver\u3002",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.4\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"15.3.1\u3000I2 C\u9002\u914d\u5668\u9a71\u52a8\u7684\u6ce8\u518c\u4e0e\u6ce8\u9500",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.3\u3000Linux I2 C\u9002\u914d\u5668\u9a71\u52a8"},next:{title:"15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b"}},u={},o=[],p={toc:o};function f(n){var e=n.components,a=(0,i.Z)(n,d);return(0,c.kt)("wrapper",(0,t.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"I2 C\u8bbe\u5907\u9a71\u52a8\u8981\u4f7f\u7528i2c_driver\u548ci2c_client\u6570\u636e\u7ed3\u6784\u5e76\u586b\u5145i2c_driver\u4e2d\u7684\u6210\u5458\u51fd\u6570\u3002i2c_client\u4e00\u822c\u88ab\u5305\u542b\u5728\u8bbe\u5907\u7684\u79c1\u6709\u4fe1\u606f\u7ed3\u6784\u4f53yyy_data\u4e2d\uff0c\u800ci2c_driver\u5219\u9002\u5408\u88ab\u5b9a\u4e49\u4e3a\u5168\u5c40\u53d8\u91cf\u5e76\u521d\u59cb\u5316\uff0c\u4ee3\u7801\u6e05\u535515.12\u6240\u793a\u4e3a\u5df2\u88ab\u521d\u59cb\u5316\u7684i2c_driver\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.12\u3000\u88ab\u521d\u59cb\u5316\u7684i2c_driver"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'1static struct i2c_driver yyy_driver = {\n2   .driver = {\n3     .name = "yyy",\n4   } ,\n5   .probe            = yyy_probe,\n6   .remove           = yyy_remove,\n7   .id_table         = yyy_id,\n8};\n')),(0,c.kt)("h1",{id:"1541linux-i2-c\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d"},"15.4.1\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d"),(0,c.kt)("p",null,"I2 C\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u51fd\u6570\u901a\u8fc7I2 C\u6838\u5fc3\u7684i2c_add_driver\uff08\uff09API\u51fd\u6570\u6dfb\u52a0i2c_driver\u7684\u5de5\u4f5c\uff0c\u800c\u6a21\u5757\u5378\u8f7d\u51fd\u6570\u9700\u8981\u505a\u76f8\u53cd\u7684\u5de5\u4f5c\uff1a\u901a\u8fc7I2 C\u6838\u5fc3\u7684i2c_del_driver\uff08\uff09\u51fd\u6570\u5220\u9664i2c_driver\u3002\u4ee3\u7801\u6e05\u535515.13\u6240\u793a\u4e3aI2 C\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d\u51fd\u6570\u6a21\u677f\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.13\u3000I2 C\u5916\u8bbe\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d\u51fd\u6570\u6a21\u677f"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1static int __init yyy_init(void)\n 2{\n 3          return i2c_add_driver(&yyy_driver);\n 4}\n 5module_initcall(yyy_init);\n 6\n 7static void __exit yyy_exit(void)\n 8{\n 9          i2c_del_driver(&yyy_driver);\n10}\n11module_exit(yyy_exit);\n")),(0,c.kt)("h1",{id:"1542linux-i2-c\u8bbe\u5907\u9a71\u52a8\u7684\u6570\u636e\u4f20\u8f93"},"15.4.2\u3000Linux I2 C\u8bbe\u5907\u9a71\u52a8\u7684\u6570\u636e\u4f20\u8f93"),(0,c.kt)("p",null,"\u5728I2 C\u8bbe\u5907\u4e0a\u8bfb\u5199\u6570\u636e\u7684\u65f6\u5e8f\u4e14\u6570\u636e\u901a\u5e38\u901a\u8fc7i2c_msg\u6570\u7ec4\u8fdb\u884c\u7ec4\u7ec7\uff0c\u6700\u540e\u901a\u8fc7i2c_transfer\uff08\uff09\u51fd\u6570\u5b8c\u6210\uff0c\u4ee3\u7801\u6e05\u535515.14\u6240\u793a\u4e3a\u4e00\u4e2a\u8bfb\u53d6\u6307\u5b9a\u504f\u79fboffs\u7684\u5bc4\u5b58\u5668\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.14\u3000I2 C\u8bbe\u5907\u9a71\u52a8\u7684\u6570\u636e\u4f20\u8f93\u8303\u4f8b"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_msg msg[2];\n 2   /* \u7b2c\u4e00\u6761\u6d88\u606f\u662f\u5199\u6d88\u606f*/\n 3   msg[0].addr = client->addr;\n 4   msg[0].flags = 0;\n 5   msg[0].len = 1;\n 6   msg[0].buf = &offs;\n 7   /* \u7b2c\u4e8c\u6761\u6d88\u606f\u662f\u8bfb\u6d88\u606f*/\n 8   msg[1].addr = client->addr;\n 9   msg[1].flags = I2C_M_RD;\n10   msg[1].len = sizeof(buf);\n11   msg[1].buf = &buf[0];\n12\n13   i2c_transfer(client->adapter, msg, 2);\n")),(0,c.kt)("h1",{id:"1543linux\u7684i2c-devc\u6587\u4ef6\u5206\u6790"},"15.4.3\u3000Linux\u7684i2c-dev.c\u6587\u4ef6\u5206\u6790"),(0,c.kt)("p",null,"i2c-dev.c\u6587\u4ef6\u5b8c\u5168\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u4e2aI2 C\u8bbe\u5907\u9a71\u52a8\uff0c\u4e0d\u8fc7\uff0c\u5b83\u5b9e\u73b0\u7684i2c_client\u662f\u865a\u62df\u3001\u4e34\u65f6\u7684\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u4fbf\u4e8e\u4ece\u7528\u6237\u7a7a\u95f4\u64cd\u4f5cI2 C\u5916\u8bbe\u3002i2c-dev.c\u9488\u5bf9\u6bcf\u4e2aI2 C\u9002\u914d\u5668\u751f\u6210\u4e00\u4e2a\u4e3b\u8bbe\u5907\u53f7\u4e3a89\u7684\u8bbe\u5907\u6587\u4ef6\uff0c\u5b9e\u73b0\u4e86i2c_driver\u7684\u6210\u5458\u51fd\u6570\u4ee5\u53ca\u6587\u4ef6\u64cd\u4f5c\u63a5\u53e3\uff0c\u56e0\u6b64i2c-dev.c\u7684\u4e3b\u4f53\u662f\u201ci2c_driver\u6210\u5458\u51fd\u6570+\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u201d\u3002"),(0,c.kt)("p",null,"i2c-dev.c\u63d0\u4f9b\u7684i2cdev_read\uff08\uff09\u3001i2cdev_write\uff08\uff09\u51fd\u6570\u5bf9\u5e94\u4e8e\u7528\u6237\u7a7a\u95f4\u8981\u4f7f\u7528\u7684read\uff08\uff09\u548cwrite\uff08\uff09\u6587\u4ef6\u64cd\u4f5c\u63a5\u53e3\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u5206\u522b\u8c03\u7528I2 C\u6838\u5fc3\u7684i2c_master_recv\uff08\uff09\u548ci2c_master_send\uff08\uff09\u51fd\u6570\u6765\u6784\u9020\u4e00\u6761I2 C\u6d88\u606f\u5e76\u5f15\u53d1\u9002\u914d\u5668Algorithm\u901a\u4fe1\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4ee5\u5b8c\u6210\u6d88\u606f\u7684\u4f20\u8f93\uff0c\u5b83\u4eec\u5bf9\u5e94\u4e8e\u5982\u56fe15.4\u6240\u793a\u7684\u65f6\u5e8f\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1745070766336",src:r(30992).Z,width:"1038",height:"84"})),(0,c.kt)("p",null,"\u56fe15.4\u3000i2cdev_read\uff08\uff09\u548ci2cdev_write\uff08\uff09\u51fd\u6570\u5bf9\u5e94\u7684\u65f6\u5e8f"),(0,c.kt)("p",null,"\u4f46\u662f\uff0c\u5f88\u9057\u61be\uff0c\u5927\u591a\u6570\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684I2 C\u8bbe\u5907\u7684\u8bfb\u5199\u6d41\u7a0b\u5e76\u4e0d\u5bf9\u5e94\u4e8e\u4e00\u6761\u6d88\u606f\uff0c\u5f80\u5f80\u9700\u8981\u4e24\u6761\u751a\u81f3\u591a\u6761\u6d88\u606f\u6765\u8fdb\u884c\u4e00\u6b21\u8bfb\u5199\u5468\u671f\uff08\u5373\u5982\u56fe15.5\u6240\u793a\u7684\u91cd\u590d\u5f00\u59cb\u4f4d\u7684RepStart\u6a21\u5f0f\uff09\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u5e94\u7528\u5c42\u4ecd\u7136\u8c03\u7528read\uff08\uff09\u3001write\uff08\uff09\u6587\u4ef6API\u6765\u8bfb\u5199I2 C\u8bbe\u5907\uff0c\u5c06\u4e0d\u80fd\u6b63\u786e\u5730\u8bfb\u5199\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1745070806688",src:r(1796).Z,width:"1089",height:"85"})),(0,c.kt)("p",null,"\u56fe15.5\u3000RepStart\u6a21\u5f0f"),(0,c.kt)("p",null,"\u9274\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0ci2c-dev.c\u4e2d\u7684i2cdev_read\uff08\uff09\u548ci2cdev_write\uff08\uff09\u51fd\u6570\u4e0d\u5177\u5907\u592a\u5f3a\u7684\u901a\u7528\u6027\uff0c\u6ca1\u6709\u592a\u5927\u7684\u5b9e\u7528\u4ef7\u503c\uff0c\u53ea\u80fd\u9002\u7528\u4e8e\u975eRepStart\u6a21\u5f0f\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u7531\u4e24\u6761\u4ee5\u4e0a\u6d88\u606f\u7ec4\u6210\u7684\u8bfb\u5199\uff0c\u5728\u7528\u6237\u7a7a\u95f4\u9700\u8981\u7ec4\u7ec7i2c_msg\u6d88\u606f\u6570\u7ec4\u5e76\u8c03\u7528I2C_RDWR IOCTL\u547d\u4ee4\u3002\u4ee3\u7801\u6e05\u535515.15\u6240\u793a\u4e3ai2cdev_ioctl\uff08\uff09\u51fd\u6570\u7684\u6846\u67b6\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.15\u3000i2c-dev_c\u4e2d\u7684i2cdev_ioctl\uff08\uff09\u51fd\u6570"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1static int i2cdev_ioctl(struct inode *inode, struct file *file,\n 2        unsigned int cmd, unsigned long arg)\n 3{\n 4   struct i2c_client *client = (struct i2c_client *)file->private_data;\n 5   ...\n 6   switch ( cmd ) {\n 7   case I2C_SLAVE:\n 8   case I2C_SLAVE_FORCE:\n 9        ...                           /* \u8bbe\u7f6e\u4ece\u8bbe\u5907\u5730\u5740*/\n10   case I2C_TENBIT:\n11        ...\n12   case I2C_PEC:\n13        ...\n14   case I2C_FUNCS:\n15        ...\n16   case I2C_RDWR:\n17       return i2cdev_ioctl_rdrw(client, arg);\n18   case I2C_SMBUS:\n19        ...\n20   case I2C_RETRIES:\n21        ...\n22   case I2C_TIMEOUT:\n23        ...\n24   default:\n25      return i2c_control(client,cmd,arg);\n26}\n27return 0;\n28}\n")),(0,c.kt)("p",null,"\u5e38\u7528\u7684IOCTL\u5305\u62ecI2C_SLAVE\uff08\u8bbe\u7f6e\u4ece\u8bbe\u5907\u5730\u5740\uff09\u3001I2C_RETRIES\uff08\u6ca1\u6709\u6536\u5230\u8bbe\u5907ACK\u60c5\u51b5\u4e0b\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a1\uff09\u3001I2C_TIMEOU\uff08\u8d85\u65f6\uff09\u4ee5\u53caI2C_RDWR\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.16\u548c\u4ee3\u7801\u6e05\u535515.17\u6240\u793a\u4e3a\u76f4\u63a5\u901a\u8fc7read\uff08\uff09\u3001write\uff08\uff09\u63a5\u53e3\u548cO_RDWR IOCTL\u8bfb\u5199I2 C\u8bbe\u5907\u7684\u4f8b\u5b50\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.16\u3000\u76f4\u63a5\u901a\u8fc7read\uff08\uff09/write\uff08\uff09\u8bfb\u5199I2 C\u8bbe\u5907"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},' 1#include <stdio.h>\n 2#include <linux/types.h>\n 3#include <fcntl.h>\n 4#include <unistd.h>\n 5#include <stdlib.h>\n 6#include <sys/types.h>\n 7#include <sys/ioctl.h>\n 8#include <linux/i2c.h>\n 9#include <linux/i2c-dev.h>\n10\n11int main(int argc, char **argv)\n12{\n13   unsigned int fd;\n14   unsigned short mem_addr;\n15   unsigned short size;\n16   unsigned short idx;\n17   #define BUFF_SIZE    32\n18   char buf[BUFF_SIZE];\n19   char cswap;\n20   union\n21   {\n22    unsigned short addr;\n23    char bytes[2];\n24}  tmp;\n25\n26   if (argc < 3) {\n27    printf("Use:\\n%s /dev/i2c-x mem_addr size\\n", argv[0]);\n28    return 0;\n29   }\n30   sscanf(argv[2], "%d", &mem_addr);\n31   sscanf(argv[3], "%d", &size);\n32\n33   if (size > BUFF_SIZE)\n34    size = BUFF_SIZE;\n35\n36   fd = open(argv[1], O_RDWR);\n37\n38   if (!fd) {\n39    printf("Error on opening the device file\\n");\n40    return 0;\n41   }\n42\n43   ioctl(fd, I2C_SLAVE, 0x50); /* \u8bbe\u7f6eEEPROM\u5730\u5740*/\n44   ioctl(fd, I2C_TIMEOUT, 1);  /* \u8bbe\u7f6e\u8d85\u65f6*/\n45   ioctl(fd, I2C_RETRIES, 1);  /* \u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570*/\n46\n47   for (idx = 0; idx < size; ++idx, ++mem_addr) {\n48    tmp.addr = mem_addr;\n49    cswap = tmp.bytes[0];\n50    tmp.bytes[0] = tmp.bytes[1];\n51    tmp.bytes[1] = cswap;\n52    write(fd, &tmp.addr, 2);\n53    read(fd, &buf[idx], 1);\n54   }\n55   buf[size] = 0;\n56   close(fd);\n57   printf("Read %d char: %s\\n", size, buf);\n58   return 0;\n59}\n')),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.17\u3000\u901a\u8fc7O_RDWR IOCTL\u8bfb\u5199I2 C\u8bbe\u5907"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},' 1#include <stdio.h>\n 2#include <linux/types.h>\n 3#include <fcntl.h>\n 4#include <unistd.h>\n 5#include <stdlib.h>\n 6#include <sys/types.h>\n 7#include <sys/ioctl.h>\n 8#include <errno.h>\n 9#include <assert.h>\n10#include <string.h>\n11#include <linux/i2c.h>\n12#include <linux/i2c-dev.h>\n13\n14int main(int argc, char **argv)\n15{\n16struct i2c_rdwr_ioctl_data work_queue;\n17unsigned int idx;\n18unsigned int fd;\n19unsigned int slave_address, reg_address;\n20unsigned char val;\n21int i;\n22int ret;\n23\n24if (argc < 4) {\n25      printf("Usage:\\n%s /dev/i2c-x start_addr reg_addr\\n", argv[0]);\n26      return 0;\n27}\n28\n29fd = open(argv[1], O_RDWR);\n30\n31if (!fd) {\n32      printf("Error on opening the device file\\n");\n33      return 0;\n34}\n35sscanf(argv[2], "%x", &slave_address);\n36sscanf(argv[3], "%x", &reg_address);\n37\n38work_queue.nmsgs = 2;         /* \u6d88\u606f\u6570\u91cf*/\n39work_queue.msgs = (struct i2c_msg*)malloc(work_queue.nmsgs *sizeof(struct\n40           i2c_msg));\n41if (!work_queue.msgs) {\n42       printf("Memory alloc error\\n");\n43       close(fd);\n44       return 0;\n45}\n46\n47ioctl(fd, I2C_TIMEOUT, 2);    /* \u8bbe\u7f6e\u8d85\u65f6*/\n48ioctl(fd, I2C_RETRIES, 1);    /* \u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570*/\n49\n50for (i = reg_address; i < reg_address + 16; i++) {\n51       val = i;\n52      (work_queue.msgs[0]).len = 1;\n53      (work_queue.msgs[0]).addr = slave_address;\n54      (work_queue.msgs[0]).buf = &val;\n55\n56      (work_queue.msgs[1]).len = 1;\n57      (work_queue.msgs[1]).flags = I2C_M_RD;\n58      (work_queue.msgs[1]).addr = slave_address;\n59      (work_queue.msgs[1]).buf = &val;\n60\n61      ret = ioctl(fd, I2C_RDWR, (unsigned long) &work_queue);\n62      if (ret < 0)\n63      printf("Error during I2C_RDWR ioctl with error code: %d\\n", ret);\n64else\n65      printf("reg:%02x val:%02x\\n", i, val);\n66}\n67close(fd);\n68return ;\n69}\n')),(0,c.kt)("p",null,"\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u6307\u5b9a\u8bfb\u53d6\u67d0I2 C\u63a7\u5236\u5668\u4e0a\u67d0I2 C\u4ece\u8bbe\u5907\u7684\u67d0\u5bc4\u5b58\u5668\uff0c\u5982\u8bfbI2 C\u63a7\u5236\u56680\u4e0a\u7684\u5730\u5740\u4e3a0x18\u7684\u4ece\u8bbe\u5907\uff0c\u4ece\u5bc4\u5b58\u56680x20\u5f00\u59cb\u8bfb\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"# i2c-test /dev/i2c-0 0x18 0x20\nreg:20 val:07\nreg:21 val:00\nreg:22 val:00\nreg:23 val:00\nreg:24 val:00\nreg:25 val:00\nreg:26 val:00\nreg:27 val:00\nreg:28 val:00\nreg:29 val:00\nreg:2a val:00\nreg:2b val:00\nreg:2c val:00\nreg:2d val:00\nreg:2e val:00\nreg:2f val:00\n")))}f.isMDXComponent=!0},30992:function(n,e,r){e.Z=r.p+"assets/images/1745070766336-6730dd5c2f73fe874f16c530fb7eec2f.png"},1796:function(n,e,r){e.Z=r.p+"assets/images/1745070806688-5c918b573d31d9ba5dabe21df418da1d.png"}}]);