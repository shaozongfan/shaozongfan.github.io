"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[4103],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return l}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var _=r.createContext({}),u=function(e){var n=r.useContext(_),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(_.Provider,{value:n},e.children)},a={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,_=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),c=u(t),l=i,v=c["".concat(_,".").concat(l)]||c[l]||a[l]||s;return t?r.createElement(v,o(o({ref:n},m),{},{components:t})):r.createElement(v,o({ref:n},m))}));function l(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=c;var d={};for(var _ in n)hasOwnProperty.call(n,_)&&(d[_]=n[_]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var u=2;u<s;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},30103:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return _},default:function(){return l},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return a}});var r=t(87462),i=t(63366),s=(t(67294),t(3905)),o=["components"],d={},_="13.7.1\u3000vmem_disk\u7684\u786c\u4ef6\u539f\u7406",u={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8",title:"13.7.1\u3000vmem_disk\u7684\u786c\u4ef6\u539f\u7406",description:"vmem_disk\u662f\u4e00\u79cd\u6a21\u62df\u78c1\u76d8\uff0c\u5176\u6570\u636e\u5b9e\u9645\u4e0a\u5b58\u50a8\u5728RAM\u4e2d\u3002\u5b83\u4f7f\u7528\u901a\u8fc7vmalloc\uff08\uff09\u5206\u914d\u51fa\u6765\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u6a21\u62df\u51fa\u4e00\u4e2a\u78c1\u76d8\uff0c\u4ee5\u5757\u8bbe\u5907\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u8fd9\u7247\u5185\u5b58\u3002\u8be5\u9a71\u52a8\u662f\u5bf9\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7ae0\u8282\u4e2dglobalmem\u9a71\u52a8\u7684\u5757\u65b9\u5f0f\u6539\u9020\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.7\u3000\u5b9e\u4f8b\uff1avmem_disk\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"13.6.1\u3000\u4f7f\u7528\u8bf7\u6c42\u961f\u5217",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.6\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684IO\u8bf7\u6c42\u5904\u7406"},next:{title:"13.8\u3000Linux MMC\u5b50\u7cfb\u7edf",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.8\u3000Linux MMC\u5b50\u7cfb\u7edf"}},m={},a=[],c={toc:a};function l(e){var n=e.components,t=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"1371vmem_disk\u7684\u786c\u4ef6\u539f\u7406"},"13.7.1\u3000vmem_disk\u7684\u786c\u4ef6\u539f\u7406"),(0,s.kt)("p",null,"vmem_disk\u662f\u4e00\u79cd\u6a21\u62df\u78c1\u76d8\uff0c\u5176\u6570\u636e\u5b9e\u9645\u4e0a\u5b58\u50a8\u5728RAM\u4e2d\u3002\u5b83\u4f7f\u7528\u901a\u8fc7vmalloc\uff08\uff09\u5206\u914d\u51fa\u6765\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u6a21\u62df\u51fa\u4e00\u4e2a\u78c1\u76d8\uff0c\u4ee5\u5757\u8bbe\u5907\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u8fd9\u7247\u5185\u5b58\u3002\u8be5\u9a71\u52a8\u662f\u5bf9\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7ae0\u8282\u4e2dglobalmem\u9a71\u52a8\u7684\u5757\u65b9\u5f0f\u6539\u9020\u3002"),(0,s.kt)("p",null,"\u52a0\u8f7dvmem_disk.ko\u540e\uff0c\u5728\u4f7f\u7528\u9ed8\u8ba4\u6a21\u5757\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u4f1a\u589e\u52a04\u4e2a\u5757\u8bbe\u5907\u8282\u70b9\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"# ls -l /dev/vmem_disk*\nbrw-rw---- 1 root disk 252,  0  2\u6708\n\n\n 25 14:00 /dev/vmem_diska\nbrw-rw---- 1 root disk 252, 16  2\u6708\n\n\n 25 14:00 /dev/vmem_diskb\nbrw-rw---- 1 root disk 252, 32  2\u6708\n\n\n 25 14:00 /dev/vmem_diskc\nbrw-rw---- 1 root disk 252, 48  2\u6708\n\n\n 25 14:00 /dev/vmem_diskd\n")),(0,s.kt)("p",null,"\u5176\u4e2d\uff0cmkfs.ext2/dev/vmem_diska\u547d\u4ee4\u7684\u6267\u884c\u4f1a\u56de\u9988\u5982\u4e0b\u4fe1\u606f\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ sudo mkfs.ext2  /dev/vmem_diska\nmke2fs 1.42.9 (4-Feb-2014)\nFilesystem label=\nOS type: Linux\nBlock size=1024 (log=0)\nFragment size=1024 (log=0)\nStride=0 blocks, Stripe width=0blocks\n64 inodes, 512 blocks\n25 blocks (4.88%) reserved for the super user\nFirst data block=1\nMaximum filesystem blocks=524288\n1 block group\n8192 blocks per group, 8192fragments per group\n64 inodes per group\nAllocating group tables: done\nWriting inode tables: done\nWriting superblocks and filesystem accounting information: done\n")),(0,s.kt)("p",null,"\u5b83\u5c06/dev/vmem_diska\u683c\u5f0f\u5316\u4e3aEXT2\u6587\u4ef6\u7cfb\u7edf\u3002\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5mount\u8fd9\u4e2a\u5206\u533a\u5e76\u5728\u5176\u4e2d\u8fdb\u884c\u6587\u4ef6\u8bfb\u5199\u3002"),(0,s.kt)("h1",{id:"1372vmem_disk\u9a71\u52a8\u6a21\u5757\u7684\u52a0\u8f7d\u4e0e\u5378\u8f7d"},"13.7.2\u3000vmem_disk\u9a71\u52a8\u6a21\u5757\u7684\u52a0\u8f7d\u4e0e\u5378\u8f7d"),(0,s.kt)("p",null,"vmem_disk\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u51fd\u6570\u5b8c\u6210\u7684\u5de5\u4f5c\u4e0e13.3\u8282\u7ed9\u51fa\u7684\u6a21\u677f\u5b8c\u5168\u4e00\u81f4\uff0c\u5b83\u652f\u6301\u201c\u5236\u9020\u8bf7\u6c42\u201d\uff08\u5bf9\u5e94\u4e8e\u4ee3\u7801\u6e05\u535513.9\uff09\u3001\u8bf7\u6c42\u961f\u5217\uff08\u5bf9\u5e94\u4e8e\u4ee3\u7801\u6e05\u535513.10\uff09\u4e24\u79cd\u6a21\u5f0f\uff08\u8bf7\u6ce8\u610f\u5728\u8bf7\u6c42\u961f\u5217\u65b9\u9762\u53c8\u652f\u6301\u7b80\u3001\u7e41\u4e24\u79cd\u6a21\u5f0f\uff09\uff0c\u4f7f\u7528\u6a21\u5757\u53c2\u6570request_mode\u8fdb\u884c\u533a\u5206\u3002\u4ee3\u7801\u6e05\u535513.13\u7ed9\u51fa\u4e86vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d\u51fd\u6570\u3002"),(0,s.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.13\u3000vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d\u51fd\u6570"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' 1static void setup_device(struct vmem_disk_dev *dev, int which)\n 2{\n 3    memset (dev, 0, sizeof (struct vmem_disk_dev));\n 4    dev->size = NSECTORS*HARDSECT_SIZE;\n 5    dev->data = vmalloc(dev->size);\n 6    if (dev->data == NULL) {\n 7        printk (KERN_NOTICE "vmalloc failure.\\n");\n 8        return;\n 9    }\n10    spin_lock_init(&dev->lock);\n11\n12    /*\n13     * The I/O queue, depending on whether we are using our own\n14     * make_request function or not.\n15     */\n16    switch (request_mode) {\n17    case VMEMD_NOQUEUE:\n18        dev->queue = blk_alloc_queue(GFP_KERNEL);\n19        if (dev->queue == NULL)\n20            goto out_vfree;\n21        blk_queue_make_request(dev->queue, vmem_disk_make_request);\n22        break;\n23    default:\n24        printk(KERN_NOTICE "Bad request mode %d, using simple\\n", request_mode);\n25    case VMEMD_QUEUE:\n26        dev->queue = blk_init_queue(vmem_disk_request, &dev->lock);\n27        if (dev->queue == NULL)\n28            goto out_vfree;\n29        break;\n30    }\n31    blk_queue_logical_block_size(dev->queue, HARDSECT_SIZE);\n32    dev->queue->queuedata = dev;\n33\n34    dev->gd = alloc_disk(VMEM_DISK_MINORS);\n35    if (!dev->gd) {\n36        printk (KERN_NOTICE "alloc_disk failure\\n");\n37        goto out_vfree;\n38    }\n39    dev->gd->major = vmem_disk_major;\n40    dev->gd->first_minor = which*VMEM_DISK_MINORS;\n41    dev->gd->fops = &vmem_disk_ops;\n42    dev->gd->queue = dev->queue;\n43    dev->gd->private_data = dev;\n44    snprintf (dev->gd->disk_name, 32, "vmem_disk%c", which + \'a\');\n45    set_capacity(dev->gd, NSECTORS*(HARDSECT_SIZE/KERNEL_SECTOR_SIZE));\n46    add_disk(dev->gd);\n47    return;\n48\n49out_vfree:\n50    if (dev->data)\n51        vfree(dev->data);\n52}\n53\n54\n55static int __init vmem_disk_init(void)\n56{\n57    int i;\n58\n59    vmem_disk_major = register_blkdev(vmem_disk_major, "vmem_disk");\n60    if (vmem_disk_major <= 0) {\n61        printk(KERN_WARNING "vmem_disk: unable to get major number\\n");\n62        return -EBUSY;\n63    }\n64\n65    devices = kmalloc(NDEVICES*sizeof (struct vmem_disk_dev), GFP_KERNEL);\n66    if (!devices)\n67        goto out_unregister;\n68    for (i = 0; i < NDEVICES; i++)\n69        setup_device(devices + i, i);\n70\n71    return 0;\n72\n73out_unregister:\n74    unregister_blkdev(vmem_disk_major, "sbd");\n75    return -ENOMEM;\n76}\n77module_init(vmem_disk_init);\n')),(0,s.kt)("p",null,"\u6ce8\u610f\u4e0a\u8ff0\u4ee3\u7801\u7684\u7b2c16~30\u884c\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u652f\u6301\u4e24\u79cdI/O\u8bf7\u6c42\u6a21\u5f0f\uff0c\u4e00\u79cd\u662fmake_request\uff0c\u53e6\u4e00\u79cd\u662frequest_queue\u3002make_request\u7684\u7248\u672c\u76f4\u63a5\u4f7f\u7528vmem_disk_make_request\uff08\uff09\u6765\u5904\u7406bio\uff0c\u800crequest_queue\u7684\u7248\u672c\u5219\u4f7f\u7528vmem_disk_request\u6765\u5904\u7406\u8bf7\u6c42\u961f\u5217\u3002"),(0,s.kt)("h1",{id:"1373vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684block_device_operations"},"13.7.3\u3000vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684block_device_operations"),(0,s.kt)("p",null,"vmem_disk\u63d0\u4f9bblock_device_operations\u7ed3\u6784\u4f53\u4e2d\u7684getgeo\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u4ee3\u7801\u6e05\u535513.14\u7ed9\u51fa\u4e86vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684block_device_operations\u7ed3\u6784\u4f53\u5b9a\u4e49\u53ca\u5176\u6210\u5458\u51fd\u6570\u7684\u5b9e\u73b0\u3002"),(0,s.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.14\u3000vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684block_device_operations\u7ed3\u6784\u4f53\u53ca\u6210\u5458\u51fd\u6570"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"}," 1static int vmem_disk_getgeo(struct block_device *bdev, struct hd_geometry *geo)\n 2{\n 3    long size;\n 4    struct vmem_disk_dev *dev = bdev->bd_disk->private_data;\n 5\n 6    size = dev->size*(HARDSECT_SIZE/KERNEL_SECTOR_SIZE);\n 7    geo->cylinders = (size & ~0x3f) >> 6;\n 8    geo->heads = 4;\n 9    geo->sectors = 16;\n10    geo->start = 4;\n11\n12    return 0;\n13}\n14\n15static struct block_device_operations vmem_disk_ops = {\n16    .getgeo          = vmem_disk_getgeo,\n17};\n")),(0,s.kt)("h1",{id:"1374vmem_disk\u7684io\u8bf7\u6c42\u5904\u7406"},"13.7.4\u3000vmem_disk\u7684I/O\u8bf7\u6c42\u5904\u7406"),(0,s.kt)("p",null,"\u5728vmem_disk\u9a71\u52a8\u4e2d\uff0c\u901a\u8fc7\u6a21\u5757\u53c2\u6570request_mode\u7684\u65b9\u5f0f\u6765\u652f\u63013\u79cd\u4e0d\u540c\u7684\u8bf7\u6c42\u5904\u7406\u6a21\u5f0f\u4ee5\u52a0\u6df1\u8bfb\u8005\u5bf9\u5b83\u4eec\u7684\u7406\u89e3\uff0c\u4ee3\u7801\u6e05\u535513.15\u5217\u51fa\u4e86vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684\u8bf7\u6c42\u5904\u7406\u4ee3\u7801\u3002"),(0,s.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.15\u3000vmem_disk\u8bbe\u5907\u9a71\u52a8\u7684\u8bf7\u6c42\u5904\u7406\u51fd\u6570"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' 1/*\n 2 * Handle an I/O request.\n 3 */\n 4static void vmem_disk_transfer(struct vmem_disk_dev *dev, unsigned long sector,\n 5        unsigned long nsect, char *buffer, int write)\n 6{\n 7    unsigned long offset = sector*KERNEL_SECTOR_SIZE;\n 8    unsigned long nbytes = nsect*KERNEL_SECTOR_SIZE;\n 9\n10    if ((offset + nbytes) > dev->size) {\n11        printk (KERN_NOTICE "Beyond-end write (%ld %ld)\\n", offset, nbytes);\n12        return;\n13    }\n14    if (write)\n15        memcpy(dev->data + offset, buffer, nbytes);\n16    else\n17        memcpy(buffer, dev->data + offset, nbytes);\n18}\n19\n20/*\n21 * Transfer a single BIO.\n22 */\n23static int vmem_disk_xfer_bio(struct vmem_disk_dev *dev, struct bio *bio)\n24{\n25        struct bio_vec bvec;\n26        struct bvec_iter iter;\n27        sector_t sector = bio->bi_iter.bi_sector;\n28\n29    bio_for_each_segment(bvec, bio, iter) {\n30        char *buffer = __bio_kmap_atomic(bio, iter);\n31        vmem_disk_transfer(dev, sector, bio_cur_bytes(bio) >> 9,\n32            buffer, bio_data_dir(bio) == WRITE);\n33        sector += bio_cur_bytes(bio) >> 9;\n34        __bio_kunmap_atomic(buffer);\n35    }\n36    return 0;\n37}\n38\n39/*\n40 * The request_queue version.\n41 */\n42static void vmem_disk_request(struct request_queue *q)\n43{\n44    struct request *req;\n45    struct bio *bio;\n46\n47    while ((req = blk_peek_request(q)) != NULL) {\n48        struct vmem_disk_dev *dev = req->rq_disk->private_data;\n49        if (req->cmd_type != REQ_TYPE_FS) {\n50            printk (KERN_NOTICE "Skip non-fs request\\n");\n51            blk_start_request(req);\n52            __blk_end_request_all(req, -EIO);\n53            continue;\n54        }\n55\n56        blk_start_request(req);\n57        __rq_for_each_bio(bio, req)\n58            vmem_disk_xfer_bio(dev, bio);\n59        __blk_end_request_all(req, 0);\n60    }\n61}\n62\n63\n64/*\n65 * The direct make request version.\n66 */\n67static void vmem_disk_make_request(struct request_queue *q, struct bio *bio)\n68{\n69    struct vmem_disk_dev *dev = q->queuedata;\n70    int status;\n71\n72    status = vmem_disk_xfer_bio(dev, bio);\n73    bio_endio(bio, status);\n74}\n')),(0,s.kt)("p",null,"\u7b2c4\u884c\u7684vmem_disk_transfer\uff08\uff09\u5b8c\u6210\u771f\u5b9e\u7684\u786c\u4ef6I/O\u64cd\u4f5c\uff08\u5bf9\u4e8e\u672c\u4f8b\u800c\u8a00\uff0c\u5c31\u662f\u4e00\u4e2amemcpy\uff09\uff0c\u7b2c23\u884c\u7684vmem_disk_xfer_bio\uff08\uff09\u51fd\u6570\u8c03\u7528\u5b83\u6765\u5b8c\u6210\u4e00\u4e2a\u4e0ebio\u5bf9\u5e94\u7684\u786c\u4ef6\u64cd\u4f5c\uff0c\u5728\u5b8c\u6210\u7684\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u7b2c29\u884c\u7684bio_for_each_segment\uff08\uff09\u5c55\u5f00\u4e86\u8be5bio\u4e2d\u7684\u6bcf\u4e2asegment\u3002"),(0,s.kt)("p",null,"vmem_disk_make_request\uff08\uff09\u76f4\u63a5\u8c03\u7528vmem_disk_xfer_bio\uff08\uff09\u6765\u5b8c\u6210\u4e00\u4e2abio\u64cd\u4f5c\uff0c\u800cvmem_disk_request\uff08\uff09\u5219\u901a\u8fc7\u7b2c47\u884c\u7684blk_peek_request\uff08\uff09\u5148\u4ecerequest_queue\u62ff\u51fa\u4e00\u4e2a\u8bf7\u6c42\uff0c\u518d\u901a\u8fc7\u7b2c57\u884c\u7684__rq_for_each_bio\uff08\uff09\u4ece\u8be5\u8bf7\u6c42\u4e2d\u53d6\u51fa\u4e00\u4e2abio\uff0c\u4e4b\u540e\u8c03\u7528vmem_disk_xfer_bio\uff08\uff09\u6765\u5b8c\u6210\u8be5I/O\u8bf7\u6c42\uff0c\u56fe13.4\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"G:%5Ctypora%E6%96%87%E6%A1%A3%5Clinux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3%5C1744814119520.png",alt:"1744814119520"})),(0,s.kt)("p",null,"\u56fe13.4\u3000vmem_disk\u7684I/O\u5904\u7406\u8fc7\u7a0b"))}l.isMDXComponent=!0}}]);