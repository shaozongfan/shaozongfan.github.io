"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[4743],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),_=u(t),d=o,f=_["".concat(l,".").concat(d)]||_[d]||s[d]||a;return t?r.createElement(f,c(c({ref:n},p),{},{components:t})):r.createElement(f,c({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=_;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},55344:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return s}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),c=["components"],i={},l=void 0,u={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",title:"21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",description:"\u5185\u6838\u4e2d\u6709\u8bb8\u591a\u5730\u65b9\u8c03\u7528\u7c7b\u4f3cBUG\uff08\uff09\u7684\u8bed\u53e5\uff0c\u5b83\u975e\u5e38\u50cf\u4e00\u4e2a\u5185\u6838\u8fd0\u884c\u65f6\u7684\u65ad\u8a00\uff0c\u610f\u5473\u7740\u672c\u6765\u4e0d\u8be5\u6267\u884c\u5230BUG\uff08\uff09\u8fd9\u6761\u8bed\u53e5\uff0c\u4e00\u65e6\u6267\u884c\u5373\u629b\u51faOops\u3002BUG\uff08\uff09\u7684\u5b9a\u4e49\u4e3a\uff1a",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.7\u3000BUG_ON\uff08\u200b\uff09\u548cWARN_ON\uff08\u200b\uff09.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"21.6\u3000Oops",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.6\u3000Oops"},next:{title:"21.8\u3000strace",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.8\u3000strace"}},p={},s=[],_={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u5185\u6838\u4e2d\u6709\u8bb8\u591a\u5730\u65b9\u8c03\u7528\u7c7b\u4f3cBUG\uff08\uff09\u7684\u8bed\u53e5\uff0c\u5b83\u975e\u5e38\u50cf\u4e00\u4e2a\u5185\u6838\u8fd0\u884c\u65f6\u7684\u65ad\u8a00\uff0c\u610f\u5473\u7740\u672c\u6765\u4e0d\u8be5\u6267\u884c\u5230BUG\uff08\uff09\u8fd9\u6761\u8bed\u53e5\uff0c\u4e00\u65e6\u6267\u884c\u5373\u629b\u51faOops\u3002BUG\uff08\uff09\u7684\u5b9a\u4e49\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#define BUG() do { \\\n       printk("BUG: failure at %s:%d/%s()!\\n", __FILE__, __LINE__, __func__); \\\n       panic("BUG!"); \\\n} while (0)\n')),(0,a.kt)("p",null,"\u5176\u4e2d\u7684panic\uff08\uff09\u5b9a\u4e49\u5728kernel/panic.c\u4e2d\uff0c\u4f1a\u5bfc\u81f4\u5185\u6838\u5d29\u6e83\uff0c\u5e76\u6253\u5370Oops\u3002\u6bd4\u5982arch/arm/kernel/dma.c\u4e2d\u7684enable_dma\uff08\uff09\u51fd\u6570\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'void enable_dma (unsigned int chan)\n{\n       dma_t *dma = dma_channel(chan);\n       if (!dma->lock)\n              goto free_dma;\n       if (dma->active == 0) {\n             dma->active = 1;\n             dma->d_ops->enable(chan, dma);\n       }\n       return;\nfree_dma:\n       printk(KERN_ERR "dma%d: trying to enable free DMA\\n", chan);\n       BUG();\n}\n')),(0,a.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7684\u542b\u4e49\u662f\uff0c\u5982\u679c\u5728dma->lock\u4e0d\u6210\u7acb\u7684\u60c5\u51b5\u4e0b\uff0c\u9a71\u52a8\u76f4\u63a5\u8c03\u7528\u4e86enable_dma\uff08\uff09\uff0c\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u5185\u6838\u7684\u4e00\u4e2abug\u3002"),(0,a.kt)("p",null,"BUG\uff08\uff09\u8fd8\u6709\u4e00\u4e2a\u53d8\u4f53\u53ebBUG_ON\uff08\uff09\uff0c\u5b83\u7684\u5185\u90e8\u4f1a\u5f15\u7528BUG\uff08\uff09\uff0c\u5f62\u5f0f\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#define BUG_ON(condition) do { if (unlikely(condition)) BUG(); } while (0)\n")),(0,a.kt)("p",null,"\u5bf9\u4e8eBUG_ON\uff08\uff09\u800c\u8a00\uff0c\u53ea\u6709\u5f53\u62ec\u53f7\u5185\u7684\u6761\u4ef6\u6210\u7acb\u7684\u65f6\u5019\uff0c\u624d\u629b\u51faOops\u3002\u6bd4\u5982drivers/char/random.c\u4e2d\u7684\u7c7b\u4f3c\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"static void push_to_pool(struct work_struct *work)\n{\n       struct entropy_store *r = container_of(work, struct entropy_store,\n                                       push_work);\n       BUG_ON(!r);\n        _xfer_secondary_pool(r, random_read_wakeup_bits/8);\n        trace_push_to_pool(r->name, r->entropy_count >> ENTROPY_SHIFT,\n                        r->pull->entropy_count >> ENTROPY_SHIFT);\n}\n")),(0,a.kt)("p",null,"\u9664\u4e86BUG_ON\uff08\uff09\u5916\uff0c\u5185\u6838\u6709\u4e2a\u7a0d\u5fae\u5f31\u4e00\u4e9bWARN_ON\uff08\uff09\uff0c\u5728\u62ec\u53f7\u4e2d\u7684\u6761\u4ef6\u6210\u7acb\u7684\u65f6\u5019\uff0c\u5185\u6838\u4f1a\u629b\u51fa\u6808\u56de\u6eaf\uff0c\u4f46\u662f\u4e0d\u4f1apanic\uff08\uff09\uff0c\u8fd9\u901a\u5e38\u7528\u4e8e\u5185\u6838\u629b\u51fa\u4e00\u4e2a\u8b66\u544a\uff0c\u6697\u793a\u67d0\u79cd\u4e0d\u592a\u5408\u7406\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u3002\u5982\u5728kernel/locking/mutex-debug.c\u4e2d\u7684debug_mutex_unlock\uff08\uff09\u51fd\u6570\u53d1\u73b0mutex_unlock\uff08\uff09\u7684\u8c03\u7528\u8005\u548cmutex_lock\uff08\uff09\u7684\u8c03\u7528\u8005\u4e0d\u662f\u540c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u65f6\u5019\u6216\u8005mutex\u7684owner\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u4f1a\u629b\u51fa\u8b66\u544a\u4fe1\u606f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"void debug_mutex_unlock(struct mutex *lock)\n{\n      if (likely(debug_locks)) {\n             DEBUG_LOCKS_WARN_ON(lock->magic != lock);\n             if (!lock->owner)\n                   DEBUG_LOCKS_WARN_ON(!lock->owner);\n             else\n                   DEBUG_LOCKS_WARN_ON(lock->owner != current);\n             DEBUG_LOCKS_WARN_ON(!lock->wait_list.prev && !lock->wait_list.next);\n             mutex_clear_owner(lock);\n     }\n}\n")),(0,a.kt)("p",null,"\u6709\u65f6\u5019\uff0cWARN_ON\uff08\uff09\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u8c03\u8bd5\u6280\u5de7\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u8fdb\u5230\u5185\u6838\u67d0\u4e2a\u51fd\u6570\u540e\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u662f\u600e\u4e48\u4e00\u7ea7\u4e00\u7ea7\u88ab\u8c03\u7528\u8fdb\u6765\u7684\uff0c\u90a3\u53ef\u4ee5\u5728\u8be5\u51fd\u6570\u4e2d\u52a0\u5165\u4e00\u4e2aWARN_ON\uff081\uff09\u3002"))}d.isMDXComponent=!0}}]);