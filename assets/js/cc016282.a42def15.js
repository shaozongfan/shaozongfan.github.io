"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[7473],{3905:function(n,t,e){e.d(t,{Zo:function(){return s},kt:function(){return d}});var r=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,r,o=function(n,t){if(null==n)return{};var e,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var c=r.createContext({}),u=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},s=function(n){var t=u(n.components);return r.createElement(c.Provider,{value:t},n.children)},l={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(n,t){var e=n.components,o=n.mdxType,a=n.originalType,c=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),_=u(e),d=o,f=_["".concat(c,".").concat(d)]||_[d]||l[d]||a;return e?r.createElement(f,i(i({ref:t},s),{},{components:e})):r.createElement(f,i({ref:t},s))}));function d(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var a=e.length,i=new Array(a);i[0]=_;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=n,p.mdxType="string"==typeof n?n:o,i[1]=p;for(var u=2;u<a;u++)i[u]=e[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}_.displayName="MDXCreateElement"},9554:function(n,t,e){e.r(t),e.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return l}});var r=e(87462),o=e(63366),a=(e(67294),e(3905)),i=["components"],p={},c=void 0,u={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4",title:"18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4",description:"\u6709\u4e86\u8bbe\u5907\u6811\u540e\uff0c\u4e0d\u518d\u9700\u8981\u5927\u91cf\u7684\u677f\u7ea7\u4fe1\u606f\uff0c\u8b6c\u5982\u8fc7\u53bb\u7ecf\u5e38\u5728arch/arm/plat-xxx\u548carch/arm/mach-xxx\u4e2d\u5b9e\u65bd\u5982\u4e0b\u4e8b\u60c5\u3002",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.3\u3000\u7531\u8bbe\u5907\u6811\u5f15\u53d1\u7684BSP\u548c\u9a71\u52a8\u53d8\u66f4.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"18.2\u3000\u8bbe\u5907\u6811\u7684\u7ec4\u6210\u548c\u7ed3\u6784",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.2\u3000\u8bbe\u5907\u6811\u7684\u7ec4\u6210\u548c\u7ed3\u6784"},next:{title:"18.4\u3000\u5e38\u7528\u7684OF API",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.4\u3000\u5e38\u7528\u7684OF API"}},s={},l=[],_={toc:l};function d(n){var t=n.components,e=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},_,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6709\u4e86\u8bbe\u5907\u6811\u540e\uff0c\u4e0d\u518d\u9700\u8981\u5927\u91cf\u7684\u677f\u7ea7\u4fe1\u606f\uff0c\u8b6c\u5982\u8fc7\u53bb\u7ecf\u5e38\u5728arch/arm/plat-xxx\u548carch/arm/mach-xxx\u4e2d\u5b9e\u65bd\u5982\u4e0b\u4e8b\u60c5\u3002"),(0,a.kt)("h1",{id:"1\u6ce8\u518cplatform_device\u7ed1\u5b9aresource\u5373\u5185\u5b58irq\u7b49\u677f\u7ea7\u4fe1\u606f"},"1.\u6ce8\u518cplatform_device\uff0c\u7ed1\u5b9aresource\uff0c\u5373\u5185\u5b58\u3001IRQ\u7b49\u677f\u7ea7\u4fe1\u606f"),(0,a.kt)("p",null,"\u901a\u8fc7\u8bbe\u5907\u6811\u540e\uff0c\u5f62\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static struct resource xxx_resources[] = {\n       [0] = {\n               .start  = \u2026\n,\n               .end    = \u2026\n,\n               .flags   = IORESOURCE_MEM,\n       },\n       [1] = {\n               .start  = \u2026\n,\n               .end    = \u2026\n,\n               .flags   = IORESOURCE_IRQ,\n        },\n};\nstatic struct platform_device xxx_device = {\n        .name           = "xxx",\n        .id             = -1,\n        .dev            = {\n                                .platform_data          = &xxx_data,\n        },\n        .resource       = xxx_resources,\n        .num_resources  = ARRAY_SIZE(xxx_resources),\n};\n')),(0,a.kt)("p",null,"\u4e4b\u7c7b\u7684platform_device\u4ee3\u7801\u90fd\u4e0d\u518d\u9700\u8981\uff0c\u5176\u4e2dplatform_device\u4f1a\u7531\u5185\u6838\u81ea\u52a8\u5c55\u5f00\u3002\u800c\u8fd9\u4e9bresource\u5b9e\u9645\u6765\u6e90\u4e8e.dts\u4e2d\u8bbe\u5907\u8282\u70b9\u7684reg\u3001interrupts\u5c5e\u6027\u3002"),(0,a.kt)("p",null,"\u5178\u578b\u7684\uff0c\u5927\u591a\u6570\u603b\u7ebf\u90fd\u4e0e\u201csimple_bus\u201d\u517c\u5bb9\uff0c\u800c\u5728\u4e0eSoC\u5bf9\u5e94\u7684\u8bbe\u5907\u7684.init_machine\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u8c03\u7528of_platform_bus_probe\uff08NULL\uff0cxxx_of_bus_ids\uff0cNULL\uff09\uff1b\u5373\u53ef\u81ea\u52a8\u5c55\u5f00\u6240\u6709\u7684platform_device\u3002"),(0,a.kt)("h1",{id:"2\u6ce8\u518ci2c_board_info\u6307\u5b9airq\u7b49\u677f\u7ea7\u4fe1\u606f"},"2.\u6ce8\u518ci2c_board_info\uff0c\u6307\u5b9aIRQ\u7b49\u677f\u7ea7\u4fe1\u606f"),(0,a.kt)("p",null,"\u5f62\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static struct i2c_board_info __initdata afeb9260_i2c_devices[] = {\n        {\n                I2C_BOARD_INFO("tlv320aic23", 0x1a),\n        }, {\n                I2C_BOARD_INFO("fm3130", 0x68),\n        }, {\n                I2C_BOARD_INFO("24c64", 0x50),\n        },\n};\n')),(0,a.kt)("p",null,"\u4e4b\u7c7b\u7684i2c_board_info\u4ee3\u7801\u76ee\u524d\u4e0d\u518d\u9700\u8981\u51fa\u73b0\uff0c\u73b0\u5728\u53ea\u9700\u8981\u628atlv320aic23\u3001fm3130\u300124c64\u8fd9\u4e9b\u8bbe\u5907\u8282\u70b9\u586b\u5145\u4f5c\u4e3a\u76f8\u5e94\u7684I2 C\u63a7\u5236\u5668\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5373\u53ef\uff0c\u7c7b\u4f3c\u4e8e\u524d\u9762\u7684\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'        i2c@1,0 {\ncompatible = "acme,a1234-i2c-bus";\n            \u2026\n            rtc@58 {\ncompatible = "maxim,ds1338";\nreg = <58>;\ninterrupts = < 7 3 >;\n            };\n        };\n')),(0,a.kt)("p",null,"\u8bbe\u5907\u6811\u4e2d\u7684I2 C\u5ba2\u6237\u7aef\u4f1a\u901a\u8fc7\u5728I2 C host\u9a71\u52a8\u7684probe\uff08\uff09\u51fd\u6570\u4e2d\u8c03\u7528\u7684of_i2c_register_devices\uff08&i2c_dev->adapter\uff09\uff1b\u88ab\u81ea\u52a8\u5c55\u5f00\u3002"),(0,a.kt)("h1",{id:"3\u6ce8\u518cspi_board_info\u6307\u5b9airq\u7b49\u677f\u7ea7\u4fe1\u606f"},"3.\u6ce8\u518cspi_board_info\uff0c\u6307\u5b9aIRQ\u7b49\u677f\u7ea7\u4fe1\u606f"),(0,a.kt)("p",null,"\u5f62\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static struct spi_board_info afeb9260_spi_devices[] = {\n        {       /* DataFlash chip */\n                .modalias       = "mtd_dataflash",\n                .chip_select    = 1,\n                .max_speed_hz   = 15 * 1000 * 1000,\n                .bus_num        = 0,\n        },\n};\n')),(0,a.kt)("p",null,"\u4e4b\u7c7b\u7684spi_board_info\u4ee3\u7801\u76ee\u524d\u4e0d\u518d\u9700\u8981\u51fa\u73b0\uff0c\u4e0eI2 C\u7c7b\u4f3c\uff0c\u73b0\u5728\u53ea\u9700\u8981\u628amtd_dataflash\u4e4b\u7c7b\u7684\u8282\u70b9\u4f5c\u4e3aSPI\u63a7\u5236\u5668\u7684\u5b50\u8282\u70b9\u5373\u53ef\uff0cSPI host\u9a71\u52a8\u7684probe\uff08\uff09\u51fd\u6570\u901a\u8fc7spi_register_master\uff08\uff09\u6ce8\u518c\u4e3b\u673a\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u5c55\u5f00\u4f9d\u9644\u4e8e\u5b83\u7684\u4ece\u673a\uff0cspear1310-evb.dts\u4e2d\u7684st\uff0cm25p80SPI\u63a5\u53e3\u7684NOR Flash\u8282\u70b9\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'spi0: spi@e0100000 {\nstatus = "okay";\nnum-cs = <3>;\n        m25p80@1 {\ncompatible = "st,m25p80";\n                \u2026\n        };\n}\n')),(0,a.kt)("h1",{id:"4\u591a\u4e2a\u9488\u5bf9\u4e0d\u540c\u7535\u8def\u677f\u7684\u8bbe\u5907\u4ee5\u53ca\u76f8\u5173\u7684\u56de\u8c03\u51fd\u6570"},"4.\u591a\u4e2a\u9488\u5bf9\u4e0d\u540c\u7535\u8def\u677f\u7684\u8bbe\u5907\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u56de\u8c03\u51fd\u6570"),(0,a.kt)("p",null,"\u5728\u8fc7\u53bb\uff0cARM Linux\u9488\u5bf9\u4e0d\u540c\u7684\u7535\u8def\u677f\u4f1a\u5efa\u7acb\u7531MACHINE_START\u548cMACHINE_END\u5305\u56f4\u7684\u8bbe\u5907\uff0c\u5f15\u5165\u8bbe\u5907\u6811\u4e4b\u540e\uff0cMACHINE_START\u53d8\u66f4\u4e3aDT_MACHINE_START\uff0c\u5176\u4e2d\u542b\u6709\u4e00\u4e2a.dt_compat\u6210\u5458\uff0c\u7528\u4e8e\u8868\u660e\u76f8\u5173\u7684\u8bbe\u5907\u4e0e.dts\u4e2d\u6839\u8282\u70b9\u7684\u517c\u5bb9\u5c5e\u6027\u7684\u517c\u5bb9\u5173\u7cfb\u3002"),(0,a.kt)("p",null,"\u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u6539\u5584\u4ee3\u7801\u7684\u7ed3\u6784\u5e76\u51cf\u5c11\u5197\u4f59\u7684\u4ee3\u7801\uff0c\u5728\u4e0d\u652f\u6301\u8bbe\u5907\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u5149\u662f\u4e00\u4e2aS3C24xx\u5c31\u5b58\u5728\u591a\u4e2a\u677f\u6587\u4ef6\uff0c\u8b6c\u5982mach-amlm5900.c\u3001mach-gta02.c\u3001mach-smdk2410.c\u3001mach-qt2410.c\u3001mach-rx3715.c\u7b49\uff0c\u5176\u7d2f\u8ba1\u7684\u4ee3\u7801\u91cf\u662f\u76f8\u5f53\u5927\u7684\uff0c\u677f\u7ea7\u4fe1\u606f\u90fd\u7528C\u8bed\u8a00\u6765\u5b9e\u73b0\u3002\u800c\u91c7\u7528\u8bbe\u5907\u6811\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u591a\u4e2aSoC\u548c\u677f\u5b50\u4f7f\u7528\u540c\u4e00\u4e2aDT_MACHINE\u548c\u677f\u6587\u4ef6\uff0c\u677f\u5b50\u548c\u677f\u5b50\u4e4b\u95f4\u7684\u5dee\u5f02\u66f4\u591a\u53ea\u662f\u901a\u8fc7\u4e0d\u540c\u7684.dts\u6587\u4ef6\u6765\u4f53\u73b0\u3002"),(0,a.kt)("h1",{id:"5\u8bbe\u5907\u4e0e\u9a71\u52a8\u7684\u5339\u914d\u65b9\u5f0f"},"5.\u8bbe\u5907\u4e0e\u9a71\u52a8\u7684\u5339\u914d\u65b9\u5f0f"),(0,a.kt)("p",null,"\u4f7f\u7528\u8bbe\u5907\u6811\u540e\uff0c\u9a71\u52a8\u9700\u8981\u4e0e\u5728.dts\u4e2d\u63cf\u8ff0\u7684\u8bbe\u5907\u8282\u70b9\u8fdb\u884c\u5339\u914d\uff0c\u4ece\u800c\u4f7f\u9a71\u52a8\u7684probe\uff08\uff09\u51fd\u6570\u6267\u884c\u3002\u65b0\u7684\u9a71\u52a8\u3001\u8bbe\u5907\u7684\u5339\u914d\u53d8\u6210\u4e86\u8bbe\u5907\u6811\u8282\u70b9\u7684\u517c\u5bb9\u5c5e\u6027\u548c\u8bbe\u5907\u9a71\u52a8\u4e2d\u7684OF\u5339\u914d\u8868\u7684\u5339\u914d\u3002"),(0,a.kt)("h1",{id:"6\u8bbe\u5907\u7684\u5e73\u53f0\u6570\u636e\u5c5e\u6027\u5316"},"6.\u8bbe\u5907\u7684\u5e73\u53f0\u6570\u636e\u5c5e\u6027\u5316"),(0,a.kt)("p",null,"\u5728Linux 2.6\u4e0b\uff0c\u9a71\u52a8\u4e60\u60ef\u81ea\u5b9a\u4e49platform_data\uff0c\u5728arch/arm/mach-xxx\u6ce8\u518cplatform_device\u3001i2c_board_info\u3001spi_board_info\u7b49\u7684\u65f6\u5019\u7ed1\u5b9aplatform_data\uff0c\u800c\u540e\u9a71\u52a8\u901a\u8fc7\u6807\u51c6API\u83b7\u53d6\u5e73\u53f0\u6570\u636e\u3002\u8b6c\u5982\uff0c\u5728arch/arm/mach-at91/board-sam9263ek.c\u4e0b\u7528\u5982\u4e0b\u4ee3\u7801\u6ce8\u518cgpio_keys\u8bbe\u5907\uff0c\u5b83\u901a\u8fc7gpio_keys_platform_data\u7ed3\u6784\u4f53\u6765\u5b9a\u4e49platform_data\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static struct gpio_keys_button ek_buttons[] = {\n   {    /* BP1, "leftclic" */\n        .code          = BTN_LEFT,\n        .gpio          = AT91_PIN_PC5,\n        .active_low    = 1,\n        .desc          = "left_click",\n        .wakeup        = 1,\n   },\n   {    /* BP2, "rightclic" */\n        ...\n   }\n};\nstatic struct gpio_keys_platform_data ek_button_data = {\n   .buttons       = ek_buttons,\n   .nbuttons      = ARRAY_SIZE(ek_buttons),\n};\nstatic struct platform_device ek_button_device = {\n   .name          = "gpio-keys",\n   .id            = -1,\n   .num_resources = 0,\n   .dev           = {\n           .platform_data= &ek_button_data,\n   }\n};\n')),(0,a.kt)("p",null,"\u8bbe\u5907\u9a71\u52a8drivers/input/keyboard/gpio_keys.c\u5219\u901a\u8fc7\u5982\u4e0b\u7b80\u5355\u65b9\u6cd5\u53d6\u5f97\u8fd9\u4e2a\u4fe1\u606f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"static int gpio_keys_probe(struct platform_device *pdev)\n{\nstruct device *dev = &pdev->dev;\nconst struct gpio_keys_platform_data *pdata = dev_get_platdata(dev);\n        ...\n}\n")),(0,a.kt)("p",null,"\u5728\u8f6c\u79fb\u5230\u8bbe\u5907\u6811\u540e\uff0cplatform_data\u4fbf\u4e0d\u518d\u559c\u6b22\u653e\u5728arch/arm/mach-xxx\u4e2d\u4e86\uff0c\u5b83\u9700\u8981\u4ece\u8bbe\u5907\u6811\u7684\u5c5e\u6027\u4e2d\u83b7\u53d6\uff0c\u6bd4\u5982\u4e00\u4e2a\u7535\u8def\u677f\u4e0a\u6709gpio_keys\uff0c\u5219\u53ea\u9700\u8981\u5728\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0\u7c7b\u4f3carch/arm/boot/dts/exynos4210-origen.dts\u4e2d\u7684\u5982\u4ee3\u7801\u6e05\u535518.17\u6240\u793a\u7684\u4fe1\u606f\u5219\u53ef\u3002"),(0,a.kt)("p",null,"\u4ee3\u7801\u6e05\u535518.17\u3000\u5728\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0GPIO\u6309\u952e\u4fe1\u606f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},' 1gpio_keys {\n 2        compatible = "gpio-keys";\n 3        #address-cells = <1>;\n 4        #size-cells = <0>;\n 5\n 6        up {\n 7               label = "Up";\n 8               gpios = <&gpx2 0 1>;\n 9               linux,code = <KEY_UP>;\n10               gpio-key,wakeup;\n11        };\n12\n13        down {\n14               label = "Down";\n15               gpios = <&gpx2 1 1>;\n16               linux,code = <KEY_DOWN>;\n17               gpio-key,wakeup;\n18        };\n19        ...\n20};\n')),(0,a.kt)("p",null,"\u800cdrivers/input/keyboard/gpio",(0,a.kt)("em",{parentName:"p"},"keys.c\u5219\u901a\u8fc7\u4ee5of"),"\u5f00\u5934\u7684\u8bfb\u5c5e\u6027\u7684API\u6765\u8bfb\u53d6\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u7ec4\u7ec7\u51fagpio_keys_platform_data\u7ed3\u6784\u4f53\uff0c\u5982\u4ee3\u7801\u6e05\u535518.18\u6240\u793a\u3002"),(0,a.kt)("p",null,"\u4ee3\u7801\u6e05\u535518.18\u3000\u5728GPIO\u6309\u952e\u9a71\u52a8\u4e2d\u83b7\u53d6.dts\u4e2d\u7684\u952e\u63cf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},' 1static struct gpio_keys_platform_data *\n 2gpio_keys_get_devtree_pdata(struct device *dev)\n 3{\n 4         struct device_node *node, *pp;\n 5         struct gpio_keys_platform_data *pdata;\n 6         struct gpio_keys_button *button;\n 7         int error;\n 8         int nbuttons;\n 9         int i;\n10\n11         node = dev->of_node;\n12         if (!node)\n13                 return ERR_PTR(-ENODEV);\n14\n15         nbuttons = of_get_child_count(node);\n16         if (nbuttons == 0)\n17                 return ERR_PTR(-ENODEV);\n18\n19         pdata = devm_kzalloc(dev,\n20                              sizeof(*pdata) + nbuttons * sizeof(*button),\n21                              GFP_KERNEL);\n22         if (!pdata)\n23                 return ERR_PTR(-ENOMEM);\n24\n25         pdata->buttons = (struct gpio_keys_button *)(pdata + 1);\n26         pdata->nbuttons = nbuttons;\n27\n28         pdata->rep = !!of_get_property(node, "autorepeat", NULL);\n29\n30         i = 0;\n31         for_each_child_of_node(node, pp) {\n32                 int gpio;\n33                 enum of_gpio_flags flags;\n34\n35                 if (!of_find_property(pp, "gpios", NULL)) {\n36                         pdata->nbuttons--;\n37                         dev_warn(dev, "Found button without gpios\\n");\n38                         continue;\n39                 }\n40\n41                 gpio = of_get_gpio_flags(pp, 0, &flags);\n42                 if (gpio < 0) {\n43                         error = gpio;\n44                         if (error != -EPROBE_DEFER)\n45                                 dev_err(dev,\n46                                         "Failed to get gpio flags, error: %d\\n",\n47                                         error);\n48                         return ERR_PTR(error);\n49                 }\n50\n51                 button = &pdata->buttons[i++];\n52\n53                 button->gpio = gpio;\n54                 button->active_low = flags & OF_GPIO_ACTIVE_LOW;\n55\n56                 if (of_property_read_u32(pp, "linux,code", &button->code)) {\n57                         dev_err(dev, "Button without keycode: 0x%x\\n",\n58                                 button->gpio);\n59                         return ERR_PTR(-EINVAL);\n60                 }\n61\n62                 button->desc = of_get_property(pp, "label", NULL);\n63\n64                 if (of_property_read_u32(pp, "linux,input-type", &button->type))\n65                         button->type = EV_KEY;\n66\n67                 button->wakeup = !!of_get_property(pp, "gpio-key,wakeup", NULL);\n68\n69                 if (of_property_read_u32(pp, "debounce-interval",\n70                                          &button->debounce_interval))\n71                         button->debounce_interval = 5;\n72         }\n73\n74         if (pdata->nbuttons == 0)\n75                 return ERR_PTR(-EINVAL);\n76\n77         return pdata;\n78}\n')),(0,a.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u901a\u8fc7\u7b2c31\u884c\u7684for_each_child_of_node\uff08\uff09\u904d\u5386gpio_keys\u8282\u70b9\u4e0b\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5e76\u901a\u8fc7of_get_gpio_flags\uff08\uff09\u3001of_property_read_u32\uff08\uff09\u7b49API\u8bfb\u53d6\u51fa\u6765\u4e0e\u5404\u4e2a\u5b50\u8282\u70b9\u5bf9\u5e94\u7684GPIO\u3001\u4e0e\u6bcf\u4e2aGPIO\u5bf9\u5e94\u7684\u952e\u76d8\u952e\u503c\u7b49\u3002"))}d.isMDXComponent=!0}}]);