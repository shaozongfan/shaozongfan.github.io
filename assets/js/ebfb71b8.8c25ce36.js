"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[82289],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var f=r.createContext({}),u=function(e){var n=r.useContext(f),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(f.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,f=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(t),g=o,d=p["".concat(f,".").concat(g)]||p[g]||s[g]||l;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=p;var a={};for(var f in n)hasOwnProperty.call(n,f)&&(a[f]=n[f]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},80316:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return f},default:function(){return g},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return s}});var r=t(87462),o=t(63366),l=(t(67294),t(3905)),i=["components"],a={},f="9.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u5f02\u6b65\u901a\u77e5",u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.3\u3000\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.3\u3000\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.3\u3000\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u9a71\u52a8.md",title:"9.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u5f02\u6b65\u901a\u77e5",description:"\u9996\u5148\uff0c\u53c2\u8003\u4ee3\u7801\u6e05\u53559.3\uff0c\u5e94\u8be5\u5c06\u5f02\u6b65\u7ed3\u6784\u4f53\u6307\u9488\u6dfb\u52a0\u5230globalfifo_dev\u8bbe\u5907\u7ed3\u6784\u4f53\u5185\uff0c\u5982\u4ee3\u7801\u6e05\u53559.7\u6240\u793a\u3002",date:"2025-09-15T14:44:14.121Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:4.125,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"16.3.1\u3000USB\u8bbe\u5907\u9a71\u52a8\u7684\u6574\u4f53\u7ed3\u6784",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/16.3\u3000USB\u8bbe\u5907\u9a71\u52a8"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/4.3\u3000\u6a21\u5757\u52a0\u8f7d\u51fd\u6570",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/4.3\u3000\u6a21\u5757\u52a0\u8f7d\u51fd\u6570"}},c={authorsImageUrls:[]},s=[],p={toc:s};function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u9996\u5148\uff0c\u53c2\u8003\u4ee3\u7801\u6e05\u53559.3\uff0c\u5e94\u8be5\u5c06\u5f02\u6b65\u7ed3\u6784\u4f53\u6307\u9488\u6dfb\u52a0\u5230globalfifo_dev\u8bbe\u5907\u7ed3\u6784\u4f53\u5185\uff0c\u5982\u4ee3\u7801\u6e05\u53559.7\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53559.7\u3000\u589e\u52a0\u5f02\u6b65\u901a\u77e5\u540e\u7684globalfifo\u8bbe\u5907\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct globalfifo_dev {\n 2   struct cdev cdev;\n 3   unsigned int current_len;\n 4   unsigned char mem[GLOBALFIFO_SIZE];\n 5   struct mutex mutex;\n 6   wait_queue_head_t r_wait;\n 7   wait_queue_head_t w_wait;\n 8   struct fasync_struct *async_queue;\n 9};\n")),(0,l.kt)("p",null,"\u53c2\u8003\u4ee3\u7801\u6e05\u53559.4\u7684fasync\uff08\uff09\u51fd\u6570\u6a21\u677f\uff0cglobalfifo\u7684\u8fd9\u4e2a\u51fd\u6570\u5982\u4ee3\u7801\u6e05\u53559.8\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53559.8\u3000\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u8bbe\u5907\u9a71\u52a8fasync\uff08\uff09\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1static int globalfifo_fasync(int fd, struct file *filp, int mode)\n 2{\n 3   struct globalfifo_dev *dev = filp->private_data;\n 4   return fasync_helper(fd, filp, mode, &dev->async_queue);\n 5}\n")),(0,l.kt)("p",null,"\u5728globalfifo\u8bbe\u5907\u88ab\u6b63\u786e\u5199\u5165\u4e4b\u540e\uff0c\u5b83\u53d8\u5f97\u53ef\u8bfb\uff0c\u8fd9\u4e2a\u65f6\u5019\u9a71\u52a8\u5e94\u91ca\u653eSIGIO\u4fe1\u53f7\uff0c\u4ee5\u4fbf\u5e94\u7528\u7a0b\u5e8f\u6355\u83b7\uff0c\u4ee3\u7801\u6e05\u53559.9\u7ed9\u51fa\u4e86\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u8bbe\u5907\u9a71\u52a8\u7684\u5199\u51fd\u6570\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53559.9\u3000\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u8bbe\u5907\u9a71\u52a8\u5199\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static ssize_t globalfifo_write(struct file *filp, const char __user *buf,\n 2                  size_t count, loff_t *ppos)\n 3{\n 4  struct globalfifo_dev *dev = filp->private_data;\n 5  int ret;\n 6  DECLARE_WAITQUEUE(wait, current);\n 7\n 8  mutex_lock(&dev->mutex);\n 9  add_wait_queue(&dev->w_wait, &wait);\n10\n11  while (dev->current_len == GLOBALFIFO_SIZE) {\n12       if (filp->f_flags & O_NONBLOCK) {\n13            ret = -EAGAIN;\n14            goto out;\n15       }\n16       __set_current_state(TASK_INTERRUPTIBLE);\n17\n18       mutex_unlock(&dev->mutex);\n19\n20       schedule();\n21       if (signal_pending(current)) {\n22            ret = -ERESTARTSYS;\n23            goto out2;\n24       }\n25\n26       mutex_lock(&dev->mutex);\n27  }\n28\n29  if (count > GLOBALFIFO_SIZE - dev->current_len)\n30       count = GLOBALFIFO_SIZE - dev->current_len;\n31\n32  if (copy_from_user(dev->mem + dev->current_len, buf, count)) {\n33       ret = -EFAULT;\n34       goto out;\n35  } else {\n36       dev->current_len += count;\n37       printk(KERN_INFO "written %d bytes(s),current_len:%d\\n", count,\n38              dev->current_len);\n39\n40       wake_up_interruptible(&dev->r_wait);\n41\n42       if (dev->async_queue) {\n43            kill_fasync(&dev->async_queue, SIGIO, POLL_IN);\n44            printk(KERN_DEBUG "%s kill SIGIO\\n", __func__);\n45       }\n46\n47       ret = count;\n48  }\n49\n50 out:\n51  mutex_unlock(&dev->mutex);\n52 out2:\n53  remove_wait_queue(&dev->w_wait, &wait);\n54  set_current_state(TASK_RUNNING);\n55  return ret;\n56}\n')),(0,l.kt)("p",null,"\u53c2\u8003\u4ee3\u7801\u6e05\u53559.6\uff0c\u589e\u52a0\u5f02\u6b65\u901a\u77e5\u540e\u7684globalfifo\u8bbe\u5907\u9a71\u52a8\u7684release\uff08\uff09\u51fd\u6570\u4e2d\u9700\u8c03\u7528globalfifo_fasync\uff08\uff09\u51fd\u6570\u5c06\u6587\u4ef6\u4ece\u5f02\u6b65\u901a\u77e5\u5217\u8868\u4e2d\u5220\u9664\uff0c\u4ee3\u7801\u6e05\u53559.10\u7ed9\u51fa\u4e86\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo_release\uff08\uff09\u51fd\u6570\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53559.10\u3000\u589e\u52a0\u5f02\u6b65\u901a\u77e5\u540e\u7684globalfifo\u8bbe\u5907\u9a71\u52a8release\uff08\uff09\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1static int globalfifo_release(struct inode *inode, struct file *filp)\n 2{\n 3  globalfifo_fasync(-1, filp, 0);\n 4  return 0;\n 5}\n")),(0,l.kt)("h1",{id:"932\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u7684\u5f02\u6b65\u901a\u77e5"},"9.3.2\u3000\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u7684\u5f02\u6b65\u901a\u77e5"),(0,l.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e0e\u4ee3\u7801\u6e05\u53559.2\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u7f16\u5199\u4e00\u4e2a\u5728\u7528\u6237\u7a7a\u95f4\u9a8c\u8bc1globalfifo\u5f02\u6b65\u901a\u77e5\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5728\u63a5\u6536\u5230\u7531globalfifo\u53d1\u51fa\u7684\u4fe1\u53f7\u540e\u5c06\u8f93\u51fa\u4fe1\u53f7\u503c\uff0c\u5982\u4ee3\u7801\u6e05\u53559.11\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53559.11\u3000\u76d1\u63a7globalfifo\u5f02\u6b65\u901a\u77e5\u4fe1\u53f7\u7684\u5e94\u7528\u7a0b\u5e8f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static void signalio_handler(int signum)\n 2{\n 3   printf("receive a signal from globalfifo,signalnum:%d\\n", signum);\n 4}\n 5\n 6void main(void)\n 7{\n 8  int fd, oflags;\n 9  fd = open("/dev/globalfifo", O_RDWR, S_IRUSR | S_IWUSR);\n10  if (fd != -1) {\n11       signal(SIGIO, signalio_handler);\n12       fcntl(fd, F_SETOWN, getpid());\n13       oflags = fcntl(fd, F_GETFL);\n14       fcntl(fd, F_SETFL, oflags | FASYNC);\n15       while (1) {\n16            sleep(100);\n17       }\n18  } else {\n19       printf("device open failure\\n");\n20  }\n21}\n')),(0,l.kt)("p",null,"\u672c\u4e66\u4ee3\u7801/kernel/drivers/globalfifo/ch9\u5305\u542b\u4e86\u652f\u6301\u5f02\u6b65\u901a\u77e5\u7684globalfifo\u9a71\u52a8\u4ee5\u53ca\u4ee3\u7801\u6e05\u53559.11\u5bf9\u5e94\u7684globalfifo_test.c\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5728\u8be5\u76ee\u5f55\u8fd0\u884cmake\u5c06\u5f97\u5230globalfifo.ko\u548cglobalfifo_test\u3002"),(0,l.kt)("p",null,"\u6309\u7167\u4e0e\u7b2c8\u7ae0\u76f8\u540c\u7684\u65b9\u6cd5\u52a0\u8f7d\u65b0\u7684globalfifo\u8bbe\u5907\u9a71\u52a8\u5e76\u521b\u5efa\u8bbe\u5907\u6587\u4ef6\u8282\u70b9\uff0c\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u6bcf\u5f53\u901a\u8fc7echo\u5411/dev/globalfifo\u5199\u5165\u65b0\u7684\u6570\u636e\u65f6\uff0csignalio_handler\uff08\uff09\u5c06\u4f1a\u88ab\u8c03\u7528\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"baohua@baohua-VirtualBox:~/develop/training/kernel/drivers/globalfifo/ch9$ sudo su\n# ./globalfifo_test&\n[1] 25251\n# echo 1 > /dev/globalfifo\nreceive a signal from globalfifo,signalnum:29    -> globalfifo_test\u7a0b\u5e8f\u6253\u5370\n# echo hello > /dev/globalfifo\nreceive a signal from globalfifo,signalnum:29   -> globalfifo_test\u7a0b\u5e8f\u6253\u5370\n")))}g.isMDXComponent=!0}}]);