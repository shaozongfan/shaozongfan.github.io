"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[33190],{3905:function(n,t,p){p.d(t,{Zo:function(){return l},kt:function(){return g}});var e=p(67294);function i(n,t,p){return t in n?Object.defineProperty(n,t,{value:p,enumerable:!0,configurable:!0,writable:!0}):n[t]=p,n}function r(n,t){var p=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),p.push.apply(p,e)}return p}function o(n){for(var t=1;t<arguments.length;t++){var p=null!=arguments[t]?arguments[t]:{};t%2?r(Object(p),!0).forEach((function(t){i(n,t,p[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(p)):r(Object(p)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(p,t))}))}return n}function c(n,t){if(null==n)return{};var p,e,i=function(n,t){if(null==n)return{};var p,e,i={},r=Object.keys(n);for(e=0;e<r.length;e++)p=r[e],t.indexOf(p)>=0||(i[p]=n[p]);return i}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(e=0;e<r.length;e++)p=r[e],t.indexOf(p)>=0||Object.prototype.propertyIsEnumerable.call(n,p)&&(i[p]=n[p])}return i}var s=e.createContext({}),_=function(n){var t=e.useContext(s),p=t;return n&&(p="function"==typeof n?n(t):o(o({},t),n)),p},l=function(n){var t=_(n.components);return e.createElement(s.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return e.createElement(e.Fragment,{},t)}},a=e.forwardRef((function(n,t){var p=n.components,i=n.mdxType,r=n.originalType,s=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),a=_(p),g=i,f=a["".concat(s,".").concat(g)]||a[g]||u[g]||r;return p?e.createElement(f,o(o({ref:t},l),{},{components:p})):e.createElement(f,o({ref:t},l))}));function g(n,t){var p=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var r=p.length,o=new Array(r);o[0]=a;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=n,c.mdxType="string"==typeof n?n:i,o[1]=c;for(var _=2;_<r;_++)o[_]=p[_];return e.createElement.apply(null,o)}return e.createElement.apply(null,p)}a.displayName="MDXCreateElement"},91463:function(n,t,p){p.r(t),p.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return c},metadata:function(){return _},toc:function(){return u}});var e=p(87462),i=p(63366),r=(p(67294),p(3905)),o=["components"],c={},s=void 0,_={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.7\u3000pinctrl\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.7\u3000pinctrl\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.7\u3000pinctrl\u9a71\u52a8.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.7\u3000pinctrl\u9a71\u52a8",description:"\u8bb8\u591aSoC\u5185\u90e8\u90fd\u5305\u542bpin\u63a7\u5236\u5668\uff0c\u901a\u8fc7pin\u63a7\u5236\u5668\u7684\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2a\u6216\u8005\u4e00\u7ec4\u5f15\u811a\u7684\u529f\u80fd\u548c\u7279\u6027\u3002\u5728\u8f6f\u4ef6\u4e0a\uff0cLinux\u5185\u6838\u7684pinctrl\u9a71\u52a8\u53ef\u4ee5\u64cd\u4f5cpin\u63a7\u5236\u5668\u4e3a\u6211\u4eec\u5b8c\u6210\u5982\u4e0b\u5de5\u4f5c\uff1a",date:"2025-09-15T14:44:14.441Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:16.265,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.3\u3000\u6709\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u8bbe\u5907\u9a71\u52a8",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.3\u3000\u6709\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u8bbe\u5907\u9a71\u52a8"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.1\u3000\u5e76\u53d1\u4e0e\u7ade\u6001",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.1\u3000\u5e76\u53d1\u4e0e\u7ade\u6001"}},l={authorsImageUrls:[]},u=[],a={toc:u};function g(n){var t=n.components,c=(0,i.Z)(n,o);return(0,r.kt)("wrapper",(0,e.Z)({},a,c,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u8bb8\u591aSoC\u5185\u90e8\u90fd\u5305\u542bpin\u63a7\u5236\u5668\uff0c\u901a\u8fc7pin\u63a7\u5236\u5668\u7684\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2a\u6216\u8005\u4e00\u7ec4\u5f15\u811a\u7684\u529f\u80fd\u548c\u7279\u6027\u3002\u5728\u8f6f\u4ef6\u4e0a\uff0cLinux\u5185\u6838\u7684pinctrl\u9a71\u52a8\u53ef\u4ee5\u64cd\u4f5cpin\u63a7\u5236\u5668\u4e3a\u6211\u4eec\u5b8c\u6210\u5982\u4e0b\u5de5\u4f5c\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\xb7\u679a\u4e3e\u5e76\u4e14\u547d\u540dpin\u63a7\u5236\u5668\u53ef\u63a7\u5236\u7684\u6240\u6709\u5f15\u811a\uff1b"),(0,r.kt)("li",{parentName:"ul"},"\xb7\u63d0\u4f9b\u5f15\u811a\u590d\u7528\u7684\u80fd\u529b\uff1b"),(0,r.kt)("li",{parentName:"ul"},"\xb7\u63d0\u4f9b\u914d\u7f6e\u5f15\u811a\u7684\u80fd\u529b\uff0c\u5982\u9a71\u52a8\u80fd\u529b\u3001\u4e0a\u62c9\u4e0b\u62c9\u3001\u5f00\u6f0f\uff08Open Drain\uff09\u7b49\u3002")),(0,r.kt)("h1",{id:"1pinctrl\u548c\u5f15\u811a"},"1.pinctrl\u548c\u5f15\u811a"),(0,r.kt)("p",null,"\u5728\u7279\u5b9aSoC\u7684pinctrl\u9a71\u52a8\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u5f15\u811a\u3002\u5047\u8bbe\u6709\u4e00\u4e2aPGA\u5c01\u88c5\u7684\u82af\u7247\u7684\u5f15\u811a\u6392\u5e03\u5982\u56fe20.9\u6240\u793a\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"1747320833402",src:p(12128).Z,width:"324",height:"307"})),(0,r.kt)("p",null,"\u56fe20.9\u3000\u4e00\u4e2aPGA\u5c01\u88c5\u7684\u82af\u7247\u7684\u5f15\u811a\u6392\u5e03"),(0,r.kt)("p",null,"\u5728pinctrl\u9a71\u52a8\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u9700\u8981\u5411pinctrl\u5b50\u7cfb\u7edf\u6ce8\u518c\u4e00\u4e2apinctrl_desc\u63cf\u8ff0\u7b26\uff0c\u8be5\u63cf\u8ff0\u7b26\u7684pins\u6210\u5458\u4e2d\u5305\u542b\u6240\u6709\u5f15\u811a\u7684\u5217\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u6e05\u535520.16\u7684\u65b9\u6cd5\u6765\u6ce8\u518c\u8fd9\u4e2apin\u63a7\u5236\u5668\u5e76\u547d\u540d\u5b83\u7684\u6240\u6709\u5f15\u811a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.16\u3000pinctrl\u5f15\u811a\u63cf\u8ff0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#include <linux/pinctrl/pinctrl.h>\n 2\n 3const struct pinctrl_pin_desc foo_pins[] = {\n 4      PINCTRL_PIN(0, "A8"),\n 5      PINCTRL_PIN(1, "B8"),\n 6      PINCTRL_PIN(2, "C8"),\n 7      ...\n 8      PINCTRL_PIN(61, "F1"),\n 9      PINCTRL_PIN(62, "G1"),\n10      PINCTRL_PIN(63, "H1"),\n11};\n12\n13static struct pinctrl_desc foo_desc = {\n14        .name = "foo",\n15        .pins = foo_pins,\n16        .npins = ARRAY_SIZE(foo_pins),\n17        .maxpin = 63,\n18        .owner = THIS_MODULE,\n19};\n20\n21int __init foo_probe(void)\n22{\n23        struct pinctrl_dev *pctl;\n24\n25        pctl = pinctrl_register(&foo_desc, <PARENT>, NULL);\n26        if (IS_ERR(pctl))\n27                pr_err("could not register foo pin driver\\n");\n28}\n')),(0,r.kt)("h1",{id:"2\u5f15\u811a\u7ec4pin-group"},"2.\u5f15\u811a\u7ec4\uff08Pin Group\uff09"),(0,r.kt)("p",null,"\u5728pinctrl\u5b50\u7cfb\u7edf\u4e2d\uff0c\u652f\u6301\u5c06\u4e00\u7ec4\u5f15\u811a\u7ed1\u5b9a\u4e3a\u540c\u4e00\u529f\u80fd\u3002\u5047\u8bbe{0\uff0c8\uff0c16\uff0c24}\u8fd9\u4e00\u7ec4\u5f15\u811a\u627f\u62c5SPI\u7684\u529f\u80fd\uff0c\u800c{24\uff0c25}\u8fd9\u4e00\u7ec4\u5f15\u811a\u627f\u62c5I2 C\u63a5\u53e3\u529f\u80fd\u3002\u5728\u9a71\u52a8\u7684\u4ee3\u7801\u4e2d\uff0c\u9700\u8981\u4f53\u73b0\u8fd9\u4e2a\u5206\u7ec4\u5173\u7cfb\uff0c\u5e76\u4e14\u4e3a\u8fd9\u4e9b\u5206\u7ec4\u5b9e\u73b0pinctrl_ops\u7684\u6210\u5458\u51fd\u6570get_groups_count\uff08\uff09\u3001get_group_name\uff08\uff09\u548cget_group_pins\uff08\uff09\uff0c\u5c06pinctrl_ops\u586b\u5145\u5230\u524d\u6587pinctrl_desc\u7684\u5b9e\u4f8bfoo_desc\u4e2d\uff0c\u5982\u4ee3\u7801\u6e05\u535520.17\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.17\u3000pinctrl\u9a71\u52a8\u5bf9\u5f15\u811a\u5206\u7ec4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#include <linux/pinctrl/pinctrl.h>\n 2\n 3struct foo_group {\n 4        const char *name;\n 5        const unsigned int *pins;\n 6        const unsigned num_pins;\n 7};\n 8\n 9static const unsigned int spi0_pins[] = { 0, 8, 16, 24 };\n10static const unsigned int i2c0_pins[] = { 24, 25 };\n11\n12static const struct foo_group foo_groups[] = {\n13        {\n14                .name = "spi0_grp",\n15                .pins = spi0_pins,\n16                .num_pins = ARRAY_SIZE(spi0_pins),\n17        },\n18        {\n19                .name = "i2c0_grp",\n20                .pins = i2c0_pins,\n21                .num_pins = ARRAY_SIZE(i2c0_pins),\n22        },\n23};\n24\n25\n26static int foo_get_groups_count(struct pinctrl_dev *pctldev)\n27{\n28        return ARRAY_SIZE(foo_groups);\n29}\n30\n31static const char *foo_get_group_name(struct pinctrl_dev *pctldev,\n32                                       unsigned selector)\n33{\n34        return foo_groups[selector].name;\n35}\n36\n37static int foo_get_group_pins(struct pinctrl_dev *pctldev, unsigned selector,\n38                              unsigned ** const pins,\n39                              unsigned * const num_pins)\n40{\n41        *pins = (unsigned *) foo_groups[selector].pins;\n42        *num_pins = foo_groups[selector].num_pins;\n43        return 0;\n44}\n45\n46static struct pinctrl_ops foo_pctrl_ops = {\n47        .get_groups_count = foo_get_groups_count,\n48        .get_group_name = foo_get_group_name,\n49        .get_group_pins = foo_get_group_pins,\n50};\n51\n52\n53static struct pinctrl_desc foo_desc = {\n54       ...\n55       .pctlops = &foo_pctrl_ops,\n56};\n')),(0,r.kt)("p",null,"get_groups_count\uff08\uff09\u6210\u5458\u51fd\u6570\u7528\u4e8e\u544a\u77e5pinctrl\u5b50\u7cfb\u7edf\u8be5SoC\u4e2d\u5408\u6cd5\u7684\u88ab\u9009\u5f15\u811a\u7ec4\u6709\u591a\u5c11\u4e2a\uff0c\u800cget_group_name\uff08\uff09\u5219\u63d0\u4f9b\u5f15\u811a\u7ec4\u7684\u540d\u5b57\uff0cget_group_pins\uff08\uff09\u63d0\u4f9b\u5f15\u811a\u7ec4\u7684\u5f15\u811a\u8868\u3002\u5728\u8bbe\u5907\u9a71\u52a8\u8c03\u7528pinctrl\u901a\u7528API\u4f7f\u80fd\u67d0\u4e00\u7ec4\u5f15\u811a\u7684\u5bf9\u5e94\u529f\u80fd\u65f6\uff0cpinctrl\u5b50\u7cfb\u7edf\u7684\u6838\u5fc3\u5c42\u4f1a\u8c03\u7528\u4e0a\u8ff0\u56de\u8c03\u51fd\u6570\u3002"),(0,r.kt)("h1",{id:"3\u5f15\u811a\u914d\u7f6e"},"3.\u5f15\u811a\u914d\u7f6e"),(0,r.kt)("p",null,"\u8bbe\u5907\u9a71\u52a8\u6709\u65f6\u5019\u9700\u8981\u914d\u7f6e\u5f15\u811a\uff0c\u8b6c\u5982\u53ef\u80fd\u628a\u5f15\u811a\u8bbe\u7f6e\u4e3a\u9ad8\u963b\u6216\u8005\u4e09\u6001\uff08\u8fbe\u5230\u7c7b\u4f3c\u65ad\u8fde\u5f15\u811a\u7684\u6548\u679c\uff09\uff0c\u6216\u901a\u8fc7\u67d0\u963b\u503c\u5c06\u5f15\u811a\u4e0a\u62c9/\u4e0b\u62c9\u4ee5\u786e\u4fdd\u9ed8\u8ba4\u72b6\u6001\u4e0b\u5f15\u811a\u7684\u7535\u5e73\u72b6\u6001\u3002\u5728\u9a71\u52a8\u4e2d\u53ef\u4ee5\u81ea\u5b9a\u4e49\u76f8\u5e94\u677f\u7ea7\u5f15\u811a\u914d\u7f6eAPI\u7684\u7ec6\u8282\uff0c\u8b6c\u5982\u67d0\u8bbe\u5907\u9a71\u52a8\u53ef\u80fd\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5c06\u67d0\u5f15\u811a\u4e0a\u62c9\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#include <linux/pinctrl/consumer.h>\nret = pin_config_set("foo-dev", "FOO_GPIO_PIN", PLATFORM_X_PULL_UP);\n')),(0,r.kt)("p",null,"\u5176\u4e2d\u7684PLATFORM_X_PULL_UP\u7531\u7279\u5b9a\u7684pinctrl\u9a71\u52a8\u5b9a\u4e49\u3002\u5728\u7279\u5b9a\u7684pinctrl\u9a71\u52a8\u4e2d\uff0c\u9700\u8981\u5b9e\u73b0\u5b8c\u6210\u8fd9\u4e9b\u914d\u7f6e\u6240\u9700\u8981\u7684\u56de\u8c03\u51fd\u6570\uff08pinctrl_desc\u7684confops\u6210\u5458\u51fd\u6570\uff09\uff0c\u5982\u4ee3\u7801\u6e05\u535520.18\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.18\u3000\u5f15\u811a\u7684\u914d\u7f6e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#include <linux/pinctrl/pinctrl.h>\n 2#include <linux/pinctrl/pinconf.h>\n 3#include "platform_x_pindefs.h"\n 4\n 5static int foo_pin_config_get(struct pinctrl_dev *pctldev,\n 6                    unsigned offset,\n 7                    unsigned long *config)\n 8{\n 9        struct my_conftype conf;\n10\n11        ... Find setting for pin @ offset ...\n12\n13        *config = (unsigned long) conf;\n14}\n15\n16static int foo_pin_config_set(struct pinctrl_dev *pctldev,\n17                    unsigned offset,\n18                    unsigned long config)\n19{\n20        struct my_conftype *conf = (struct my_conftype *) config;\n21\n22        switch (conf) {\n23                case PLATFORM_X_PULL_UP:\n24                ...\n25                }\n26        }\n27}\n28\n29static int foo_pin_config_group_get (struct pinctrl_dev *pctldev,\n30                    unsigned selector,\n31                    unsigned long *config)\n32{\n33       ...\n34}\n35\n36static int foo_pin_config_group_set (struct pinctrl_dev *pctldev,\n37                    unsigned selector,\n38                    unsigned long config)\n39{\n40       ...\n41}\n42\n43static struct pinconf_ops foo_pconf_ops = {\n44        .pin_config_get = foo_pin_config_get,\n45        .pin_config_set = foo_pin_config_set,\n46        .pin_config_group_get = foo_pin_config_group_get,\n47        .pin_config_group_set = foo_pin_config_group_set,\n48};\n49\n50/* Pin config operations are handled by some pin controller */\n51static struct pinctrl_desc foo_desc = {\n52        ...\n53        .confops = &foo_pconf_ops,\n54};\n')),(0,r.kt)("p",null,"\u5176\u4e2d\u7684pin_config_group_get\uff08\uff09\u3001pin_config_group_set\uff08\uff09\u9488\u5bf9\u7684\u662f\u53ef\u540c\u65f6\u914d\u7f6e\u4e00\u4e2a\u5f15\u811a\u7ec4\u7684\u72b6\u6001\u60c5\u51b5\uff0c\u800cpin_config_get\uff08\uff09\u3001pin_config_set\uff08\uff09\u9488\u5bf9\u7684\u5219\u662f\u5355\u4e2a\u5f15\u811a\u7684\u914d\u7f6e\u3002"),(0,r.kt)("h1",{id:"4\u4e0egpio\u5b50\u7cfb\u7edf\u7684\u4ea4\u4e92"},"4.\u4e0eGPIO\u5b50\u7cfb\u7edf\u7684\u4ea4\u4e92"),(0,r.kt)("p",null,"pinctrl\u9a71\u52a8\u6240\u8986\u76d6\u7684\u5f15\u811a\u53ef\u540c\u65f6\u4f5c\u4e3aGPIO\u7528\uff0c\u5185\u6838\u7684GPIO\u5b50\u7cfb\u7edf\u548cpinctrl\u5b50\u7cfb\u7edf\u672c\u6765\u662f\u5e76\u884c\u5de5\u4f5c\u7684\uff0c\u4f46\u662f\u6709\u65f6\u5019\u9700\u8981\u4ea4\u53c9\u6620\u5c04\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5728pinctrl\u9a71\u52a8\u4e2d\u544a\u77e5pinctrl\u5b50\u7cfb\u7edf\u6838\u5fc3\u5c42GPIO\u4e0e\u5e95\u5c42pinctrl\u9a71\u52a8\u6240\u7ba1\u7406\u7684\u5f15\u811a\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5047\u8bbepinctrl\u9a71\u52a8\u4e2d\u5b9a\u4e49\u7684\u5f15\u811a32~47\u4e0egpio_chip\u5b9e\u4f8bchip_a\u7684GPIO\u5bf9\u5e94\uff0c\u5f15\u811a64~71\u4e0egpio_chip\u5b9e\u4f8bchip_b\u7684GPIO\u5bf9\u5e94\uff0c\u5373\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"chip a:\n  - GPIO range : [32 .. 47]\n  - pin range  : [32 .. 47]\nchip b:\n  - GPIO range : [48 .. 55]\n  - pin range  : [64 .. 71]\n")),(0,r.kt)("p",null,"\u5219\u5728\u7279\u5b9apinctrl\u9a71\u52a8\u4e2d\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u6ce8\u518c\u4e24\u4e2aGPIO\u8303\u56f4\uff0c\u5982\u4ee3\u7801\u6e05\u535520.19\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.19\u3000GPIO\u4e0epinctrl\u5f15\u811a\u7684\u6620\u5c04"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1struct gpio_chip chip_a;\n 2struct gpio_chip chip_b;\n 3\n 4static struct pinctrl_gpio_range gpio_range_a = {\n 5        .name = "chip a",\n 6        .id = 0,\n 7        .base = 32,\n 8        .pin_base = 32,\n 9        .npins = 16,\n10        .gc = &chip_a;\n11};\n12\n13static struct pinctrl_gpio_range gpio_range_b = {\n14        .name = "chip b",\n15        .id = 0,\n16        .base = 48,\n17        .pin_base = 64,\n18        .npins = 8,\n19        .gc = &chip_b;\n20};\n21\n22{\n23        struct pinctrl_dev *pctl;\n24        ...\n25        pinctrl_add_gpio_range(pctl, &gpio_range_a);\n26        pinctrl_add_gpio_range(pctl, &gpio_range_b);\n27}\n')),(0,r.kt)("p",null,"\u5728\u57fa\u4e8e\u5185\u6838gpiolib\u7684GPIO\u9a71\u52a8\u4e2d\uff0c\u82e5\u8bbe\u5907\u9a71\u52a8\u9700\u8fdb\u884cGPIO\u7533\u8bf7gpio_request\uff08\uff09\u548c\u91ca\u653egpio_free\uff08\uff09\uff0cGPIO\u9a71\u52a8\u5219\u4f1a\u8c03\u7528pinctrl\u5b50\u7cfb\u7edf\u4e2d\u7684pinctrl_request_gpio\uff08\uff09\u548cpinctrl_free_gpio\uff08\uff09\u901a\u7528API\uff0cpinctrl\u5b50\u7cfb\u7edf\u4f1a\u67e5\u627e\u7533\u8bf7\u7684GPIO\u548c\u5f15\u811a\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5e76\u786e\u8ba4\u5f15\u811a\u662f\u5426\u88ab\u5176\u4ed6\u590d\u7528\u529f\u80fd\u6240\u5360\u7528\u3002\u4e0epinctrl\u5b50\u7cfb\u7edf\u901a\u7528\u5c42pinctrl_request_gpio\uff08\uff09\u548cpinctrl_free_gpio\uff08\uff09API\u5bf9\u5e94\uff0c\u5728\u5e95\u5c42\u7684\u5177\u4f53pinctrl\u9a71\u52a8\u4e2d\uff0c\u9700\u8981\u5b9e\u73b0pinmux_ops\u7ed3\u6784\u4f53\u7684gpio_request_enable\uff08\uff09\u548cgpio_disable_free\uff08\uff09\u6210\u5458\u51fd\u6570\u3002"),(0,r.kt)("h1",{id:"5\u5f15\u811a\u590d\u7528pinmux"},"5.\u5f15\u811a\u590d\u7528\uff08pinmux\uff09"),(0,r.kt)("p",null,"\u5728pinctrl\u9a71\u52a8\u4e2d\u53ef\u5904\u7406\u5f15\u811a\u590d\u7528\uff0c\u5b83\u5b9a\u4e49\u4e86\u529f\u80fd\uff08FUNCTIONS\uff09\uff0c\u9a71\u52a8\u53ef\u4ee5\u8bbe\u7f6e\u67d0\u529f\u80fd\u7684\u4f7f\u80fd\u6216\u8005\u7981\u6b62\u3002\u5404\u4e2a\u529f\u80fd\u8054\u5408\u8d77\u6765\u7ec4\u6210\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8b6c\u5982{spi0\uff0ci2c0\uff0cmmc0}\u5c31\u63cf\u8ff0\u4e863\u4e2a\u4e0d\u540c\u7684\u529f\u80fd\u3002"),(0,r.kt)("p",null,"\u4e00\u4e2a\u7279\u5b9a\u7684\u529f\u80fd\u603b\u662f\u8981\u6c42\u7531\u4e00\u4e9b\u5f15\u811a\u7ec4\u6765\u5b8c\u6210\uff0c\u5f15\u811a\u7ec4\u7684\u6570\u91cf\u53ef\u4ee5\u4e3a1\u4e2a\u6216\u8005\u591a\u4e2a\u3002\u5047\u8bbe\u5bf9\u524d\u6587\u6240\u63cf\u8ff0\u7684PGA\u5c01\u88c5\u7684SoC\u800c\u8a00\uff0c\u5f15\u811a\u5206\u7ec4\u5982\u56fe20.10\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u5047\u8bbeI2 C\u529f\u80fd\u7531{A5\uff0cB5}\u5f15\u811a\u7ec4\u6210\uff0c\u800c\u5728\u5b9a\u4e49\u5f15\u811a\u63cf\u8ff0\u7684pinctrl_pin_desc\u7ed3\u6784\u4f53\u5b9e\u4f8bfoo_pins\u7684\u65f6\u5019\uff0c\u5c06\u5b83\u4eec\u7684\u5e8f\u53f7\u5b9a\u4e49\u4e3a\u4e86{24\uff0c25}\uff1b\u800cSPI\u529f\u80fd\u5219\u53ef\u4ee5\u7531{A8\uff0cA7\uff0cA6\uff0cA5}\u548c{G4\uff0cG3\uff0cG2\uff0cG1}\uff0c\u5373{0\uff0c8\uff0c16\uff0c24}\u548c{38\uff0c46\uff0c54\uff0c62}\u4e24\u4e2a\u5f15\u811a\u7ec4\u5b8c\u6210\uff08\u6ce8\u610f\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u5f15\u811a\u7ec4\u7684\u540d\u5b57\u4e0d\u4f1a\u91cd\u53e0\uff09\u3002"),(0,r.kt)("p",null,"\u636e\u6b64\uff0c\u7531\u529f\u80fd\u548c\u5f15\u811a\u7ec4\u7684\u7ec4\u5408\u5c31\u53ef\u4ee5\u51b3\u5b9a\u4e00\u7ec4\u5f15\u811a\u5728\u7cfb\u7edf\u91cc\u7684\u4f5c\u7528\uff0c\u56e0\u6b64\u5728\u8bbe\u7f6e\u67d0\u7ec4\u5f15\u811a\u7684\u4f5c\u7528\u65f6\uff0cpinctrl\u7684\u6838\u5fc3\u5c42\u4f1a\u5c06\u529f\u80fd\u7684\u5e8f\u53f7\u4ee5\u53ca\u5f15\u811a\u7ec4\u7684\u5e8f\u53f7\u4f20\u9012\u7ed9\u5e95\u5c42pinctrl\u9a71\u52a8\u4e2d\u76f8\u5173\u7684\u56de\u8c03\u51fd\u6570\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"1747321253179",src:p(60562).Z,width:"691",height:"817"})),(0,r.kt)("p",null,"\u56fe20.10\u3000\u9488\u5bf9PGA\u5c01\u88c5\u7684SoC\u7684\u5f15\u811a\u5206\u7ec4"),(0,r.kt)("p",null,"\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u9a71\u52a8\u6216\u677f\u7ea7\u4ee3\u7801\u8c03\u7528pinmux\u76f8\u5173\u7684API\u83b7\u53d6\u5f15\u811a\u540e\uff0c\u4f1a\u5f62\u6210\u4e00\u4e2apinctrl\u3001\u4f7f\u7528\u5f15\u811a\u7684\u8bbe\u5907\u3001\u529f\u80fd\u3001\u5f15\u811a\u7ec4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5047\u8bbe\u5728\u67d0\u7535\u8def\u677f\u4e0a\uff0c\u5c06\u8ba9spi0\u8bbe\u5907\u4f7f\u7528pinctrl0\u7684fspi0\u529f\u80fd\u4ee5\u53cagspi0\u5f15\u811a\u7ec4\uff0c\u8ba9i2c0\u8bbe\u5907\u4f7f\u7528pinctrl0\u7684fi2c0\u529f\u80fd\u548cgi2c0\u5f15\u811a\u7ec4\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u5982\u4e0b\u7684\u6620\u5c04\u5173\u7cfb\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  {"map-spi0", spi0, pinctrl0, fspi0, gspi0},\n  {"map-i2c0", i2c0, pinctrl0, fi2c0, gi2c0}\n}\n')),(0,r.kt)("p",null,"pinctrl\u5b50\u7cfb\u7edf\u7684\u6838\u5fc3\u4f1a\u4fdd\u8bc1\u6bcf\u4e2a\u5f15\u811a\u7684\u6392\u4ed6\u6027\uff0c\u56e0\u6b64\u4e00\u4e2a\u5f15\u811a\u5982\u679c\u5df2\u7ecf\u88ab\u67d0\u8bbe\u5907\u7528\u6389\u4e86\uff0c\u800c\u5176\u4ed6\u7684\u8bbe\u5907\u53c8\u7533\u8bf7\u8be5\u5f15\u811a\u4ee5\u884c\u4f7f\u5176\u4ed6\u7684\u529f\u80fd\u6216GPIO\uff0c\u5219pinctrl\u6838\u5fc3\u5c42\u4f1a\u8ba9\u8be5\u6b21\u7533\u8bf7\u5931\u8d25\u3002"),(0,r.kt)("p",null,"\u5728\u7279\u5b9apinctrl\u9a71\u52a8\u4e2dpinmux\u76f8\u5173\u7684\u4ee3\u7801\u4e3b\u8981\u5904\u7406\u5982\u4f55\u4f7f\u80fd/\u7981\u6b62\u67d0\u4e00{\u529f\u80fd\uff0c\u5f15\u811a\u7ec4}\u7684\u7ec4\u5408\uff0c\u8b6c\u5982\uff0c\u5f53spi0\u8bbe\u5907\u7533\u8bf7pinctrl0\u7684fspi0\u529f\u80fd\u548cgspi0\u5f15\u811a\u7ec4\u4ee5\u4fbf\u5c06gspi0\u5f15\u811a\u7ec4\u914d\u7f6e\u4e3aSPI\u63a5\u53e3\u65f6\uff0c\u76f8\u5173\u7684\u56de\u8c03\u51fd\u6570\u88ab\u7ec4\u7ec7\u8fdb\u4e00\u4e2apinmux_ops\u7ed3\u6784\u4f53\u4e2d\uff0c\u800c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u6700\u7ec8\u6210\u4e3a\u524d\u6587pinctrl_desc\u7684pmxops\u6210\u5458\uff0c\u5982\u4ee3\u7801\u6e05\u535520.20\u6240\u793a"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.20\u3000pinmux\u7684\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  1#include <linux/pinctrl/pinctrl.h>\n  2#include <linux/pinctrl/pinmux.h>\n  3\n  4struct foo_group {\n  5        const char *name;\n  6        const unsigned int *pins;\n  7        const unsigned num_pins;\n  8};\n  9\n 10static const unsigned spi0_0_pins[] = { 0, 8, 16, 24 };\n 11static const unsigned spi0_1_pins[] = { 38, 46, 54, 62 };\n 12static const unsigned i2c0_pins[] = { 24, 25 };\n 13static const unsigned mmc0_1_pins[] = { 56, 57 };\n 14static const unsigned mmc0_2_pins[] = { 58, 59 };\n 15static const unsigned mmc0_3_pins[] = { 60, 61, 62, 63 };\n 16\n 17static const struct foo_group foo_groups[] = {\n 18        {\n 19                .name = "spi0_0_grp",\n 20                .pins = spi0_0_pins,\n 21                .num_pins = ARRAY_SIZE(spi0_0_pins),\n 22        },\n 23        {\n 24                .name = "spi0_1_grp",\n 25                .pins = spi0_1_pins,\n 26                .num_pins = ARRAY_SIZE(spi0_1_pins),\n 27        },\n 28        {\n 29                .name = "i2c0_grp",\n 30                .pins = i2c0_pins,\n 31                .num_pins = ARRAY_SIZE(i2c0_pins),\n 32        },\n 33        {\n 34                .name = "mmc0_1_grp",\n 35                .pins = mmc0_1_pins,\n 36                .num_pins = ARRAY_SIZE(mmc0_1_pins),\n 37        },\n 38        {\n 39                .name = "mmc0_2_grp",\n 40                .pins = mmc0_2_pins,\n 41                .num_pins = ARRAY_SIZE(mmc0_2_pins),\n 42        },\n 43        {\n 44                .name = "mmc0_3_grp",\n 45                .pins = mmc0_3_pins,\n 46                .num_pins = ARRAY_SIZE(mmc0_3_pins),\n 47        },\n 48};\n 49\n 50\n 51static int foo_get_groups_count(struct pinctrl_dev *pctldev)\n 52{\n 53        return ARRAY_SIZE(foo_groups);\n 54}\n 55\n 56static const char *foo_get_group_name(struct pinctrl_dev *pctldev,\n 57                                       unsigned selector)\n 58{\n 59        return foo_groups[selector].name;\n 60}\n 61\n 62static int foo_get_group_pins(struct pinctrl_dev *pctldev, unsigned selector,\n 63                              unsigned ** const pins,\n 64                              unsigned * const num_pins)\n 65{\n 66        *pins = (unsigned *) foo_groups[selector].pins;\n 67        *num_pins = foo_groups[selector].num_pins;\n 68        return 0;\n 69}\n 70\n 71static struct pinctrl_ops foo_pctrl_ops = {\n 72        .get_groups_count = foo_get_groups_count,\n 73        .get_group_name = foo_get_group_name,\n 74        .get_group_pins = foo_get_group_pins,\n 75};\n 76\n 77struct foo_pmx_func {\n 78        const char *name;\n 79        const char * const *groups;\n 80        const unsigned num_groups;\n 81};\n 82\n 83static const char * const spi0_groups[] = { "spi0_0_grp", "spi0_1_grp" };\n 84static const char * const i2c0_groups[] = { "i2c0_grp" };\n 85static const char * const mmc0_groups[] = { "mmc0_1_grp", "mmc0_2_grp",\n 86                                        "mmc0_3_grp" };\n 87\n 88static const struct foo_pmx_func foo_functions[] = {\n 89        {\n 90                .name = "spi0",\n 91                .groups = spi0_groups,\n 92                .num_groups = ARRAY_SIZE(spi0_groups),\n 93        },\n 94        {\n 95                .name = "i2c0",\n 96                .groups = i2c0_groups,\n 97                .num_groups = ARRAY_SIZE(i2c0_groups),\n 98        },\n 99        {\n100                .name = "mmc0",\n101                .groups = mmc0_groups,\n102                .num_groups = ARRAY_SIZE(mmc0_groups),\n103        },\n104};\n105\n106int foo_get_functions_count(struct pinctrl_dev *pctldev)\n107{\n108        return ARRAY_SIZE(foo_functions);\n109}\n110\n111const char *foo_get_fname(struct pinctrl_dev *pctldev, unsigned selector)\n112{\n113        return foo_functions[selector].name;\n114}\n115\n116static int foo_get_groups(struct pinctrl_dev *pctldev, unsigned selector,\n117                          const char * const **groups,\n118                          unsigned * const num_groups)\n119{\n120        *groups = foo_functions[selector].groups;\n121        *num_groups = foo_functions[selector].num_groups;\n122        return 0;\n123}\n124\n125int foo_enable(struct pinctrl_dev *pctldev, unsigned selector,\n126                unsigned group)\n127{\n128        u8 regbit = (1 << selector + group);\n129\n130        writeb((readb(MUX)|regbit), MUX)\n131        return 0;\n132}\n133\n134void foo_disable(struct pinctrl_dev *pctldev, unsigned selector,\n135                unsigned group)\n136{\n137        u8 regbit = (1 << selector + group);\n138\n139        writeb((readb(MUX) & ~(regbit)), MUX)\n140        return 0;\n141}\n142\n143struct pinmux_ops foo_pmxops = {\n144        .get_functions_count = foo_get_functions_count,\n145        .get_function_name = foo_get_fname,\n146        .get_function_groups = foo_get_groups,\n147        .enable = foo_enable,\n148        .disable = foo_disable,\n149};\n150\n151/* Pinmux operations are handled by some pin controller */\n152static struct pinctrl_desc foo_desc = {\n153        ...\n154        .pctlops = &foo_pctrl_ops,\n155        .pmxops = &foo_pmxops,\n156};\n')),(0,r.kt)("p",null,"\u5177\u4f53\u7684pinctrl\u3001\u4f7f\u7528\u5f15\u811a\u7684\u8bbe\u5907\u3001\u529f\u80fd\u3001\u5f15\u811a\u7ec4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u53ef\u4ee5\u5728\u677f\u6587\u4ef6\u4e2d\u901a\u8fc7\u5b9a\u4e49pinctrl_map\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u6765\u5c55\u5f00\uff0c\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'static struct pinctrl_map __initdata mapping[] = {\n   PIN_MAP_MUX_GROUP("foo-i2c.o", PINCTRL_STATE_DEFAULT, "pinctrl-foo", NULL, "i2c0"),\n};\n')),(0,r.kt)("p",null,"\u53c8\u7531\u4e8e1\u4e2a\u529f\u80fd\u53ef\u7531\u4e24\u4e2a\u4e0d\u540c\u7684\u5f15\u811a\u7ec4\u5b9e\u73b0\uff0c\u6240\u4ee5\u5bf9\u4e8e\u540c1\u4e2a\u529f\u80fd\u53ef\u80fd\u5f62\u6210\u6709\u4e24\u4e2a\u53ef\u9009\u5f15\u811a\u7ec4\u7684pinctrl_map\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'static struct pinctrl_map __initdata mapping[] = {\n        PIN_MAP_MUX_GROUP("foo-spi.0", "spi0-pos-A", "pinctrl-foo", "spi0_0_grp", "spi0"),\n        PIN_MAP_MUX_GROUP("foo-spi.0", "spi0-pos-B", "pinctrl-foo", "spi0_1_grp", "spi0"),\n};\n')),(0,r.kt)("p",null,"\u5176\u4e2d\u8c03\u7528\u7684PIN_MAP_MUX_GROUP\u662f\u4e00\u4e2a\u5feb\u6377\u5b8f\uff0c\u7528\u4e8e\u8d4b\u503cpinctrl_map\u7684\u5404\u4e2a\u6210\u5458\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#define PIN_MAP_MUX_GROUP(dev, state, pinctrl, grp, func)               \\\n        {                                                               \\\n                .dev_name = dev,                                        \\\n                .name = state,                                          \\\n                .type = PIN_MAP_TYPE_MUX_GROUP,                         \\\n                .ctrl_dev_name = pinctrl,                               \\\n                .data.mux = {                                           \\\n                        .group = grp,                                   \\\n                        .function = func,                               \\\n                },                                                      \\\n        }\n")),(0,r.kt)("p",null,"\u5f53\u7136\uff0c\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u6700\u597d\u662f\u5728\u8bbe\u5907\u6811\u4e2d\u901a\u8fc7\u8282\u70b9\u7684\u5c5e\u6027\u8fdb\u884c\uff0c\u5177\u4f53\u7684\u8282\u70b9\u5c5e\u6027\u7684\u5b9a\u4e49\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684pinctrl\u9a71\u52a8\uff0c\u6700\u7ec8\u5728pinctrl\u9a71\u52a8\u4e2d\u901a\u8fc7pinctrl_ops\u7ed3\u6784\u4f53\u7684.dt_node_to_map\uff08\uff09\u6210\u5458\u51fd\u6570\u8bfb\u51fa\u5c5e\u6027\u5e76\u5efa\u7acb\u6620\u5c04\u8868\u3002"),(0,r.kt)("p",null,"\u5728\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684API\u53bb\u67e5\u627e\u5e76\u8bbe\u7f6e\u4f4d\u7f6eA\u7684\u5f15\u811a\u7ec4\u4ee5\u884c\u9a76SPI\u63a5\u53e3\u7684\u529f\u80fd\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'p = devm_pinctrl_get(dev);\ns = pinctrl_lookup_state(p, "spi0-pos-A ");\nret = pinctrl_select_state(p, s)\n')),(0,r.kt)("p",null,"\u6216\u8005\u53ef\u4ee5\u66f4\u52a0\u7b80\u5355\u5730\u4f7f\u7528\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'p = devm_pinctrl_get_select(dev, "spi0-pos-A");\n')),(0,r.kt)("p",null,"\u82e5\u60f3\u5728\u8fd0\u884c\u65f6\u5207\u6362\u4f4d\u7f6eA\u548cB\u7684\u5f15\u811a\u7ec4\u4ee5\u884c\u4f7fSPI\u7684\u63a5\u53e3\u529f\u80fd\uff0c\u4ee3\u7801\u7ed3\u6784\u7c7b\u4f3c\u6e05\u535520.21\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.21\u3000pinctrl_lookup_state\uff08\uff09\u548cpinctrl_select_stat\uff08\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1foo_probe()\n 2{\n 3        /* Setup */\n 4        p = devm_pinctrl_get(&device);\n 5        if (IS_ERR(p))\n 6                ...\n 7\n 8        s1 = pinctrl_lookup_state(foo->p, " spi0-pos-A");\n 9        if (IS_ERR(s1))\n10                ...\n11\n12        s2 = pinctrl_lookup_state(foo->p, " spi0-pos-B");\n13        if (IS_ERR(s2))\n14                ...\n15}\n16\n17foo_switch()\n18{\n19        /* Enable on position A */\n20        ret = pinctrl_select_state(s1);\n21        if (ret < 0)\n22            ...\n23\n24        ...\n25\n26        /* Enable on position B */\n27        ret = pinctrl_select_state(s2);\n28        if (ret < 0)\n29            ...\n30\n31        ...\n32}\n')),(0,r.kt)("p",null,'\u5bf9\u4e8e"default"\u72b6\u6001\u4e0b\u7684\u5f15\u811a\u914d\u7f6e\uff0c\u9a71\u52a8\u4e00\u822c\u4e0d\u9700\u8981\u5b8c\u6210devm_pinctrl_get_select\uff08dev\uff0c"default"\uff09\u7684\u8c03\u7528\u3002\u8b6c\u5982\u5bf9\u4e8earch/arm/boot/dts/prima2-evb.dts\u4e2d\u7684\u5982\u4e0b\u5f15\u811a\u7ec4\uff1a'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'peri-iobg {\n        uart@b0060000 {\n                pinctrl-names = "default";\n                pinctrl-0 = <&uart1_pins_a>;\n        };\n        spi@b00d0000 {\n                pinctrl-names = "default";\n                pinctrl-0 = <&spi0_pins_a>;\n        };\n        spi@b0170000 {\n                pinctrl-names = "default";\n                pinctrl-0 = <&spi1_pins_a>;\n        };\n};\n')),(0,r.kt)("p",null,'\u7531\u4e8epinctrl-names\u90fd\u662f"default"\u7684\uff0c\u6240\u4ee5pinctrl\u6838\u5b9e\u9645\u4f1a\u81ea\u52a8\u505a\u7c7b\u4f3cdevm_pinctrl_get_select\uff08dev\uff0c"default"\uff09\u7684\u64cd\u4f5c\u3002'))}g.isMDXComponent=!0},12128:function(n,t,p){t.Z=p.p+"assets/images/1747320833402-01ff514b1effa66b2838377d054bdc45.png"},60562:function(n,t,p){t.Z=p.p+"assets/images/1747321253179-fc8d57b8c203476cde01ca3923019d97.png"}}]);