"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[99521],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return s}});var o=t(67294);function l(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){l(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function f(n,e){if(null==n)return{};var t,o,l=function(n,e){if(null==n)return{};var t,o,l={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var a=o.createContext({}),p=function(n){var e=o.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=p(n.components);return o.createElement(a.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,l=n.mdxType,r=n.originalType,a=n.parentName,c=f(n,["components","mdxType","originalType","parentName"]),d=p(t),s=l,b=d["".concat(a,".").concat(s)]||d[s]||u[s]||r;return t?o.createElement(b,i(i({ref:e},c),{},{components:t})):o.createElement(b,i({ref:e},c))}));function s(n,e){var t=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var r=t.length,i=new Array(r);i[0]=d;var f={};for(var a in e)hasOwnProperty.call(e,a)&&(f[a]=e[a]);f.originalType=n,f.mdxType="string"==typeof n?n:l,i[1]=f;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},25363:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return f},metadata:function(){return p},toc:function(){return u}});var o=t(87462),l=t(63366),r=(t(67294),t(3905)),i=["components"],f={},a="8.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c",p={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8",title:"8.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c",description:"\u5728globalfifo\u7684poll\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5c06\u8bbe\u5907\u7ed3\u6784\u4f53\u4e2d\u7684rwait\u548cwwait\u7b49\u5f85\u961f\u5217\u5934\u90e8\u6dfb\u52a0\u5230\u7b49\u5f85\u5217\u8868\u4e2d\uff08\u610f\u5473\u7740\u56e0\u8c03\u7528select\u800c\u963b\u585e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u88abrwait\u548cwwait\u5524\u9192\uff09\uff0c\u7136\u540e\u901a\u8fc7\u5224\u65addev->currentlen\u662f\u5426\u7b49\u4e8e0\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u901a\u8fc7\u5224\u65addev->currentlen\u662f\u5426\u7b49\u4e8eGLOBALFIFO_SIZE\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u5199\u72b6\u6001\uff0c\u5982\u4ee3\u7801\u6e05\u53558.9\u6240\u793a\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.3\u3000\u652f\u6301\u8f6e\u8be2\u64cd\u4f5c\u7684globalfifo\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"8.2.1\u3000\u8f6e\u8be2\u7684\u6982\u5ff5\u4e0e\u4f5c\u7528",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.2\u3000\u8f6e\u8be2\u64cd\u4f5c"},next:{title:"8.4\u3000\u603b\u7ed3",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/8.4\u3000\u603b\u7ed3"}},c={},u=[],d={toc:u};function s(n){var e=n.components,t=(0,l.Z)(n,i);return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"831\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c"},"8.3.1\u3000\u5728globalfifo\u9a71\u52a8\u4e2d\u589e\u52a0\u8f6e\u8be2\u64cd\u4f5c"),(0,r.kt)("p",null,"\u5728globalfifo\u7684poll\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5c06\u8bbe\u5907\u7ed3\u6784\u4f53\u4e2d\u7684r_wait\u548cw_wait\u7b49\u5f85\u961f\u5217\u5934\u90e8\u6dfb\u52a0\u5230\u7b49\u5f85\u5217\u8868\u4e2d\uff08\u610f\u5473\u7740\u56e0\u8c03\u7528select\u800c\u963b\u585e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u88abr_wait\u548cw_wait\u5524\u9192\uff09\uff0c\u7136\u540e\u901a\u8fc7\u5224\u65addev->current_len\u662f\u5426\u7b49\u4e8e0\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u901a\u8fc7\u5224\u65addev->current_len\u662f\u5426\u7b49\u4e8eGLOBALFIFO_SIZE\u6765\u83b7\u5f97\u8bbe\u5907\u7684\u53ef\u5199\u72b6\u6001\uff0c\u5982\u4ee3\u7801\u6e05\u53558.9\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.9\u3000globalfifo\u8bbe\u5907\u9a71\u52a8\u7684poll\uff08\uff09\u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1static unsigned int globalfifo_poll(struct file *filp, poll_table * wait)\n 2{\n 3  unsigned int mask = 0;\n 4  struct globalfifo_dev *dev = filp->private_data;\n 5\n 6  mutex_lock(&dev->mutex);;\n 7\n 8  poll_wait(filp, &dev->r_wait, wait);\n 9  poll_wait(filp, &dev->w_wait, wait);\n10\n11  if (dev->current_len != 0) {\n12       mask |= POLLIN | POLLRDNORM;\n13  }\n14\n15  if (dev->current_len != GLOBALFIFO_SIZE) {\n16       mask |= POLLOUT | POLLWRNORM;\n17  }\n18\n19  mutex_unlock(&dev->mutex);;\n20  return mask;\n21}\n")),(0,r.kt)("p",null,"\u6ce8\u610f\uff0c\u8981\u628aglobalfifo_poll\u8d4b\u7ed9globalfifo_fops\u7684poll\u6210\u5458\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"static const struct file_operations globalfifo_fops = {\n   ...\n   .poll = globalfifo_poll,\n   ...\n};\n")),(0,r.kt)("h1",{id:"832\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u8bbe\u5907\u7684\u8f6e\u8be2"},"8.3.2\u3000\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u9a8c\u8bc1globalfifo\u8bbe\u5907\u7684\u8f6e\u8be2"),(0,r.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8fglobalfifo_poll.c\uff0c\u4ee5\u7528select\uff08\uff09\u76d1\u63a7globalfifo\u7684\u53ef\u8bfb\u5199\u72b6\u6001\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5982\u4ee3\u7801\u6e05\u53558.10\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.10\u3000\u4f7f\u7528select\u76d1\u63a7globalfifo\u662f\u5426\u53ef\u975e\u963b\u585e\u8bfb\u3001\u5199\u7684\u5e94\u7528\u7a0b\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#define FIFO_CLEAR 0x1\n 2#define BUFFER_LEN 20\n 3void main(void)\n 4{\n 5  int fd, num;\n 6  char rd_ch[BUFFER_LEN];\n 7  fd_set rfds, wfds; /* \u8bfb/\u5199\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6 */\n 8\n 9  /* \u4ee5\u975e\u963b\u585e\u65b9\u5f0f\u6253\u5f00/dev/globalfifo\u8bbe\u5907\u6587\u4ef6 */\n10  fd = open("/dev/globalfifo", O_RDONLY | O_NONBLOCK);\n11  if (fd != -1) {\n12       /* FIFO\u6e050 */\n13       if (ioctl(fd, FIFO_CLEAR, 0) < 0)\n14            printf("ioctl command failed\\n");\n15\n16       while (1) {\n17            FD_ZERO(&rfds);\n18            FD_ZERO(&wfds);\n19            FD_SET(fd, &rfds);\n20            FD_SET(fd, &wfds);\n21\n22            select(fd + 1, &rfds, &wfds, NULL, NULL);\n23            /* \u6570\u636e\u53ef\u83b7\u5f97*/\n24            if (FD_ISSET(fd, &rfds))\n25                 printf("Poll monitor:can be read\\n");\n26            /* \u6570\u636e\u53ef\u5199\u5165*/\n27            if (FD_ISSET(fd, &wfds))\n28                 printf("Poll monitor:can be written\\n");\n29       }\n30  } else {\n31       printf("Device open failure\\n");\n32  }\n33}\n')),(0,r.kt)("p",null,"\u5728\u8fd0\u884c\u65f6\u53ef\u770b\u5230\uff0c\u5f53\u6ca1\u6709\u4efb\u4f55\u8f93\u5165\uff0c\u5373FIFO\u4e3a\u7a7a\u65f6\uff0c\u7a0b\u5e8f\u4e0d\u65ad\u5730\u8f93\u51faPoll monitor\uff1acan be written\uff0c\u5f53\u901a\u8fc7echo\u5411/dev/globalfifo\u5199\u5165\u4e00\u4e9b\u6570\u636e\u540e\uff0c\u5c06\u8f93\u51faPoll monitor\uff1acan be read\u548cPoll monitor\uff1acan be written\uff0c\u5982\u679c\u4e0d\u65ad\u5730\u901a\u8fc7echo\u5411/dev/globalfifo\u5199\u5165\u6570\u636e\u76f4\u81f3\u5199\u6ee1FIFO\uff0c\u5219\u53d1\u73b0pollmonitor\u7a0b\u5e8f\u5c06\u53ea\u8f93\u51faPoll monitor\uff1acan be read\u3002\u5bf9\u4e8eglobalfifo\u800c\u8a00\uff0c\u4e0d\u4f1a\u51fa\u73b0\u65e2\u4e0d\u80fd\u8bfb\uff0c\u53c8\u4e0d\u80fd\u5199\u7684\u60c5\u51b5\u3002"),(0,r.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8fglobalfifo_epoll.c\uff0c\u4ee5\u7528epoll\u76d1\u63a7globalfifo\u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5982\u4ee3\u7801\u6e05\u53558.11\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u53558.11\u3000\u4f7f\u7528epoll\u76d1\u63a7globalfifo\u662f\u5426\u53ef\u975e\u963b\u585e\u8bfb\u7684\u5e94\u7528\u7a0b\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1#define FIFO_CLEAR 0x1\n 2#define BUFFER_LEN 20\n 3void main(void)\n 4{\n 5  int fd;\n 6\n 7  fd = open("/dev/globalfifo", O_RDONLY | O_NONBLOCK);\n 8  if (fd != -1) {\n 9       struct epoll_event ev_globalfifo;\n10       int err;\n11       int epfd;\n12\n13       if (ioctl(fd, FIFO_CLEAR, 0) < 0)\n14            printf("ioctl command failed\\n");\n15\n16       epfd = epoll_create(1);\n17       if (epfd < 0) {\n18            perror("epoll_create()");\n19            return;\n20       }\n21\n22       bzero(&ev_globalfifo, sizeof(struct epoll_event));\n23       ev_globalfifo.events = EPOLLIN | EPOLLPRI;\n24\n25       err = epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &ev_globalfifo);\n26       if (err < 0) {\n27            perror("epoll_ctl()");\n28            return;\n29       }\n30       err = epoll_wait(epfd, &ev_globalfifo, 1, 15000);\n31       if (err < 0) {\n32            perror("epoll_wait()");\n33       } else if (err == 0) {\n34            printf("No data input in FIFO within 15 seconds.\\n");\n35       } else {\n36            printf("FIFO is not empty\\n");\n37       }\n38       err = epoll_ctl(epfd, EPOLL_CTL_DEL, fd, &ev_globalfifo);\n39       if (err < 0)\n40            perror("epoll_ctl()");\n41  } else {\n42       printf("Device open failure\\n");\n43  }\n44}\n')),(0,r.kt)("p",null,"\u4e0a\u8ff0\u7a0b\u5e8f\u7b2c25\u884cepoll_ctl\uff08epfd\uff0cEPOLL_CTL_ADD\uff0cfd\uff0c&ev_globalfifo\uff09\u5c06globalfifo\u5bf9\u5e94\u7684fd\u52a0\u5165\u5230\u4e86\u4fa6\u542c\u7684\u884c\u5217\uff0c\u7b2c23\u884c\u8bbe\u7f6e\u4fa6\u542c\u8bfb\u4e8b\u4ef6\uff0c\u7b2c30\u884c\u8fdb\u884c\u7b49\u5f85\uff0c\u82e515\u79d2\u5185\u6ca1\u6709\u4eba\u5199/dev/globalfifo\uff0c\u8be5\u7a0b\u5e8f\u4f1a\u6253\u5370No data input in FIFO within 15seconds\uff0c\u5426\u5219\u7a0b\u5e8f\u4f1a\u6253\u5370FIFO is not empty\u3002"))}s.isMDXComponent=!0}}]);