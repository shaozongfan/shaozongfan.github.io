"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[14608],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return p}});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},l=Object.keys(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var a=i.createContext({}),u=function(n){var e=i.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=u(n.components);return i.createElement(a.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},_=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,a=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),_=u(t),p=r,f=_["".concat(a,".").concat(p)]||_[p]||d[p]||l;return t?i.createElement(f,o(o({ref:e},c),{},{components:t})):i.createElement(f,o({ref:e},c))}));function p(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,o=new Array(l);o[0]=_;var s={};for(var a in e)hasOwnProperty.call(e,a)&&(s[a]=e[a]);s.originalType=n,s.mdxType="string"==typeof n?n:r,o[1]=s;for(var u=2;u<l;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},88291:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var i=t(87462),r=t(63366),l=(t(67294),t(3905)),o=["components"],s={},a="5.2.1\u3000Linux\u6587\u4ef6\u7cfb\u7edf\u76ee\u5f55\u7ed3\u6784",u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/5.2\u3000Linux\u6587\u4ef6\u7cfb\u7edf",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/5.2\u3000Linux\u6587\u4ef6\u7cfb\u7edf.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/5.2\u3000Linux\u6587\u4ef6\u7cfb\u7edf.md",title:"5.2.1\u3000Linux\u6587\u4ef6\u7cfb\u7edf\u76ee\u5f55\u7ed3\u6784",description:"\u8fdb\u5165Linux\u6839\u76ee\u5f55\uff08\u5373\u201c/\u201d\uff0cLinux\u6587\u4ef6\u7cfb\u7edf\u7684\u5165\u53e3\uff0c\u4e5f\u662f\u5904\u4e8e\u6700\u9ad8\u4e00\u7ea7\u7684\u76ee\u5f55\uff09\uff0c\u8fd0\u884c\u201cls\u2013l\u201d\u547d\u4ee4\uff0c\u770b\u5230Linux\u5305\u542b\u4ee5\u4e0b\u76ee\u5f55\u3002",date:"2025-09-15T14:44:14.153Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:9.475,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"10.6.1\u3000\u77ed\u5ef6\u8fdf",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.6\u3000\u5185\u6838\u5ef6\u65f6"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.6\u3000\u4fe1\u53f7\u91cf",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.6\u3000\u4fe1\u53f7\u91cf"}},c={authorsImageUrls:[]},d=[{value:"1./bin",id:"1bin",level:2},{value:"2./sbin",id:"2sbin",level:2},{value:"3./dev",id:"3dev",level:2},{value:"4./etc",id:"4etc",level:2},{value:"5./lib",id:"5lib",level:2},{value:"6./mnt",id:"6mnt",level:2},{value:"7./opt",id:"7opt",level:2},{value:"8./proc",id:"8proc",level:2},{value:"9./tmp",id:"9tmp",level:2},{value:"10./usr",id:"10usr",level:2},{value:"11./var",id:"11var",level:2},{value:"12./sys",id:"12sys",level:2},{value:"1.file\u7ed3\u6784\u4f53",id:"1file\u7ed3\u6784\u4f53",level:2},{value:"2.inode\u7ed3\u6784\u4f53",id:"2inode\u7ed3\u6784\u4f53",level:2}],_={toc:d};function p(n){var e=n.components,s=(0,r.Z)(n,o);return(0,l.kt)("wrapper",(0,i.Z)({},_,s,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u8fdb\u5165Linux\u6839\u76ee\u5f55\uff08\u5373\u201c/\u201d\uff0cLinux\u6587\u4ef6\u7cfb\u7edf\u7684\u5165\u53e3\uff0c\u4e5f\u662f\u5904\u4e8e\u6700\u9ad8\u4e00\u7ea7\u7684\u76ee\u5f55\uff09\uff0c\u8fd0\u884c\u201cls\u2013l\u201d\u547d\u4ee4\uff0c\u770b\u5230Linux\u5305\u542b\u4ee5\u4e0b\u76ee\u5f55\u3002"),(0,l.kt)("h2",{id:"1bin"},"1./bin"),(0,l.kt)("p",null,"\u5305\u542b\u57fa\u672c\u547d\u4ee4\uff0c\u5982ls\u3001cp\u3001mkdir\u7b49\uff0c\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u90fd\u662f\u53ef\u6267\u884c\u7684\u3002"),(0,l.kt)("h2",{id:"2sbin"},"2./sbin"),(0,l.kt)("p",null,"\u5305\u542b\u7cfb\u7edf\u547d\u4ee4\uff0c\u5982modprobe\u3001hwclock\u3001ifconfig\u7b49\uff0c\u5927\u591a\u662f\u6d89\u53ca\u7cfb\u7edf\u7ba1\u7406\u7684\u547d\u4ee4\uff0c\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u90fd\u662f\u53ef\u6267\u884c\u7684\u3002"),(0,l.kt)("h2",{id:"3dev"},"3./dev"),(0,l.kt)("p",null,"\u8bbe\u5907\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u6587\u4ef6\u7684\u8bfb\u5199\u548c\u63a7\u5236\u4ee5\u8bbf\u95ee\u5b9e\u9645\u7684\u8bbe\u5907\u3002"),(0,l.kt)("h2",{id:"4etc"},"4./etc"),(0,l.kt)("p",null,"\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\u7684\u6240\u5728\u5730\uff0c\u4e00\u4e9b\u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u4e5f\u5728\u8fd9\u91cc\uff0c\u5982\u7528\u6237\u8d26\u53f7\u53ca\u5bc6\u7801\u914d\u7f6e\u6587\u4ef6\u3002busybox\u7684\u542f\u52a8\u811a\u672c\u4e5f\u5b58\u653e\u5728\u8be5\u76ee\u5f55\u3002"),(0,l.kt)("h2",{id:"5lib"},"5./lib"),(0,l.kt)("p",null,"\u7cfb\u7edf\u5e93\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\u7b49\u3002"),(0,l.kt)("h2",{id:"6mnt"},"6./mnt"),(0,l.kt)("p",null,"/mnt\u8fd9\u4e2a\u76ee\u5f55\u4e00\u822c\u662f\u7528\u4e8e\u5b58\u653e\u6302\u8f7d\u50a8\u5b58\u8bbe\u5907\u7684\u6302\u8f7d\u76ee\u5f55\uff0c\u6bd4\u5982\u542b\u6709cdrom\u7b49\u76ee\u5f55\u3002\u53ef\u4ee5\u53c2\u770b/etc/fstab\u7684\u5b9a\u4e49\u3002\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u8ba9\u7cfb\u7edf\u5f00\u673a\u81ea\u52a8\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u628a\u6302\u8f7d\u70b9\u653e\u5728\u8fd9\u91cc\u3002"),(0,l.kt)("h2",{id:"7opt"},"7./opt"),(0,l.kt)("p",null,"opt\u662f\u201c\u53ef\u9009\u201d\u7684\u610f\u601d\uff0c\u6709\u4e9b\u8f6f\u4ef6\u5305\u4f1a\u88ab\u5b89\u88c5\u5728\u8fd9\u91cc\u3002"),(0,l.kt)("h2",{id:"8proc"},"8./proc"),(0,l.kt)("p",null,"\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u8fdb\u7a0b\u53ca\u5185\u6838\u4fe1\u606f\uff08\u6bd4\u5982CPU\u3001\u786c\u76d8\u5206\u533a\u3001\u5185\u5b58\u4fe1\u606f\u7b49\uff09\u5b58\u653e\u5728\u8fd9\u91cc\u3002/proc\u76ee\u5f55\u4e3a\u4f2a\u6587\u4ef6\u7cfb\u7edfproc\u7684\u6302\u8f7d\u76ee\u5f55\uff0cproc\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u5b58\u5728\u4e8e\u5185\u5b58\u4e4b\u4e2d\u3002"),(0,l.kt)("h2",{id:"9tmp"},"9./tmp"),(0,l.kt)("p",null,"\u7528\u6237\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u6709\u65f6\u4f1a\u4ea7\u751f\u4e34\u65f6\u6587\u4ef6\uff0c/tmp\u7528\u6765\u5b58\u653e\u4e34\u65f6\u6587\u4ef6\u3002"),(0,l.kt)("h2",{id:"10usr"},"10./usr"),(0,l.kt)("p",null,"\u8fd9\u4e2a\u662f\u7cfb\u7edf\u5b58\u653e\u7a0b\u5e8f\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u7528\u6237\u547d\u4ee4\u3001\u7528\u6237\u5e93\u7b49\u3002"),(0,l.kt)("h2",{id:"11var"},"11./var"),(0,l.kt)("p",null,"var\u8868\u793a\u7684\u662f\u53d8\u5316\u7684\u610f\u601d\uff0c\u8fd9\u4e2a\u76ee\u5f55\u7684\u5185\u5bb9\u7ecf\u5e38\u53d8\u52a8\uff0c\u5982/var\u7684/var/log\u76ee\u5f55\u88ab\u7528\u6765\u5b58\u653e\u7cfb\u7edf\u65e5\u5fd7\u3002"),(0,l.kt)("h2",{id:"12sys"},"12./sys"),(0,l.kt)("p",null,"Linux 2.6\u4ee5\u540e\u7684\u5185\u6838\u6240\u652f\u6301\u7684sysfs\u6587\u4ef6\u7cfb\u7edf\u88ab\u6620\u5c04\u5728\u6b64\u76ee\u5f55\u4e0a\u3002Linux\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e2d\u7684\u603b\u7ebf\u3001\u9a71\u52a8\u548c\u8bbe\u5907\u90fd\u53ef\u4ee5\u5728sysfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u5f53\u5185\u6838\u68c0\u6d4b\u5230\u5728\u7cfb\u7edf\u4e2d\u51fa\u73b0\u4e86\u65b0\u8bbe\u5907\u540e\uff0c\u5185\u6838\u4f1a\u5728sysfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e3a\u8be5\u65b0\u8bbe\u5907\u751f\u6210\u4e00\u9879\u65b0\u7684\u8bb0\u5f55\u3002"),(0,l.kt)("h1",{id:"522linux\u6587\u4ef6\u7cfb\u7edf\u4e0e\u8bbe\u5907\u9a71\u52a8"},"5.2.2\u3000Linux\u6587\u4ef6\u7cfb\u7edf\u4e0e\u8bbe\u5907\u9a71\u52a8"),(0,l.kt)("p",null,"\u56fe5.1\u6240\u793a\u4e3aLinux\u4e2d\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u3001\u78c1\u76d8/Flash\u6587\u4ef6\u7cfb\u7edf\u53ca\u4e00\u822c\u7684\u8bbe\u5907\u6587\u4ef6\u4e0e\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5173\u7cfb\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20250324223448543",src:t(63708).Z,width:"1054",height:"714"})),(0,l.kt)("p",null,"\u56fe5.1\u3000\u6587\u4ef6\u7cfb\u7edf\u4e0e\u8bbe\u5907\u9a71\u52a8\u4e4b\u95f4\u7684\u5173\u7cfb"),(0,l.kt)("p",null,"\u5e94\u7528\u7a0b\u5e8f\u548cVFS\u4e4b\u95f4\u7684\u63a5\u53e3\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u800cVFS\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ee5\u53ca\u8bbe\u5907\u6587\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3\u662ffile_operations\u7ed3\u6784\u4f53\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u5bf9\u6587\u4ef6\u8fdb\u884c\u6253\u5f00\u3001\u5173\u95ed\u3001\u8bfb\u5199\u3001\u63a7\u5236\u7684\u4e00\u7cfb\u5217\u6210\u5458\u51fd\u6570\uff0c\u5173\u7cfb\u5982\u56fe5.2\u6240\u793a\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"1742826912565",src:t(32934).Z,width:"1255",height:"609"})),(0,l.kt)("p",null,"\u56fe5.2\u3000\u5e94\u7528\u7a0b\u5e8f\u3001VFS\u4e0e\u8bbe\u5907\u9a71\u52a8"),(0,l.kt)("p",null,"\u5728\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u4e2d\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4f1a\u5173\u5fc3file\u548cinode\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u3002"),(0,l.kt)("h2",{id:"1file\u7ed3\u6784\u4f53"},"1.file\u7ed3\u6784\u4f53"),(0,l.kt)("p",null,"file\u7ed3\u6784\u4f53\u4ee3\u8868\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u5728\u5185\u6838\u7a7a\u95f4\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u7684struct file\u3002\u5b83\u7531\u5185\u6838\u5728\u6253\u5f00\u6587\u4ef6\u65f6\u521b\u5efa\uff0c\u5e76\u4f20\u9012\u7ed9\u5728\u6587\u4ef6\u4e0a\u8fdb\u884c\u64cd\u4f5c\u7684\u4efb\u4f55\u51fd\u6570\u3002\u5728\u6587\u4ef6\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u5173\u95ed\u540e\uff0c\u5185\u6838\u91ca\u653e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u5728\u5185\u6838\u548c\u9a71\u52a8\u6e90\u4ee3\u7801\u4e2d\uff0cstruct file\u7684\u6307\u9488\u901a\u5e38\u88ab\u547d\u540d\u4e3afile\u6216filp\uff08\u5373file pointer\uff09\u3002\u4ee3\u7801\u6e05\u53555.3\u7ed9\u51fa\u4e86\u6587\u4ef6\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53555.3\u3000\u6587\u4ef6\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct file {\n    union {\n        struct llist_node   fu_llist;\n        struct rcu_head     fu_rcuhead;\n    } f_u;\n    struct path     f_path;\n    struct inode        *f_inode;   /* cached value */\n    const struct file_operations    *f_op;\n\n    /*\n     * Protects f_ep_links, f_flags.\n     * Must not be taken from IRQ context.\n     */\n    spinlock_t      f_lock;\n    enum rw_hint        f_write_hint;\n    atomic_long_t       f_count;\n    unsigned int        f_flags;\n    fmode_t         f_mode;\n    struct mutex        f_pos_lock;\n    loff_t          f_pos;\n    struct fown_struct  f_owner;\n    const struct cred   *f_cred;\n    struct file_ra_state    f_ra;\n\n    u64         f_version;\n#ifdef CONFIG_SECURITY\n    void            *f_security;\n#endif\n    /* needed for tty driver, and maybe others */\n    void            *private_data;\n\n#ifdef CONFIG_EPOLL\n    /* Used by fs/eventpoll.c to link all the hooks to this file */\n    struct list_head    f_ep_links;\n    struct list_head    f_tfile_llink;\n#endif /* #ifdef CONFIG_EPOLL */\n    struct address_space    *f_mapping;\n    errseq_t        f_wb_err;\n} __randomize_layout\n  __attribute__((aligned(4)));  /* lest something weird decides that 2 is OK */\n")),(0,l.kt)("p",null,"\u6587\u4ef6\u8bfb/\u5199\u6a21\u5f0fmode\u3001\u6807\u5fd7f_flags\u90fd\u662f\u8bbe\u5907\u9a71\u52a8\u5173\u5fc3\u7684\u5185\u5bb9\uff0c\u800c\u79c1\u6709\u6570\u636e\u6307\u9488private_data\u5728\u8bbe\u5907\u9a71\u52a8\u4e2d\u88ab\u5e7f\u6cdb\u5e94\u7528\uff0c\u5927\u591a\u88ab\u6307\u5411\u8bbe\u5907\u9a71\u52a8\u81ea\u5b9a\u4e49\u4ee5\u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u7684\u7ed3\u6784\u4f53\u3002"),(0,l.kt)("p",null,"\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u7528\u4e8e\u5224\u65ad\u4ee5\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e\u65b9\u5f0f\u6253\u5f00\u8bbe\u5907\u6587\u4ef6\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'if (file->f_flags & O_NONBLOCK)     /* \u975e\u963b\u585e*/\n      pr_debug("open: non-blocking\\n");\nelse                                /* \u963b\u585e*/\n      pr_debug("open: blocking\\n");\n')),(0,l.kt)("h2",{id:"2inode\u7ed3\u6784\u4f53"},"2.inode\u7ed3\u6784\u4f53"),(0,l.kt)("p",null,"VFS inode\u5305\u542b\u6587\u4ef6\u8bbf\u95ee\u6743\u9650\u3001\u5c5e\u4e3b\u3001\u7ec4\u3001\u5927\u5c0f\u3001\u751f\u6210\u65f6\u95f4\u3001\u8bbf\u95ee\u65f6\u95f4\u3001\u6700\u540e\u4fee\u6539\u65f6\u95f4\u7b49\u4fe1\u606f\u3002\u5b83\u662fLinux\u7ba1\u7406\u6587\u4ef6\u7cfb\u7edf\u7684\u6700\u57fa\u672c\u5355\u4f4d\uff0c\u4e5f\u662f\u6587\u4ef6\u7cfb\u7edf\u8fde\u63a5\u4efb\u4f55\u5b50\u76ee\u5f55\u3001\u6587\u4ef6\u7684\u6865\u6881\uff0cinode\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u53555.4\u6240\u793a"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53555.4\u3000inode\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct inode {\n    umode_t         i_mode;\n    unsigned short      i_opflags;\n    kuid_t          i_uid;\n    kgid_t          i_gid;\n    unsigned int        i_flags;\n\n#ifdef CONFIG_FS_POSIX_ACL\n    struct posix_acl    *i_acl;\n    struct posix_acl    *i_default_acl;\n#endif\n\n    const struct inode_operations   *i_op;\n    struct super_block  *i_sb;\n    struct address_space    *i_mapping;\n\n#ifdef CONFIG_SECURITY\n    void            *i_security;\n#endif\n\n    /* Stat data, not accessed from path walking */\n    unsigned long       i_ino;\n    /*\n     * Filesystems may only read i_nlink directly.  They shall use the\n     * following functions for modification:\n     *\n     *    (set|clear|inc|drop)_nlink\n     *    inode_(inc|dec)_link_count\n     */\n    union {\n        const unsigned int i_nlink;\n        unsigned int __i_nlink;\n    };\n    dev_t           i_rdev;\n    loff_t          i_size;\n    struct timespec64   i_atime;\n    struct timespec64   i_mtime;\n    struct timespec64   i_ctime;\n    spinlock_t      i_lock; /* i_blocks, i_bytes, maybe i_size */\n    unsigned short          i_bytes;\n    u8          i_blkbits;\n    u8          i_write_hint;\n    blkcnt_t        i_blocks;\n\n#ifdef __NEED_I_SIZE_ORDERED\n    seqcount_t      i_size_seqcount;\n#endif\n\n    /* Misc */\n    unsigned long       i_state;\n    struct rw_semaphore i_rwsem;\n\n    unsigned long       dirtied_when;   /* jiffies of first dirtying */\n    unsigned long       dirtied_time_when;\n\n    struct hlist_node   i_hash;\n    struct list_head    i_io_list;  /* backing dev IO list */\n#ifdef CONFIG_CGROUP_WRITEBACK\n    struct bdi_writeback    *i_wb;      /* the associated cgroup wb */\n\n    /* foreign inode detection, see wbc_detach_inode() */\n    int         i_wb_frn_winner;\n    u16         i_wb_frn_avg_time;\n    u16         i_wb_frn_history;\n#endif\n    struct list_head    i_lru;      /* inode LRU list */\n    struct list_head    i_sb_list;\n    struct list_head    i_wb_list;  /* backing dev writeback list */\n    union {\n        struct hlist_head   i_dentry;\n        struct rcu_head     i_rcu;\n    };\n    atomic64_t      i_version;\n    atomic_t        i_count;\n    atomic_t        i_dio_count;\n    atomic_t        i_writecount;\n#ifdef CONFIG_IMA\n    atomic_t        i_readcount; /* struct files open RO */\n#endif\n    const struct file_operations    *i_fop; /* former ->i_op->default_file_ops */\n    struct file_lock_context    *i_flctx;\n    struct address_space    i_data;\n    struct list_head    i_devices;\n    union {\n        struct pipe_inode_info  *i_pipe;\n        struct block_device *i_bdev;\n        struct cdev     *i_cdev;\n        char            *i_link;\n        unsigned        i_dir_seq;\n    };\n\n    __u32           i_generation;\n\n#ifdef CONFIG_FSNOTIFY\n    __u32           i_fsnotify_mask; /* all events this inode cares about */\n    struct fsnotify_mark_connector __rcu    *i_fsnotify_marks;\n#endif\n\n#if IS_ENABLED(CONFIG_FS_ENCRYPTION)\n    struct fscrypt_info *i_crypt_info;\n#endif\n\n    void            *i_private; /* fs or device private pointer */\n} __randomize_layout;\n\n")),(0,l.kt)("p",null,"\u5bf9\u4e8e\u8868\u793a\u8bbe\u5907\u6587\u4ef6\u7684inode\u7ed3\u6784\uff0ci_rdev\u5b57\u6bb5\u5305\u542b\u8bbe\u5907\u7f16\u53f7\u3002Linux\u5185\u6838\u8bbe\u5907\u7f16\u53f7\u5206\u4e3a\u4e3b\u8bbe\u5907\u7f16\u53f7\u548c\u6b21\u8bbe\u5907\u7f16\u53f7\uff0c\u524d\u8005\u4e3adev_t\u7684\u9ad812\u4f4d\uff0c\u540e\u8005\u4e3adev_t\u7684\u4f4e20\u4f4d\u3002\u4e0b\u5217\u64cd\u4f5c\u7528\u4e8e\u4ece\u4e00\u4e2ainode\u4e2d\u83b7\u5f97\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"unsigned int iminor(struct inode *inode);\nunsigned int imajor(struct inode *inode);\n")),(0,l.kt)("p",null,"\u67e5\u770b/proc/devices\u6587\u4ef6\u53ef\u4ee5\u83b7\u77e5\u7cfb\u7edf\u4e2d\u6ce8\u518c\u7684\u8bbe\u5907\uff0c\u7b2c1\u5217\u4e3a\u4e3b\u8bbe\u5907\u53f7\uff0c\u7b2c2\u5217\u4e3a\u8bbe\u5907\u540d\uff0c\u5982\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Character devices:\n   1 mem\n   2 pty\n   3 ttyp\n   4 /dev/vc/0\n   4 tty\n   5 /dev/tty\n   5 /dev/console\n   5 /dev/ptmx\n   7 vcs\n  10 misc\n  13 input\n  21 sg\n  29 fb\n 128 ptm\n 136 pts\n 171 ieee1394\n 180 usb\n 189 usb_device\nBlock devices:\n   1 ramdisk\n   2 fd\n   8 sd\n   9 md\n  22 ide1\n ...\n")),(0,l.kt)("p",null,"\u67e5\u770b/dev\u76ee\u5f55\u53ef\u4ee5\u83b7\u77e5\u7cfb\u7edf\u4e2d\u5305\u542b\u7684\u8bbe\u5907\u6587\u4ef6\uff0c\u65e5\u671f\u7684\u524d\u4e24\u5217\u7ed9\u51fa\u4e86\u5bf9\u5e94\u8bbe\u5907\u7684\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crw-rw----    1 root     uucp       4,  64 Jan 30  2003 /dev/ttyS0\nbrw-rw----    1 root     disk       8,   0 Jan 30  2003 /dev/sda\n")),(0,l.kt)("p",null,"\u4e3b\u8bbe\u5907\u53f7\u662f\u4e0e\u9a71\u52a8\u5bf9\u5e94\u7684\u6982\u5ff5\uff0c\u540c\u4e00\u7c7b\u8bbe\u5907\u4e00\u822c\u4f7f\u7528\u76f8\u540c\u7684\u4e3b\u8bbe\u5907\u53f7\uff0c\u4e0d\u540c\u7c7b\u7684\u8bbe\u5907\u4e00\u822c\u4f7f\u7528\u4e0d\u540c\u7684\u4e3b\u8bbe\u5907\u53f7\uff08\u4f46\u662f\u4e5f\u4e0d\u6392\u9664\u5728\u540c\u4e00\u4e3b\u8bbe\u5907\u53f7\u4e0b\u5305\u542b\u6709\u4e00\u5b9a\u5dee\u5f02\u7684\u8bbe\u5907\uff09\u3002\u56e0\u4e3a\u540c\u4e00\u9a71\u52a8\u53ef\u652f\u6301\u591a\u4e2a\u540c\u7c7b\u8bbe\u5907\uff0c\u56e0\u6b64\u7528\u6b21\u8bbe\u5907\u53f7\u6765\u63cf\u8ff0\u4f7f\u7528\u8be5\u9a71\u52a8\u7684\u8bbe\u5907\u7684\u5e8f\u53f7\uff0c\u5e8f\u53f7\u4e00\u822c\u4ece0\u5f00\u59cb\u3002"),(0,l.kt)("p",null,"\u5185\u6838Documents\u76ee\u5f55\u4e0b\u7684devices.txt\u6587\u4ef6\u63cf\u8ff0\u4e86Linux\u8bbe\u5907\u53f7\u7684\u5206\u914d\u60c5\u51b5\uff0c\u5b83\u7531LANANA\uff08the Linux Assigned Names and Numbers authority\uff0c\u7f51\u5740\u4e3a",(0,l.kt)("a",{parentName:"p",href:"http://www.lanana.org/"},"http://www.lanana.org/")," \uff09\u7ec4\u7ec7\u7ef4\u62a4\uff0cTorben Mathiasen\uff08",(0,l.kt)("a",{parentName:"p",href:"mailto:device@lanana.org"},"device@lanana.org"),"\uff09\u662f\u5176\u4e2d\u7684\u4e3b\u8981\u7ef4\u62a4\u8005\u3002"))}p.isMDXComponent=!0},32934:function(n,e,t){e.Z=t.p+"assets/images/1742826912565-306aca3aff012a9daae8f86620b00aa5.png"},63708:function(n,e,t){e.Z=t.p+"assets/images/image-20250324223448543-6dd506ffea49130c516b506b43432d59.png"}}]);