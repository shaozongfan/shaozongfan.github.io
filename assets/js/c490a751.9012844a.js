"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[7834],{3905:function(e,t,n){n.d(t,{Zo:function(){return a},kt:function(){return k}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},a=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},_={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,a=u(e,["components","mdxType","originalType","parentName"]),d=c(n),k=i,p=d["".concat(s,".").concat(k)]||d[k]||_[k]||o;return n?r.createElement(p,l(l({ref:t},a),{},{components:n})):r.createElement(p,l({ref:t},a))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,l[1]=u;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64071:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return _}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),l=["components"],u={},s="13.2.1\u3000block_device_operations\u7ed3\u6784\u4f53",c={unversionedId:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784",id:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784",title:"13.2.1\u3000block_device_operations\u7ed3\u6784\u4f53",description:"\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u4e2d\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u4e2dfileoperations\u7ed3\u6784\u4f53\u7684blockdevice_operations\u7ed3\u6784\u4f53\uff0c\u5b83\u662f\u5bf9\u5757\u8bbe\u5907\u64cd\u4f5c\u7684\u96c6\u5408\uff0c\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.1\u6240\u793a\u3002",source:"@site/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784.md",sourceDirName:"linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.2\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"13.1\u3000\u5757\u8bbe\u5907\u7684IO\u64cd\u4f5c\u7279\u70b9",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.1\u3000\u5757\u8bbe\u5907\u7684IO\u64cd\u4f5c\u7279\u70b9"},next:{title:"13.3\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7684\u521d\u59cb\u5316",permalink:"/docs/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.3\u3000Linux\u5757\u8bbe\u5907\u9a71\u52a8\u7684\u521d\u59cb\u5316"}},a={},_=[{value:"1.\u5206\u914dgendisk",id:"1\u5206\u914dgendisk",level:2},{value:"2.\u589e\u52a0gendisk",id:"2\u589e\u52a0gendisk",level:2},{value:"3.\u91ca\u653egendisk",id:"3\u91ca\u653egendisk",level:2},{value:"4.gendisk\u5f15\u7528\u8ba1\u6570",id:"4gendisk\u5f15\u7528\u8ba1\u6570",level:2}],d={toc:_};function k(e){var t=e.components,u=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,u,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1321block_device_operations\u7ed3\u6784\u4f53"},"13.2.1\u3000block_device_operations\u7ed3\u6784\u4f53"),(0,o.kt)("p",null,"\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u4e2d\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u4e2dfile_operations\u7ed3\u6784\u4f53\u7684block_device_operations\u7ed3\u6784\u4f53\uff0c\u5b83\u662f\u5bf9\u5757\u8bbe\u5907\u64cd\u4f5c\u7684\u96c6\u5408\uff0c\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.1\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.1\u3000block_device_operations\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct block_device_operations {\n 2       int (*open) (struct block_device *, fmode_t);\n 3       void (*release) (struct gendisk *, fmode_t);\n 4       int (*rw_page)(struct block_device *, sector_t, struct page *, int rw);\n 5       int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);\n 6       int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);\n 7       int (*direct_access) (struct block_device *, sector_t,\n 8                                         void **, unsigned long *);\n 9       unsigned int (*check_events) (struct gendisk *disk,\n10                                unsigned int clearing);\n11       /* ->media_changed() is DEPRECATED, use ->check_events() instead */\n12       int (*media_changed) (struct gendisk *);\n13       void (*unlock_native_capacity) (struct gendisk *);\n14       int (*revalidate_disk) (struct gendisk *);\n15       int (*getgeo)(struct block_device *, struct hd_geometry *);\n16       /* this callback is with swap_lock and sometimes page table lock held */\n17       void (*swap_slot_free_notify) (struct block_device *, unsigned long);\n18       struct module *owner;\n19};\n")),(0,o.kt)("p",null,"\u4e0b\u9762\u5bf9\u5176\u4e3b\u8981\u6210\u5458\u51fd\u6570\u8fdb\u884c\u5206\u6790\u3002"),(0,o.kt)("p",null,"1.\u6253\u5f00\u548c\u91ca\u653e"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int (*open) (struct block_device *, fmode_t);\nvoid (*release) (struct gendisk *, fmode_t);\n")),(0,o.kt)("p",null,"\u4e0e\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7c7b\u4f3c\uff0c\u5f53\u8bbe\u5907\u88ab\u6253\u5f00\u548c\u5173\u95ed\u65f6\u5c06\u8c03\u7528\u5b83\u4eec\u3002"),(0,o.kt)("p",null,"2.I/O\u63a7\u5236"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);\nint (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u51fd\u6570\u662fioctl\uff08\uff09\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\uff0c\u5757\u8bbe\u5907\u5305\u542b\u5927\u91cf\u7684\u6807\u51c6\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u6807\u51c6\u8bf7\u6c42\u7531Linux\u901a\u7528\u5757\u8bbe\u5907\u5c42\u5904\u7406\uff0c\u56e0\u6b64\u5927\u90e8\u5206\u5757\u8bbe\u5907\u9a71\u52a8\u7684ioctl\uff08\uff09\u51fd\u6570\u76f8\u5f53\u77ed\u3002\u5f53\u4e00\u4e2a64\u4f4d\u7cfb\u7edf\u5185\u768432\u4f4d\u8fdb\u7a0b\u8c03\u7528ioctl\uff08\uff09\u7684\u65f6\u5019\uff0c\u8c03\u7528\u7684\u662fcompat_ioctl\uff08\uff09\u3002"),(0,o.kt)("p",null,"3.\u4ecb\u8d28\u6539\u53d8"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int (*media_changed) (struct gendisk *gd);\n")),(0,o.kt)("p",null,"\u88ab\u5185\u6838\u8c03\u7528\u4ee5\u68c0\u67e5\u9a71\u52a8\u5668\u4e2d\u7684\u4ecb\u8d28\u662f\u5426\u5df2\u7ecf\u6539\u53d8\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u975e0\u503c\uff0c\u5426\u5219\u8fd4\u56de0\u3002\u8fd9\u4e2a\u51fd\u6570\u4ec5\u9002\u7528\u4e8e\u652f\u6301\u53ef\u79fb\u52a8\u4ecb\u8d28\u7684\u9a71\u52a8\u5668\uff0c\u901a\u5e38\u9700\u8981\u5728\u9a71\u52a8\u4e2d\u589e\u52a0\u4e00\u4e2a\u8868\u793a\u4ecb\u8d28\u72b6\u6001\u662f\u5426\u6539\u53d8\u7684\u6807\u5fd7\u53d8\u91cf\uff0c\u975e\u53ef\u79fb\u52a8\u8bbe\u5907\u7684\u9a71\u52a8\u4e0d\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"unsigned int (*check_events) (struct gendisk *disk,\n                              unsigned int clearing);\n")),(0,o.kt)("p",null,"media_changed\uff08\uff09\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u76ee\u524d\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u5df2\u88abcheck_events\uff08\uff09\u66ff\u4ee3\u3002Tejun Heo",(0,o.kt)("a",{parentName:"p",href:"mailto:tj@kernel.org"},"tj@kernel.org"),"\u5728\u5185\u6838\u63d0\u4ea4\u4e86\u4e00\u4e2a\u8865\u4e01\uff0c\u5b8c\u6210\u4e86\u201cimplement in-kernel gendisk events handling\u201d\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u8865\u4e01\u5bf9\u5e94\u7684commit ID\u662f77ea887e\u3002\u8001\u7684Linux\u5728\u7528\u6237\u7a7a\u95f4\u91cc\u8f6e\u8be2\u53ef\u79fb\u52a8\u78c1\u76d8\u4ecb\u8d28\u662f\u5426\u5b58\u5728\uff0c\u800c\u65b0\u7684\u5185\u6838\u5219\u5728\u5185\u6838\u7a7a\u95f4\u91cc\u8f6e\u8be2\u3002check_events\uff08\uff09\u51fd\u6570\u68c0\u67e5\u6709\u6ca1\u6709\u6302\u8d77\u7684\u4e8b\u4ef6\uff0c\u5982\u679c\u6709DISK_EVENT_MEDIA_CHANGE\u548cDISK_EVENT_EJECT_REQUEST\u4e8b\u4ef6\uff0c\u5c31\u8fd4\u56de\u3002"),(0,o.kt)("p",null,"4.\u4f7f\u4ecb\u8d28\u6709\u6548"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int (*revalidate_disk) (struct gendisk *gd);\n")),(0,o.kt)("p",null,"revalidate_disk\uff08\uff09\u51fd\u6570\u88ab\u8c03\u7528\u6765\u54cd\u5e94\u4e00\u4e2a\u4ecb\u8d28\u6539\u53d8\uff0c\u5b83\u7ed9\u9a71\u52a8\u4e00\u4e2a\u673a\u4f1a\u6765\u8fdb\u884c\u5fc5\u8981\u7684\u5de5\u4f5c\u4ee5\u4f7f\u65b0\u4ecb\u8d28\u51c6\u5907\u597d\u3002"),(0,o.kt)("p",null,"5.\u83b7\u5f97\u9a71\u52a8\u5668\u4fe1\u606f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int (*getgeo)(struct block_device *, struct hd_geometry *);\n")),(0,o.kt)("p",null,"\u8be5\u51fd\u6570\u6839\u636e\u9a71\u52a8\u5668\u7684\u51e0\u4f55\u4fe1\u606f\u586b\u5145\u4e00\u4e2ahd_geometry\u7ed3\u6784\u4f53\uff0chd_geometry\u7ed3\u6784\u4f53\u5305\u542b\u78c1\u5934\u3001\u6247\u533a\u3001\u67f1\u9762\u7b49\u4fe1\u606f\uff0c\u5176\u5b9a\u4e49\u4e8einclude/linux/hdreg.h\u5934\u6587\u4ef6\u4e2d\u3002"),(0,o.kt)("p",null,"6.\u6a21\u5757\u6307\u9488"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct module *owner;\n")),(0,o.kt)("p",null,"\u4e00\u4e2a\u6307\u5411\u62e5\u6709\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u6a21\u5757\u7684\u6307\u9488\uff0c\u5b83\u901a\u5e38\u88ab\u521d\u59cb\u5316\u4e3aTHIS_MODULE\u3002"),(0,o.kt)("h1",{id:"1322gendisk\u7ed3\u6784\u4f53"},"13.2.2\u3000gendisk\u7ed3\u6784\u4f53"),(0,o.kt)("p",null,"\u5728Linux\u5185\u6838\u4e2d\uff0c\u4f7f\u7528gendisk\uff08\u901a\u7528\u78c1\u76d8\uff09\u7ed3\u6784\u4f53\u6765\u8868\u793a\u4e00\u4e2a\u72ec\u7acb\u7684\u78c1\u76d8\u8bbe\u5907\uff08\u6216\u5206\u533a\uff09\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.2\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.2\u3000gendisk\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct gendisk {\n 2        /* major, first_minor and minors are input parameters only,\n 3         * don't use directly.  Use disk_devt() and disk_max_parts().\n 4         */\n 5        int major;        /* major number of driver */\n 6        int first_minor;\n 7        int minors;       /* maximum number of minors, =1for\n 8                           * disks that can't be partitioned. */\n 9\n10        char disk_name[DISK_NAME_LEN];    /* name of major driver */\n11        char *(*devnode)(struct gendisk *gd, umode_t *mode);\n12\n13        unsigned int events;              /* supported events */\n14        unsigned int async_events;        /* async events, subset of all */\n15\n16        /* Array of pointers to partitions indexed by partno.\n17         * Protected with matching bdev lock but stat and other\n18         * non-critical accesses use RCU.  Always access through\n19         * helpers.\n20         */\n21        struct disk_part_tbl __rcu *part_tbl;\n22        struct hd_struct part0;\n23\n24        const struct block_device_operations *fops;\n25        struct request_queue *queue;\n26        void *private_data;\n27\n28        int flags;\n29        struct device *driverfs_dev;  // FIXME: remove\n30        struct kobject *slave_dir;\n31\n32        struct timer_rand_state *random;\n33        atomic_t sync_io;          /* RAID */\n34        struct disk_events *ev;\n35#ifdef  CONFIG_BLK_DEV_INTEGRITY\n36        struct blk_integrity *integrity;\n37#endif\n38        int node_id;\n39};\n")),(0,o.kt)("p",null,"major\u3001first_minor\u548cminors\u5171\u540c\u8868\u5f81\u4e86\u78c1\u76d8\u7684\u4e3b\u3001\u6b21\u8bbe\u5907\u53f7\uff0c\u540c\u4e00\u4e2a\u78c1\u76d8\u7684\u5404\u4e2a\u5206\u533a\u5171\u4eab\u4e00\u4e2a\u4e3b\u8bbe\u5907\u53f7\uff0c\u800c\u6b21\u8bbe\u5907\u53f7\u5219\u4e0d\u540c\u3002fops\u4e3ablock_device_operations\uff0c\u5373\u4e0a\u8282\u63cf\u8ff0\u7684\u5757\u8bbe\u5907\u64cd\u4f5c\u96c6\u5408\u3002queue\u662f\u5185\u6838\u7528\u6765\u7ba1\u7406\u8fd9\u4e2a\u8bbe\u5907\u7684I/O\u8bf7\u6c42\u961f\u5217\u7684\u6307\u9488\u3002private_data\u53ef\u7528\u4e8e\u6307\u5411\u78c1\u76d8\u7684\u4efb\u4f55\u79c1\u6709\u6570\u636e\uff0c\u7528\u6cd5\u4e0e\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8file\u7ed3\u6784\u4f53\u7684private_data\u7c7b\u4f3c\u3002hd_struct\u6210\u5458\u8868\u793a\u4e00\u4e2a\u5206\u533a\uff0c\u800cdisk_part_tbl\u6210\u5458\u7528\u4e8e\u5bb9\u7eb3\u5206\u533a\u8868\uff0cpart0\u548cpart_tbl\u4e24\u8005\u7684\u5173\u7cfb\u5728\u4e8e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"disk->part_tbl->part[0] = &disk->part0;\n")),(0,o.kt)("p",null,"Linux\u5185\u6838\u63d0\u4f9b\u4e86\u4e00\u7ec4\u51fd\u6570\u6765\u64cd\u4f5cgendisk\uff0c\u5982\u4e0b\u6240\u793a\u3002"),(0,o.kt)("h2",{id:"1\u5206\u914dgendisk"},"1.\u5206\u914dgendisk"),(0,o.kt)("p",null,"gendisk\u7ed3\u6784\u4f53\u662f\u4e00\u4e2a\u52a8\u6001\u5206\u914d\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u9700\u8981\u7279\u522b\u7684\u5185\u6838\u64cd\u4f5c\u6765\u521d\u59cb\u5316\uff0c\u9a71\u52a8\u4e0d\u80fd\u81ea\u5df1\u5206\u914d\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u4e0b\u5217\u51fd\u6570\u6765\u5206\u914dgendisk\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct gendisk *alloc_disk(int minors);\n")),(0,o.kt)("p",null,"minors\u53c2\u6570\u662f\u8fd9\u4e2a\u78c1\u76d8\u4f7f\u7528\u7684\u6b21\u8bbe\u5907\u53f7\u7684\u6570\u91cf\uff0c\u4e00\u822c\u4e5f\u5c31\u662f\u78c1\u76d8\u5206\u533a\u7684\u6570\u91cf\uff0c\u6b64\u540eminors\u4e0d\u80fd\u88ab\u4fee\u6539\u3002"),(0,o.kt)("h2",{id:"2\u589e\u52a0gendisk"},"2.\u589e\u52a0gendisk"),(0,o.kt)("p",null,"gendisk\u7ed3\u6784\u4f53\u88ab\u5206\u914d\u4e4b\u540e\uff0c\u7cfb\u7edf\u8fd8\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u78c1\u76d8\uff0c\u9700\u8981\u8c03\u7528\u5982\u4e0b\u51fd\u6570\u6765\u6ce8\u518c\u8fd9\u4e2a\u78c1\u76d8\u8bbe\u5907\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void add_disk(struct gendisk *disk);\n")),(0,o.kt)("h2",{id:"3\u91ca\u653egendisk"},"3.\u91ca\u653egendisk"),(0,o.kt)("p",null,"\u5f53\u4e0d\u518d\u9700\u8981\u78c1\u76d8\u65f6\uff0c\u5e94\u5f53\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\u91ca\u653egendisk\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void del_gendisk(struct gendisk *gp);\n")),(0,o.kt)("h2",{id:"4gendisk\u5f15\u7528\u8ba1\u6570"},"4.gendisk\u5f15\u7528\u8ba1\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct kobject *get_disk(struct gendisk *disk);\nvoid put_disk(struct gendisk *disk);\n")),(0,o.kt)("p",null,"\u524d\u8005\u6700\u7ec8\u4f1a\u8c03\u7528\u201ckobject_get\uff08&disk_to_dev\uff08disk\uff09->kobj\uff09\uff1b\u201d\uff0c\u800c\u540e\u8005\u5219\u4f1a\u8c03\u7528\u201ckobject_put\uff08&disk_to_dev\uff08disk\uff09->kobj\uff09\uff1b\u201d\u3002"),(0,o.kt)("h1",{id:"1323biorequest\u548crequest_queue"},"13.2.3\u3000bio\u3001request\u548crequest_queue"),(0,o.kt)("p",null,"\u901a\u5e38\u4e00\u4e2abio\u5bf9\u5e94\u4e0a\u5c42\u4f20\u9012\u7ed9\u5757\u5c42\u7684I/O\u8bf7\u6c42\u3002\u6bcf\u4e2abio\u7ed3\u6784\u4f53\u5b9e\u4f8b\u53ca\u5176\u5305\u542b\u7684bvec_iter\u3001bio_vec\u7ed3\u6784\u4f53\u5b9e\u4f8b\u63cf\u8ff0\u4e86\u8be5I/O\u8bf7\u6c42\u7684\u5f00\u59cb\u6247\u533a\u3001\u6570\u636e\u65b9\u5411\uff08\u8bfb\u8fd8\u662f\u5199\uff09\u3001\u6570\u636e\u653e\u5165\u7684\u9875\uff0c\u5176\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.3\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.3\u3000bio\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct bvec_iter {\n 2        sector_t                bi_sector;   /* device address in 512byte\n 3                                             sectors */\n 4        unsigned int            bi_size;     /* residual I/O count */\n 5\n 6        unsigned int            bi_idx;      /* current index into bvl_vec */\n 7\n 8        unsigned int            bi_bvec_done;      /* number of bytes completed\n 9                                                    in current bvec */\n10};\n11\n12/*\n13 * main unit of I/O for the block layer and lower layers (ie drivers and\n14 * stacking drivers)\n15 */\n16struct bio {\n17        struct bio              *bi_next;   /* request queue link */\n18        struct block_device     *bi_bdev;\n19        unsigned long           bi_flags;   /* status, command, etc */\n20        unsigned long           bi_rw;      /* bottom bits READ/WRITE,\n21                                           * top bits priority\n22                                           */\n23\n24        struct bvec_iter        bi_iter;\n25\n26        /* Number of segments in this BIO after\n27         * physical address coalescing is performed.\n28         */\n29        unsigned int            bi_phys_segments;\n30\n31        ...\n32\n33        struct bio_vec          *bi_io_vec;  /* the actual vec list */\n34\n35        struct bio_set          *bi_pool;\n36\n37        /*\n38         * We can inline a number of vecs at the end of the bio, to avoid\n39         * double allocations for a small number of bio_vecs. This member\n40         * MUST obviously be kept at the very end of the bio.\n41         */\n42        struct bio_vec          bi_inline_vecs[0];\n43};\n")),(0,o.kt)("p",null,"\u4e0ebio\u5bf9\u5e94\u7684\u6570\u636e\u6bcf\u6b21\u5b58\u653e\u7684\u5185\u5b58\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0cbio_vec\u7ed3\u6784\u4f53\u7528\u6765\u63cf\u8ff0\u4e0e\u8fd9\u4e2abio\u8bf7\u6c42\u5bf9\u5e94\u7684\u6240\u6709\u7684\u5185\u5b58\uff0c\u5b83\u53ef\u80fd\u4e0d\u603b\u662f\u5728\u4e00\u4e2a\u9875\u9762\u91cc\u9762\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u5411\u91cf\uff0c\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.4\u6240\u793a\u3002\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5b9e\u9645\u662f\u4e00\u4e2a","[page\uff0coffset\uff0clen]","\uff0c\u6211\u4eec\u4e00\u822c\u4e5f\u79f0\u5b83\u4e3a\u4e00\u4e2a\u7247\u6bb5\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.4\u3000bio_vec\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1struct bio_vec {\n2       struct page     *bv_page;\n3       unsigned int    bv_len;\n4       unsigned int    bv_offset;\n5};\n")),(0,o.kt)("p",null,"I/O\u8c03\u5ea6\u7b97\u6cd5\u53ef\u5c06\u8fde\u7eed\u7684bio\u5408\u5e76\u6210\u4e00\u4e2a\u8bf7\u6c42\u3002\u8bf7\u6c42\u662fbio\u7ecf\u7531I/O\u8c03\u5ea6\u8fdb\u884c\u8c03\u6574\u540e\u7684\u7ed3\u679c\uff0c\u8fd9\u662f\u8bf7\u6c42\u548cbio\u7684\u533a\u522b\u3002\u56e0\u6b64\uff0c\u4e00\u4e2arequest\u53ef\u4ee5\u5305\u542b\u591a\u4e2abio\u3002\u5f53bio\u88ab\u63d0\u4ea4\u7ed9I/O\u8c03\u5ea6\u5668\u65f6\uff0cI/O\u8c03\u5ea6\u5668\u53ef\u80fd\u4f1a\u5c06\u8fd9\u4e2abio\u63d2\u5165\u73b0\u5b58\u7684\u8bf7\u6c42\u4e2d\uff0c\u4e5f\u53ef\u80fd\u751f\u6210\u65b0\u7684\u8bf7\u6c42\u3002"),(0,o.kt)("p",null,"\u6bcf\u4e2a\u5757\u8bbe\u5907\u6216\u8005\u5757\u8bbe\u5907\u7684\u5206\u533a\u90fd\u5bf9\u5e94\u6709\u81ea\u8eab\u7684request_queue\uff0c\u4eceI/O\u8c03\u5ea6\u5668\u5408\u5e76\u548c\u6392\u5e8f\u51fa\u6765\u7684\u8bf7\u6c42\u4f1a\u88ab\u5206\u53d1\uff08Dispatch\uff09\u5230\u8bbe\u5907\u7ea7\u7684request_queue\u3002\u56fe13.3\u63cf\u8ff0\u4e86request_queue\u3001request\u3001bio\u3001bio_vec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1744553662621",src:n(67626).Z,width:"1354",height:"652"})),(0,o.kt)("p",null,"\u56fe13.3\u3000request_queue\u3001request\u3001bio\u548cbio_vec"),(0,o.kt)("p",null,"\u4e0b\u9762\u770b\u4e00\u4e0b\u9a71\u52a8\u4e2d\u6d89\u53ca\u7684\u5904\u7406bio\u3001request\u548crequest_queue\u7684\u4e3b\u8981API\u3002"),(0,o.kt)("p",null,"\uff081\uff09\u521d\u59cb\u5316\u8bf7\u6c42\u961f\u5217"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"request_queue_t *blk_init_queue(request_fn_proc *rfn, spinlock_t *lock);\n")),(0,o.kt)("p",null,"\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u63a7\u5236\u8bbf\u95ee\u961f\u5217\u6743\u9650\u7684\u81ea\u65cb\u9501\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u53d1\u751f\u5185\u5b58\u5206\u914d\u7684\u884c\u4e3a\uff0c\u5b83\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u68c0\u67e5\u5b83\u7684\u8fd4\u56de\u503c\u3002\u8fd9\u4e2a\u51fd\u6570\u4e00\u822c\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u8c03\u7528\u3002"),(0,o.kt)("p",null,"\uff082\uff09\u6e05\u9664\u8bf7\u6c42\u961f\u5217"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void blk_cleanup_queue(request_queue_t * q);\n")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u51fd\u6570\u5b8c\u6210\u5c06\u8bf7\u6c42\u961f\u5217\u8fd4\u56de\u7ed9\u7cfb\u7edf\u7684\u4efb\u52a1\uff0c\u4e00\u822c\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u5378\u8f7d\u8fc7\u7a0b\u4e2d\u8c03\u7528\u3002"),(0,o.kt)("p",null,"\uff083\uff09\u5206\u914d\u8bf7\u6c42\u961f\u5217"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"request_queue_t *blk_alloc_queue(int gfp_mask);\n")),(0,o.kt)("p",null,"\u5bf9\u4e8eRAMDISK\u8fd9\u79cd\u5b8c\u5168\u968f\u673a\u8bbf\u95ee\u7684\u975e\u673a\u68b0\u8bbe\u5907\uff0c\u5e76\u4e0d\u9700\u8981\u8fdb\u884c\u590d\u6742\u7684I/O\u8c03\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u201c\u8e22\u5f00\u201dI/O\u8c03\u5ea6\u5668\uff0c\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\u6765\u7ed1\u5b9a\u8bf7\u6c42\u961f\u5217\u548c\u201c\u5236\u9020\u8bf7\u6c42\u201d\u51fd\u6570\uff08make_request_fn\uff09\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void blk_queue_make_request(request_queue_t * q, make_request_fn * mfn);\n")),(0,o.kt)("p",null,"blk_alloc_queue\uff08\uff09\u548cblk_queue_make_request\uff08\uff09\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\u7684\u903b\u8f91\u4e00\u822c\u662f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"xxx_queue = blk_alloc_queue(GFP_KERNEL);\nblk_queue_make_request(xxx_queue, xxx_make_request);\n")),(0,o.kt)("p",null,"\uff084\uff09\u63d0\u53d6\u8bf7\u6c42"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct request * blk_peek_request(struct request_queue *q);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u4e0b\u4e00\u4e2a\u8981\u5904\u7406\u7684\u8bf7\u6c42\uff08\u7531I/O\u8c03\u5ea6\u5668\u51b3\u5b9a\uff09\uff0c\u5982\u679c\u6ca1\u6709\u8bf7\u6c42\u5219\u8fd4\u56deNULL\u3002\u5b83\u4e0d\u4f1a\u6e05\u9664\u8bf7\u6c42\uff0c\u800c\u662f\u4ecd\u7136\u5c06\u8fd9\u4e2a\u8bf7\u6c42\u4fdd\u7559\u5728\u961f\u5217\u4e0a\u3002\u539f\u5148\u7684\u8001\u7684\u51fd\u6570elv_next_request\uff08\uff09\u5df2\u7ecf\u4e0d\u518d\u5b58\u5728\u3002"),(0,o.kt)("p",null,"\uff085\uff09\u542f\u52a8\u8bf7\u6c42"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void blk_start_request(struct request *req);\n")),(0,o.kt)("p",null,"\u4ece\u8bf7\u6c42\u961f\u5217\u4e2d\u79fb\u9664\u8bf7\u6c42\u3002\u539f\u5148\u7684\u8001\u7684API blkdev_dequeue_request\uff08\uff09\u4f1a\u5728blk_start_request\uff08\uff09\u5185\u90e8\u88ab\u8c03\u7528\u3002"),(0,o.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528blk_fetch_request\uff08\uff09\u51fd\u6570\uff0c\u5b83\u540c\u65f6\u505a\u5b8c\u4e86blk_peek_request\uff08\uff09\u548cblk_start_request\uff08\uff09\u7684\u5de5\u4f5c\uff0c\u5982\u4ee3\u7801\u6e05\u535513.5\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.5\u3000blk_fetch_request\uff08\uff09\u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1struct request *blk_fetch_request(struct request_queue *q)\n2{\n3       struct request *rq;\n4\n5       rq = blk_peek_request(q);\n6       if (rq)\n7               blk_start_request(rq);\n8       return rq;\n9}\n")),(0,o.kt)("p",null,"\uff086\uff09\u904d\u5386bio\u548c\u7247\u6bb5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define __rq_for_each_bio(_bio, rq)    \\\n        if ((rq->bio))                 \\\n                for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)\n")),(0,o.kt)("p",null,"__rq_for_each_bio\uff08\uff09\u904d\u5386\u4e00\u4e2a\u8bf7\u6c42\u7684\u6240\u6709bio\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define __bio_for_each_segment(bvl, bio, iter, start)          \\\n        for (iter = (start);                                   \\\n             (iter).bi_size &&                                 \\\n                ((bvl = bio_iter_iovec((bio), (iter))), 1);    \\\n             bio_advance_iter((bio), &(iter), (bvl).bv_len))\n#define bio_for_each_segment(bvl, bio, iter)                   \\\n        __bio_for_each_segment(bvl, bio, iter, (bio)->bi_iter)\n")),(0,o.kt)("p",null,"bio_for_each_segment\uff08\uff09\u904d\u5386\u4e00\u4e2abio\u7684\u6240\u6709bio_vec\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define rq_for_each_segment(bvl, _rq, _iter)               \\\n        __rq_for_each_bio(_iter.bio, _rq)                  \\\n                bio_for_each_segment(bvl, _iter.bio, _iter.iter)\n")),(0,o.kt)("p",null,"rq_for_each_segment\uff08\uff09\u8fed\u4ee3\u904d\u5386\u4e00\u4e2a\u8bf7\u6c42\u6240\u6709bio\u4e2d\u7684\u6240\u6709segment\u3002"),(0,o.kt)("p",null,"\uff087\uff09\u62a5\u544a\u5b8c\u6210"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void __blk_end_request_all(struct request *rq, int error);\nvoid blk_end_request_all(struct request *rq, int error);\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u62a5\u544a\u8bf7\u6c42\u662f\u5426\u5b8c\u6210\uff0cerror\u4e3a0\u8868\u793a\u6210\u529f\uff0c\u5c0f\u4e8e0\u8868\u793a\u5931\u8d25\u3002__blk_end_request_all\uff08\uff09\u9700\u8981\u5728\u6301\u6709\u961f\u5217\u9501\u7684\u573a\u666f\u4e0b\u8c03\u7528\u3002"),(0,o.kt)("p",null,"\u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709blk_end_request_cur\uff08\uff09\u3001blk_end_request_err\uff08\uff09\u3001",(0,o.kt)("strong",{parentName:"p"},"blk_end_request\uff08\uff09\u3001"),"blk_end_request_all\uff08\uff09\u3001",(0,o.kt)("strong",{parentName:"p"},"blk_end_request_cur\uff08\uff09\u4ee5\u53ca"),"blk_end_request_err\uff08\uff09\u3002\u5176\u4e2dxxx_end_request_cur\uff08\uff09\u53ea\u662f\u8868\u660e\u5b8c\u6210\u4e86request\u4e2d\u5f53\u524d\u7684\u90a3\u4e2achunk\uff0c\u4e5f\u5c31\u662f\u5b8c\u6210\u4e86\u5f53\u524d\u7684bio_cur_bytes\uff08rq->bio\uff09\u7684\u4f20\u8f93\u3002"),(0,o.kt)("p",null,"\u82e5\u6211\u4eec\u7528blk_queue_make_request\uff08\uff09\u7ed5\u5f00I/O\u8c03\u5ea6\uff0c\u4f46\u662f\u5728bio\u5904\u7406\u5b8c\u6210\u540e\u5e94\u8be5\u4f7f\u7528bio_endio\uff08\uff09\u51fd\u6570\u901a\u77e5\u5904\u7406\u7ed3\u675f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void bio_endio(struct bio *bio, int error);\n")),(0,o.kt)("p",null,"\u5982\u679c\u662fI/O\u64cd\u4f5c\u6545\u969c\uff0c\u53ef\u4ee5\u8c03\u7528\u5feb\u6377\u51fd\u6570bio_io_error\uff08\uff09\uff0c\u5b83\u5b9a\u4e49\u4e3a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#define bio_io_error(bio) bio_endio((bio), -EIO)\n")),(0,o.kt)("h1",{id:"1324io\u8c03\u5ea6\u5668"},"13.2.4\u3000I/O\u8c03\u5ea6\u5668"),(0,o.kt)("p",null,"Linux 2.6\u4ee5\u540e\u7684\u5185\u6838\u5305\u542b4\u4e2aI/O\u8c03\u5ea6\u5668\uff0c\u5b83\u4eec\u5206\u522b\u662fNoop I/O\u8c03\u5ea6\u5668\u3001Anticipatory I/O\u8c03\u5ea6\u5668\u3001Deadline I/O\u8c03\u5ea6\u5668\u4e0eCFQ I/O\u8c03\u5ea6\u5668\u3002\u5176\u4e2d\uff0cAnticipatory I/O\u8c03\u5ea6\u5668\u7b97\u6cd5\u5df2\u7ecf\u57282010\u5e74\u4ece\u5185\u6838\u4e2d\u53bb\u6389\u4e86\u3002"),(0,o.kt)("p",null,"Noop I/O\u8c03\u5ea6\u5668\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u8be5\u7b97\u6cd5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355FIFO\u961f\u5217\uff0c\u5b83\u53ea\u8fdb\u884c\u6700\u57fa\u672c\u7684\u5408\u5e76\uff0c\u6bd4\u8f83\u9002\u5408\u57fa\u4e8eFlash\u7684\u5b58\u50a8\u5668\u3002"),(0,o.kt)("p",null,"Anticipatory I/O\u8c03\u5ea6\u5668\u7b97\u6cd5\u63a8\u8fdfI/O\u8bf7\u6c42\uff0c\u4ee5\u671f\u80fd\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u83b7\u5f97\u6700\u9ad8\u7684\u6548\u7387\u3002\u5728\u6bcf\u6b21\u5904\u7406\u5b8c\u8bfb\u8bf7\u6c42\u4e4b\u540e\uff0c\u4e0d\u662f\u7acb\u5373\u8fd4\u56de\uff0c\u800c\u662f\u7b49\u5f85\u51e0\u4e2a\u5fae\u79d2\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u4efb\u4f55\u6765\u81ea\u4e34\u8fd1\u533a\u57df\u7684\u8bf7\u6c42\u90fd\u88ab\u7acb\u5373\u6267\u884c\u3002\u8d85\u65f6\u4ee5\u540e\uff0c\u7ee7\u7eed\u539f\u6765\u7684\u5904\u7406\u3002"),(0,o.kt)("p",null,"Deadline I/O\u8c03\u5ea6\u5668\u662f\u9488\u5bf9Anticipatory I/O\u8c03\u5ea6\u5668\u7684\u7f3a\u70b9\u8fdb\u884c\u6539\u5584\u800c\u5f97\u6765\u7684\uff0c\u5b83\u8bd5\u56fe\u628a\u6bcf\u6b21\u8bf7\u6c42\u7684\u5ef6\u8fdf\u964d\u81f3\u6700\u4f4e\uff0c\u8be5\u7b97\u6cd5\u91cd\u6392\u4e86\u8bf7\u6c42\u7684\u987a\u5e8f\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u5b83\u4f7f\u7528\u8f6e\u8be2\u7684\u8c03\u5ea6\u5668\uff0c\u7b80\u6d01\u5c0f\u5de7\uff0c\u63d0\u4f9b\u4e86\u6700\u5c0f\u7684\u8bfb\u53d6\u5ef6\u8fdf\u548c\u5c1a\u4f73\u7684\u541e\u5410\u91cf\uff0c\u7279\u522b\u9002\u5408\u4e8e\u8bfb\u53d6\u8f83\u591a\u7684\u73af\u5883\uff08\u6bd4\u5982\u6570\u636e\u5e93\uff09\u3002"),(0,o.kt)("p",null,"CFQ I/O\u8c03\u5ea6\u5668\u4e3a\u7cfb\u7edf\u5185\u7684\u6240\u6709\u4efb\u52a1\u5206\u914d\u5747\u5300\u7684I/O\u5e26\u5bbd\uff0c\u63d0\u4f9b\u4e00\u4e2a\u516c\u5e73\u7684\u5de5\u4f5c\u73af\u5883\uff0c\u5728\u591a\u5a92\u4f53\u5e94\u7528\u4e2d\uff0c\u80fd\u4fdd\u8bc1\u97f3\u3001\u89c6\u9891\u53ca\u65f6\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u6570\u636e"),(0,o.kt)("p",null,"\u5185\u68384.0-rc1block\u76ee\u5f55\u4e2d\u7684noop-iosched.c\u3001deadline-iosched.c\u548ccfq-iosched.c\u6587\u4ef6\u5206\u522b\u5b9e\u73b0\u4e86IOSCHED_NOOP\u3001IOSCHED_DEADLINE\u548cIOSCHED_CFQ\u8c03\u5ea6\u7b97\u6cd5\u3002as-iosched.c\u8fd9\u4e2a\u6587\u4ef6\u76ee\u524d\u5df2\u7ecf\u4e0d\u518d\u5b58\u5728\u3002\u5f53\u524d\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u7684\u8c03\u5ea6\u5668\u662fCFQ\u3002"),(0,o.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u7ed9\u5185\u6838\u6dfb\u52a0\u542f\u52a8\u53c2\u6570\uff0c\u9009\u62e9\u6240\u4f7f\u7528\u7684I/O\u8c03\u5ea6\u7b97\u6cd5\uff0c\u5982\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kernel elevator=deadline\n")),(0,o.kt)("p",null,"\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5982\u4e0b\u7684\u547d\u4ee4\uff0c\u6539\u53d8\u4e00\u4e2a\u8bbe\u5907\u7684\u8c03\u5ea6\u5668\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"echo SCHEDULER > /sys/block/DEVICE/queue/scheduler\n")))}k.isMDXComponent=!0},67626:function(e,t,n){t.Z=n.p+"assets/images/1744553662621-3444ff70473d4562e69840a20aad7f1d.png"}}]);