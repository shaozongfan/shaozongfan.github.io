"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[20729],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,_=d["".concat(i,".").concat(p)]||d[p]||l[p]||c;return n?r.createElement(_,s(s({ref:t},m),{},{components:n})):r.createElement(_,s({ref:t},m))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,s=new Array(c);s[0]=d;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<c;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},34512:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return l}});var r=n(87462),o=n(63366),c=(n(67294),n(3905)),s=["components"],a={},i=void 0,u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.8\u3000Linux MMC\u5b50\u7cfb\u7edf",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.8\u3000Linux MMC\u5b50\u7cfb\u7edf.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.8\u3000Linux MMC\u5b50\u7cfb\u7edf.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.8\u3000Linux MMC\u5b50\u7cfb\u7edf",description:"Linux MMC/SD\u5b58\u50a8\u5361\u662f\u4e00\u79cd\u5178\u578b\u7684\u5757\u8bbe\u5907\uff0c\u5b83\u7684\u5b9e\u73b0\u4f4d\u4e8edrivers/mmc\u3002drivers/mmc\u4e0b\u53c8\u5206\u4e3acard\u3001core\u548chost\u8fd93\u4e2a\u5b50\u76ee\u5f55\u3002card\u5b9e\u9645\u4e0a\u8ddfLinux\u7684\u5757\u8bbe\u5907\u5b50\u7cfb\u7edf\u5bf9\u63a5\uff0c\u5b9e\u73b0\u5757\u8bbe\u5907\u9a71\u52a8\u4ee5\u53ca\u5b8c\u6210\u8bf7\u6c42\uff0c\u4f46\u662f\u5177\u4f53\u7684\u534f\u8bae\u7ecf\u8fc7core\u5c42\u7684\u63a5\u53e3\uff0c\u6700\u7ec8\u901a\u8fc7host\u5b8c\u6210\u4f20\u8f93\uff0c\u56e0\u6b64\u6574\u4e2aMMC\u5b50\u7cfb\u7edf\u7684\u6846\u67b6\u7ed3\u6784\u5982\u56fe13.5\u6240\u793a\u3002\u53e6\u5916\uff0ccard\u76ee\u5f55\u9664\u4e86\u5b9e\u73b0\u6807\u51c6\u7684MMC/SD\u5b58\u50a8\u5361\u4ee5\u5916\uff0c\u8be5\u76ee\u5f55\u8fd8\u5305\u542b\u4e00\u4e9bSDIO\u5916\u8bbe\u7684\u5361\u9a71\u52a8\uff0c\u5982drivers/mmc/card/sdio_uart.c\u3002core\u76ee\u5f55\u9664\u4e86\u7ed9card\u63d0\u4f9b\u63a5\u53e3\u5916\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5b9a\u4e49\u597d\u4e86host\u9a71\u52a8\u7684\u6846\u67b6\u3002",date:"2025-09-15T14:44:14.765Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:4.705,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"3.4.3\u3000Linux\u5185\u6838\u7684\u5f15\u5bfc",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/3.4\u3000Linux\u5185\u6838\u7684\u7684\u7f16\u8bd1\u53ca\u52a0\u8f7d"},nextItem:{title:"12.2.1\u3000platform\u603b\u7ebf\u3001\u8bbe\u5907\u4e0e\u9a71\u52a8",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8"}},m={authorsImageUrls:[]},l=[],d={toc:l};function p(e){var t=e.components,a=(0,o.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Linux MMC/SD\u5b58\u50a8\u5361\u662f\u4e00\u79cd\u5178\u578b\u7684\u5757\u8bbe\u5907\uff0c\u5b83\u7684\u5b9e\u73b0\u4f4d\u4e8edrivers/mmc\u3002drivers/mmc\u4e0b\u53c8\u5206\u4e3acard\u3001core\u548chost\u8fd93\u4e2a\u5b50\u76ee\u5f55\u3002card\u5b9e\u9645\u4e0a\u8ddfLinux\u7684\u5757\u8bbe\u5907\u5b50\u7cfb\u7edf\u5bf9\u63a5\uff0c\u5b9e\u73b0\u5757\u8bbe\u5907\u9a71\u52a8\u4ee5\u53ca\u5b8c\u6210\u8bf7\u6c42\uff0c\u4f46\u662f\u5177\u4f53\u7684\u534f\u8bae\u7ecf\u8fc7core\u5c42\u7684\u63a5\u53e3\uff0c\u6700\u7ec8\u901a\u8fc7host\u5b8c\u6210\u4f20\u8f93\uff0c\u56e0\u6b64\u6574\u4e2aMMC\u5b50\u7cfb\u7edf\u7684\u6846\u67b6\u7ed3\u6784\u5982\u56fe13.5\u6240\u793a\u3002\u53e6\u5916\uff0ccard\u76ee\u5f55\u9664\u4e86\u5b9e\u73b0\u6807\u51c6\u7684MMC/SD\u5b58\u50a8\u5361\u4ee5\u5916\uff0c\u8be5\u76ee\u5f55\u8fd8\u5305\u542b\u4e00\u4e9bSDIO\u5916\u8bbe\u7684\u5361\u9a71\u52a8\uff0c\u5982drivers/mmc/card/sdio_uart.c\u3002core\u76ee\u5f55\u9664\u4e86\u7ed9card\u63d0\u4f9b\u63a5\u53e3\u5916\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5b9a\u4e49\u597d\u4e86host\u9a71\u52a8\u7684\u6846\u67b6\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1744814170429",src:n(43485).Z,width:"336",height:"661"})),(0,c.kt)("p",null,"\u56fe13.5\u3000Linux MMC\u5b50\u7cfb\u7edf"),(0,c.kt)("p",null,"drivers/mmc/card/queue.c\u7684mmc_init_queue\uff08\uff09\u51fd\u6570\u901a\u8fc7blk_init_queue\uff08mmc_request_fn\uff0clock\uff09\u7ed1\u5b9a\u4e86\u8bf7\u6c42\u5904\u7406\u51fd\u6570mmc_request_fn\uff08\uff09\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"int mmc_init_queue(struct mmc_queue *mq, struct mmc_card *card,\n                   spinlock_t *lock, const char *subname)\n{\n        ...\n        mq->queue = blk_init_queue(mmc_request_fn, lock);\n        ...\n}\n")),(0,c.kt)("p",null,"\u800cmmc_request_fn\uff08\uff09\u51fd\u6570\u4f1a\u5524\u9192\u4e0eMMC\u5bf9\u5e94\u7684\u5185\u6838\u7ebf\u7a0b\u6765\u5904\u7406\u8bf7\u6c42\uff0c\u4e0e\u8be5\u7ebf\u7a0b\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570mmc_queue_thread\uff08\uff09\u6267\u884c\u4e0eMMC\u5bf9\u5e94\u7684mq->issue_fn\uff08mq\uff0creq\uff09\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"static int mmc_queue_thread(void *d)\n{\n        ...\n        do {\n                \u2026\n\n                req = blk_fetch_request(q);\n                mq->mqrq_cur->req = req;\n                \u2026\n\n                if (req || mq->mqrq_prev->req) {\n                        set_current_state(TASK_RUNNING);\n                        cmd_flags = req   req->cmd_flags : 0;\n                        mq->issue_fn(mq, req);\n                        ...\n        return 0;\n}\n")),(0,c.kt)("p",null,"\u5bf9\u4e8e\u5b58\u50a8\u8bbe\u5907\u800c\u8a00\uff0cmq->issue_fn\uff08\uff09\u51fd\u6570\u6307\u5411drivers/mmc/card/block.c\u4e2d\u7684mmc_blk_issue_rq\uff08\uff09\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"static struct mmc_blk_data *mmc_blk_alloc_req(struct mmc_card *card,\n                                              struct device *parent,\n                                              sector_t size,\n                                              bool default_ro,\n                                              const char *subname,\n                                              int area_type)\n{\n        ...\n        md->queue.issue_fn = mmc_blk_issue_rq;\n        md->queue.data = md;\n        ...\n}\n")),(0,c.kt)("p",null,"\u5176\u4e2d\u7684mmc_blk_issue_rw_rq\uff08\uff09\u7b49\u51fd\u6570\u6700\u7ec8\u4f1a\u8c03\u7528drivers/mmc/core/core.c\u4e2d\u7684mmc_start_req\uff08\uff09\u8fd9\u6837\u7684\u51fd\u6570\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"static int mmc_blk_issue_rw_rq(struct mmc_queue *mq, struct request *rqc)\n{\n        ...\n                areq = mmc_start_req(card->host, areq, (int *) &status);\n        ...\n}\n")),(0,c.kt)("p",null,"mmc_start_req\uff08\uff09\u53cd\u8fc7\u6765\u53c8\u8c03\u7528host\u9a71\u52a8\u7684host->ops->pre_req\uff08\uff09\u3001host->ops->enable\uff08\uff09\u3001host->ops->disable\uff08\uff09\u3001host->ops->request\uff08\uff09\u7b49\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5b9e\u73b0\u4e8edrivers/mm/host\u76ee\u5f55\u4e2d\u3002"),(0,c.kt)("p",null,"host->ops\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2aMMC host\u64cd\u4f5c\u7684\u96c6\u5408\uff0c\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u4e3ammc_host_ops\uff0c\u5b83\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535513.16\u6240\u793a\u3002MMC\u4e3b\u673a\u9a71\u52a8\u7684\u4e3b\u4f53\u5de5\u4f5c\u5c31\u662f\u5b9e\u73b0\u8be5\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570\uff0c\u5982drivers/mmc/host/mmc_spi.c\u3001drivers/mmc/host/bfin_sdh.c\u3001drivers/mmc/host/sdhci.c\u7b49\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535513.16\u3000mmc_host_ops\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct mmc_host_ops {\n 2        /*\n 3         * 'enable' is called when the host is claimed and 'disable' is called\n 4         * when the host is released. 'enable' and 'disable' are deprecated.\n 5         */\n 6        int (*enable)(struct mmc_host *host);\n 7        int (*disable)(struct mmc_host *host);\n 8        /*\n 9         * It is optional for the host to implement pre_req and post_req in\n10         * order to support double buffering of requests (prepare one\n11         * request while another request is active).\n12         * pre_req() must always be followed by a post_req().\n13         * To undo a call made to pre_req(), call post_req() with\n14         * a nonzero err condition.\n15         */\n16        void    (*post_req)(struct mmc_host *host, struct mmc_request *req,\n17                            int err);\n18        void    (*pre_req)(struct mmc_host *host, struct mmc_request *req,\n19                           bool is_first_req);\n20        void    (*request)(struct mmc_host *host, struct mmc_request *req);\n21        /*\n22         * Avoid calling these three functions too often or in a \"fast path\",\n23         * since underlaying controller might implement them in an expensive\n24         * and/or slow way.\n25         *\n26         * Also note that these functions might sleep, so don't call them\n27         * in the atomic contexts!\n28         *\n29         * Return values for the get_ro callback should be:\n30         *   0for a read/write card\n31         *   1for a read-only card\n32         *   -ENOSYS when not supported (equal to NULL callback)\n33         *   or a negative errno value when something bad happened\n34         *\n35         * Return values for the get_cd callback should be:\n36         *   0for a absent card\n37         *   1for a present card\n38         *   -ENOSYS when not supported (equal to NULL callback)\n39         *   or a negative errno value when something bad happened\n40         */\n41        void    (*set_ios)(struct mmc_host *host, struct mmc_ios *ios);\n42        int     (*get_ro)(struct mmc_host *host);\n43        int     (*get_cd)(struct mmc_host *host);\n44\n45        void    (*enable_sdio_irq)(struct mmc_host *host, int enable);\n46\n47        /* optional callback for HC quirks */\n48        void    (*init_card)(struct mmc_host *host, struct mmc_card *card);\n49\n50        int     (*start_signal_voltage_switch)(struct mmc_host *host, struct                   mmc_ios *ios);\n51\n52        /* Check if the card is pulling dat[0:3] low */\n53        int     (*card_busy)(struct mmc_host *host);\n54\n55        /* The tuning command opcode value is different for SD and eMMC cards */\n56        int     (*execute_tuning)(struct mmc_host *host, u32opcode);\n57\n58        /* Prepare HS400target operating frequency depending host driver */\n59        int     (*prepare_hs400_tuning)(struct mmc_host *host, struct mmc_ios *ios);\n60        int     (*select_drive_strength)(unsigned int max_dtr, int host_drv,                   int card_drv);\n61        void    (*hw_reset)(struct mmc_host *host);\n62        void    (*card_event)(struct mmc_host *host);\n63};\n")),(0,c.kt)("p",null,"\u7531\u4e8e\u76ee\u524d\u5927\u591a\u6570SoC\u5185\u5d4c\u7684MMC/SD/SDIO\u63a7\u5236\u5668\u662fSDHCI\uff08Secure Digital Host Controller Interface\uff09\uff0c\u6240\u4ee5\u66f4\u591a\u662f\u76f4\u63a5\u91cd\u7528drivers/mmc/host/sdhci.c\u9a71\u52a8\uff0c\u5f88\u591a\u82af\u7247\u751a\u81f3\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f7f\u7528\u57fa\u4e8edrivers/mmc/host/sdhci.c\u5b9a\u4e49\u7684drivers/mmc/host/sdhci-pltfm.c\u6846\u67b6\u3002"))}p.isMDXComponent=!0},43485:function(e,t,n){t.Z=n.p+"assets/images/1744814170429-3008c9f0dbfb9aa7ab977cce89b200af.png"}}]);