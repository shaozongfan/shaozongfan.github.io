"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[1723],{3905:function(n,t,e){e.d(t,{Zo:function(){return _},kt:function(){return u}});var l=e(67294);function c(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,l)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){c(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,l,c=function(n,t){if(null==n)return{};var e,l,c={},r=Object.keys(n);for(l=0;l<r.length;l++)e=r[l],t.indexOf(e)>=0||(c[e]=n[e]);return c}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(l=0;l<r.length;l++)e=r[l],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(c[e]=n[e])}return c}var k=l.createContext({}),o=function(n){var t=l.useContext(k),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},_=function(n){var t=o(n.components);return l.createElement(k.Provider,{value:t},n.children)},i={inlineCode:"code",wrapper:function(n){var t=n.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(n,t){var e=n.components,c=n.mdxType,r=n.originalType,k=n.parentName,_=s(n,["components","mdxType","originalType","parentName"]),p=o(e),u=c,d=p["".concat(k,".").concat(u)]||p[u]||i[u]||r;return e?l.createElement(d,a(a({ref:t},_),{},{components:e})):l.createElement(d,a({ref:t},_))}));function u(n,t){var e=arguments,c=t&&t.mdxType;if("string"==typeof n||c){var r=e.length,a=new Array(r);a[0]=p;var s={};for(var k in t)hasOwnProperty.call(t,k)&&(s[k]=t[k]);s.originalType=n,s.mdxType="string"==typeof n?n:c,a[1]=s;for(var o=2;o<r;o++)a[o]=e[o];return l.createElement.apply(null,a)}return l.createElement.apply(null,e)}p.displayName="MDXCreateElement"},75492:function(n,t,e){e.r(t),e.d(t,{assets:function(){return _},contentTitle:function(){return k},default:function(){return u},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return i}});var l=e(87462),c=e(63366),r=(e(67294),e(3905)),a=["components"],s={},k=void 0,o={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8",title:"20.8\u3000\u65f6\u949f\u9a71\u52a8",description:"\u5728\u4e00\u4e2aSoC\u4e2d\uff0c\u6676\u632f\u3001PLL\u3001\u9a71\u52a8\u548c\u95e8\u7b49\u4f1a\u5f62\u6210\u4e00\u4e2a\u65f6\u949f\u6811\u5f62\u7ed3\u6784\uff0c\u5728Linux 2.6\u4e2d\uff0c\u4e5f\u5b58\u6709clkgetrate\uff08\uff09\u3001clksetrate\uff08\uff09\u3001clkgetparent\uff08\uff09\u3001clksetparent\uff08\uff09\u7b49\u901a\u7528API\uff0c\u4f46\u662f\u8fd9\u4e9bAPI\u7531\u6bcf\u4e2aSoC\u5355\u72ec\u5b9e\u73b0\uff0c\u800c\u4e14\u5404\u4e2aSoC\u4f9b\u5e94\u5546\u5728\u5b9e\u73b0\u65b9\u9762\u7684\u5dee\u5f02\u5f88\u5927\uff0c\u4e8e\u662f\u5185\u6838\u589e\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u901a\u7528\u65f6\u949f\u6846\u67b6\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u788e\u7247\u5316\u95ee\u9898\u3002\u4e4b\u6240\u4ee5\u79f0\u4e3a\u901a\u7528\u65f6\u949f\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u901a\u7528\u4e3b\u8981\u4f53\u73b0\u5728\uff1a",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.8\u3000\u65f6\u949f\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"20.7\u3000pinctrl\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.7\u3000pinctrl\u9a71\u52a8"},next:{title:"20.9\u3000dmaengine\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/20.9\u3000dmaengine\u9a71\u52a8"}},_={},i=[],p={toc:i};function u(n){var t=n.components,e=(0,c.Z)(n,a);return(0,r.kt)("wrapper",(0,l.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u5728\u4e00\u4e2aSoC\u4e2d\uff0c\u6676\u632f\u3001PLL\u3001\u9a71\u52a8\u548c\u95e8\u7b49\u4f1a\u5f62\u6210\u4e00\u4e2a\u65f6\u949f\u6811\u5f62\u7ed3\u6784\uff0c\u5728Linux 2.6\u4e2d\uff0c\u4e5f\u5b58\u6709clk_get_rate\uff08\uff09\u3001clk_set_rate\uff08\uff09\u3001clk_get_parent\uff08\uff09\u3001clk_set_parent\uff08\uff09\u7b49\u901a\u7528API\uff0c\u4f46\u662f\u8fd9\u4e9bAPI\u7531\u6bcf\u4e2aSoC\u5355\u72ec\u5b9e\u73b0\uff0c\u800c\u4e14\u5404\u4e2aSoC\u4f9b\u5e94\u5546\u5728\u5b9e\u73b0\u65b9\u9762\u7684\u5dee\u5f02\u5f88\u5927\uff0c\u4e8e\u662f\u5185\u6838\u589e\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u901a\u7528\u65f6\u949f\u6846\u67b6\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u788e\u7247\u5316\u95ee\u9898\u3002\u4e4b\u6240\u4ee5\u79f0\u4e3a\u901a\u7528\u65f6\u949f\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u901a\u7528\u4e3b\u8981\u4f53\u73b0\u5728\uff1a"),(0,r.kt)("p",null,"1\uff09\u7edf\u4e00\u7684clk\u7ed3\u6784\u4f53\uff0c\u7edf\u4e00\u7684\u5b9a\u4e49\u4e8eclk.h\u4e2d\u7684clk API\uff0c\u8fd9\u4e9bAPI\u4f1a\u8c03\u7528\u7edf\u4e00\u7684clk_ops\u4e2d\u7684\u56de\u8c03\u51fd\u6570\uff1b\u8fd9\u4e2a\u7edf\u4e00\u7684clk\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535520.22\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.22\u3000clk\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct clk {\n 2        const char              *name;\n 3        const struct clk_ops    *ops;\n 4        struct clk_hw           *hw;\n 5        char                    **parent_names;\n 6        struct clk              **parents;\n 7        struct clk              *parent;\n 8        struct hlist_head       children;\n 9        struct hlist_node       child_node;\n10        ...\n11};\n")),(0,r.kt)("p",null,"\u5176\u4e2d\u7b2c3\u884c\u7684clk_ops\u5b9a\u4e49\u662f\u5173\u4e8e\u65f6\u949f\u4f7f\u80fd\u3001\u7981\u6b62\u3001\u8ba1\u7b97\u9891\u7387\u7b49\u7684\u64cd\u4f5c\u96c6\uff0c\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535520.23\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.23\u3000clk_ops\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct clk_ops {\n 2               int             (*prepare)(struct clk_hw *hw);\n 3               void            (*unprepare)(struct clk_hw *hw);\n 4               int             (*enable)(struct clk_hw *hw);\n 5               void            (*disable)(struct clk_hw *hw);\n 6               int             (*is_enabled)(struct clk_hw *hw);\n 7               unsigned long   (*recalc_rate)(struct clk_hw *hw,\n 8                                               unsigned long parent_rate);\n 9               long            (*round_rate)(struct clk_hw *hw, unsigned long,\n10                                               unsigned long *);\n11               int             (*set_parent)(struct clk_hw *hw, u8 index);\n12               u8              (*get_parent)(struct clk_hw *hw);\n13               int             (*set_rate)(struct clk_hw *hw, unsigned long);\n14               void            (*init)(struct clk_hw *hw);\n15};\n")),(0,r.kt)("p",null,"2\uff09\u5bf9\u5177\u4f53\u7684SoC\u5982\u4f55\u53bb\u5b9e\u73b0\u9488\u5bf9\u81ea\u5df1SoC\u7684clk\u9a71\u52a8\uff0c\u5982\u4f55\u63d0\u4f9b\u786c\u4ef6\u7279\u5b9a\u7684\u56de\u8c03\u51fd\u6570\u7684\u65b9\u6cd5\u4e5f\u8fdb\u884c\u4e86\u7edf\u4e00\u3002"),(0,r.kt)("p",null,"\u5728\u4ee3\u7801\u6e05\u535520.22\u8fd9\u4e2a\u901a\u7528\u7684clk\u7ed3\u6784\u4f53\u4e2d\uff0c\u7b2c4\u884c\u7684clk_hw\u662f\u8054\u7cfbclk_ops\u4e2d\u56de\u8c03\u51fd\u6570\u548c\u5177\u4f53\u786c\u4ef6\u7ec6\u8282\u7684\u7ebd\u5e26\uff0cclk_hw\u4e2d\u53ea\u5305\u542b\u901a\u7528\u65f6\u949f\u7ed3\u6784\u4f53\u7684\u6307\u9488\u4ee5\u53ca\u5177\u4f53\u786c\u4ef6\u7684init\u6570\u636e\uff0c\u5982\u4ee3\u7801\u6e05\u535520.24\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.24\u3000clk_hw\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct clk_hw {\n 2         struct clk *clk;\n 3         const struct clk_init_data *init;\n 4};\n")),(0,r.kt)("p",null,"\u5176\u4e2d\u7684clk_init_data\u5305\u542b\u4e86\u5177\u4f53\u65f6\u949f\u7684\u540d\u79f0\u3001\u53ef\u80fd\u7684\u7236\u7ea7\u65f6\u949f\u7684\u540d\u79f0\u5217\u8868parent_names\u3001\u53ef\u80fd\u7684\u7236\u7ea7\u65f6\u949f\u6570\u91cfnum_parents\u7b49\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u540d\u79f0\u7684\u5339\u914d\u5bf9\u5efa\u7acb\u65f6\u949f\u95f4\u7684\u7236\u5b50\u5173\u7cfb\u529f\u4e0d\u53ef\u6ca1\uff0c\u5982\u4ee3\u7801\u6e05\u535520.25\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.25\u3000clk_init_data\u7ed3\u6784\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1struct clk_init_data {\n 2        const char              *name;\n 3        const struct clk_ops    *ops;\n 4        const char              **parent_names;\n 5        u8                      num_parents;\n 6        unsigned long           flags;\n 7};\n")),(0,r.kt)("p",null,"\u4ececlk\u6838\u5fc3\u5c42\u5230\u5177\u4f53\u82af\u7247clk\u9a71\u52a8\u7684\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a"),(0,r.kt)("p",null,"clk_enable\uff08clk\uff09\uff1b","[\u63d2\u56fe]"," clk->ops->enable\uff08clk->hw\uff09\uff1b"),(0,r.kt)("p",null,"\u901a\u7528\u7684clk API\uff08\u5982clk_enable\uff09\u5728\u8c03\u7528\u5e95\u5c42clk\u7ed3\u6784\u4f53\u7684clk_ops\u6210\u5458\u51fd\u6570\uff08\u5982clk->ops->enable\uff09\u65f6\uff0c\u4f1a\u5c06clk->hw\u4f20\u9012\u8fc7\u53bb\u3002"),(0,r.kt)("p",null,"\u4e00\u822c\u5728\u5177\u4f53\u7684\u9a71\u52a8\u4e2d\u4f1a\u5b9a\u4e49\u9488\u5bf9\u7279\u5b9aclk\uff08\u5982foo\uff09\u7684\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u4e2d\u5305\u542bclk_hw\u6210\u5458\u4ee5\u53ca\u786c\u4ef6\u79c1\u6709\u6570\u636e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct clk_foo {\n       struct clk_hw hw;\n       ... hardware specific data goes here ...\n};\n")),(0,r.kt)("p",null,"\u5e76\u5b9a\u4e49to_clk_foo\uff08\uff09\u5b8f\uff0c\u4ee5\u4fbf\u901a\u8fc7clk_hw\u83b7\u53d6clk_foo\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#define to_clk_foo(_hw) container_of(_hw, struct clk_foo, hw)\n")),(0,r.kt)("p",null,"\u5728\u9488\u5bf9clk_foo\u7684clk_ops\u7684\u56de\u8c03\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7clk_hw\u548cto_clk_foo\u6700\u7ec8\u83b7\u5f97\u786c\u4ef6\u79c1\u6709\u6570\u636e\uff0c\u5e76\u8bbf\u95ee\u786c\u4ef6\u8bfb\u5199\u5bc4\u5b58\u5668\u4ee5\u6539\u53d8\u65f6\u949f\u7684\u72b6\u6001\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct clk_ops clk_foo_ops {\n       .enable         = &clk_foo_enable;\n       .disable        = &clk_foo_disable;\n};\nint clk_foo_enable(struct clk_hw *hw)\n{\n       struct clk_foo *foo;\n       foo = to_clk_foo(hw);\n       /* \u8bbf\u95ee\u786c\u4ef6\u8bfb\u5199\u5bc4\u5b58\u5668\u4ee5\u6539\u53d8\u65f6\u949f\u7684\u72b6\u6001*/\n       \u2026\n       return 0;\n};\n")),(0,r.kt)("p",null,"\u5728\u5177\u4f53\u7684clk\u9a71\u52a8\u4e2d\uff0c\u9700\u8981\u901a\u8fc7clk_register\uff08\uff09\u4ee5\u53ca\u5b83\u7684\u53d8\u4f53\u6ce8\u518c\u786c\u4ef6\u4e0a\u6240\u6709\u7684clk\uff0c\u901a\u8fc7clk_register_clkdev\uff08\uff09\u6ce8\u518cclk\u7684\u4e00\u4e2alookup\uff08\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7con_id\u6216\u8005dev_id\u5b57\u7b26\u4e32\u5bfb\u627e\u5230\u8fd9\u4e2aclk\uff09\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct clk *clk_register(struct device *dev, struct clk_hw *hw);\nint clk_register_clkdev(struct clk *clk, const char *con_id,\n         const char *dev_fmt, ...);\n")),(0,r.kt)("p",null,"\u53e6\u5916\uff0c\u9488\u5bf9\u4e0d\u540c\u7684clk\u7c7b\u578b\uff08\u5982\u56fa\u5b9a\u9891\u7387\u7684clk\u3001clk\u95e8\u3001clk\u9a71\u52a8\u7b49\uff09\uff0cclk\u5b50\u7cfb\u7edf\u53c8\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5feb\u6377\u51fd\u6570\u4ee5\u5b8c\u6210clk_register\uff08\uff09\u7684\u8fc7\u7a0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct clk *clk_register_fixed_rate(struct device *dev, const char *name,\n                const char *parent_name, unsigned long flags,\n                unsigned long fixed_rate);\nstruct clk *clk_register_gate(struct device *dev, const char *name,\n                const char *parent_name, unsigned long flags,\n                void __iomem *reg, u8 bit_idx,\n                u8 clk_gate_flags, spinlock_t *lock);\nstruct clk *clk_register_divider(struct device *dev, const char *name,\n                const char *parent_name, unsigned long flags,\n                void __iomem *reg, u8 shift, u8 width,\n                u8 clk_divider_flags, spinlock_t *lock);\n")),(0,r.kt)("p",null,"\u4ee5drivers/clk/clk-prima2.c\u4e3a\u4f8b\uff0c\u4e0e\u8be5\u9a71\u52a8\u5bf9\u5e94\u7684\u82af\u7247SiRFprimaII\u7684\u5916\u56f4\u63a5\u4e86\u4e00\u4e2a26MHz\u7684\u6676\u632f\u548c\u4e00\u4e2a32.768kHz\u7684RTC\u6676\u632f\uff0c\u572826MHz\u6676\u632f\u7684\u540e\u9762\u53c8\u67093\u4e2aPLL\uff0c\u5f53\u7136PLL\u540e\u9762\u53c8\u63a5\u4e86\u66f4\u591a\u7684clk\u8282\u70b9\uff0c\u5219\u5b83\u7684\u76f8\u5173\u9a71\u52a8\u4ee3\u7801\u5982\u6e05\u535520.26\u6240\u793a\u3002"),(0,r.kt)("p",null,"\u4ee3\u7801\u6e05\u535520.26\u3000clk\u9a71\u52a8\u6848\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1static unsigned long pll_clk_recalc_rate(struct clk_hw *hw,\n 2unsigned long parent_rate)\n 3{\n 4unsigned long fin = parent_rate;\n 5struct clk_pll *clk = to_pllclk(hw);\n 6\u2026\n 7}\n 8\n 9static long pll_clk_round_rate(struct clk_hw *hw, unsigned long rate,\n10unsigned long *parent_rate)\n11{\n12\u2026\n13}\n14\n15static int pll_clk_set_rate(struct clk_hw *hw, unsigned long rate,\n16unsigned long parent_rate)\n17{\n18\u2026\n19}\n20\n21static struct clk_ops std_pll_ops = {\n22.recalc_rate = pll_clk_recalc_rate,\n23.round_rate = pll_clk_round_rate,\n24.set_rate = pll_clk_set_rate,\n25};\n26\n27static const char *pll_clk_parents[] = {\n28"osc",\n29};\n30\n31static struct clk_init_data clk_pll1_init = {\n32.name = "pll1",\n33.ops = &std_pll_ops,\n34.parent_names = pll_clk_parents,\n35.num_parents = ARRAY_SIZE(pll_clk_parents),\n36};\n37\n38static struct clk_init_data clk_pll2_init = {\n39.name = "pll2",\n40.ops = &std_pll_ops,\n41.parent_names = pll_clk_parents,\n42.num_parents = ARRAY_SIZE(pll_clk_parents),\n43};\n44\n45static struct clk_init_data clk_pll3_init = {\n46.name = "pll3",\n47.ops = &std_pll_ops,\n48.parent_names = pll_clk_parents,\n49.num_parents = ARRAY_SIZE(pll_clk_parents),\n50};\n51\n52static struct clk_pll clk_pll1 = {\n53.regofs = SIRFSOC_CLKC_PLL1_CFG0,\n54.hw = {\n55        .init = &clk_pll1_init,\n56},\n57};\n58\n59static struct clk_pll clk_pll2 = {\n60.regofs = SIRFSOC_CLKC_PLL2_CFG0,\n61.hw = {\n62        .init = &clk_pll2_init,\n63},\n64};\n65\n66static struct clk_pll clk_pll3 = {\n67.regofs = SIRFSOC_CLKC_PLL3_CFG0,\n68.hw = {\n69        .init = &clk_pll3_init,\n70},\n71};\n72void __init sirfsoc_of_clk_init(void)\n73{\n74\u2026\n75\n76/* These are always available (RTC and 26MHz OSC)*/\n77clk = clk_register_fixed_rate(NULL, "rtc", NULL,\n78       CLK_IS_ROOT, 32768);\n79BUG_ON(!clk);\n80clk = clk_register_fixed_rate(NULL, "osc", NULL,\n81       CLK_IS_ROOT, 26000000);\n82BUG_ON(!clk);\n83\n84clk = clk_register(NULL, &clk_pll1.hw);\n85BUG_ON(!clk);\n86clk = clk_register(NULL, &clk_pll2.hw);\n87BUG_ON(!clk);\n88clk = clk_register(NULL, &clk_pll3.hw);\n89BUG_ON(!clk);\n90\u2026\n91}\n')),(0,r.kt)("p",null,"\u53e6\u5916\uff0c\u76ee\u524d\u5185\u6838\u66f4\u52a0\u5021\u5bfc\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u8bbe\u5907\u6811\u6765\u63cf\u8ff0\u7535\u8def\u677f\u4e0a\u7684\u65f6\u949f\u6811\uff0c\u4ee5\u53ca\u65f6\u949f\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002\u901a\u5e38\u6211\u4eec\u9700\u8981\u5728clk\u63a7\u5236\u5668\u7684\u8282\u70b9\u4e2d\u5b9a\u4e49#clock-cells\u5c5e\u6027\uff0c\u5e76\u4e14\u5728clk\u9a71\u52a8\u4e2d\u901a\u8fc7of_clk_add_provider\uff08\uff09\u6ce8\u518c\u65f6\u949f\u63a7\u5236\u5668\u4e3a\u4e00\u4e2a\u65f6\u949f\u6811\u7684\u63d0\u4f9b\u8005\uff08Provider\uff09\uff0c\u5e76\u5efa\u7acb\u7cfb\u7edf\u4e2d\u5404\u4e2a\u65f6\u949f\u548c\u7d22\u5f15\u7684\u6620\u5c04\u8868\uff0c\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"       Clock                   ID\n       ---------------------------\n       rtc                     0\n       osc                     1\n       pll1                    2\n       pll2                    3\n       pll3                    4\n       mem                     5\n       sys                     6\n       security                7\n       dsp                     8\n       gps                     9\n       mf                      10\n       \u2026\n")),(0,r.kt)("p",null,"\u5728\u6bcf\u4e2a\u5177\u4f53\u7684\u8bbe\u5907\u4e2d\uff0c\u5bf9\u5e94\u7684.dts\u8282\u70b9\u4e0a\u7684clocks=<&clks index>\u5c5e\u6027\u6307\u5411\u5176\u5f15\u7528\u7684clk\u63a7\u5236\u5668\u8282\u70b9\u4ee5\u53ca\u4f7f\u7528\u7684\u65f6\u949f\u7684\u7d22\u5f15\uff0c\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'gps@a8010000 {\n        compatible = "sirf,prima2-gps";\n        reg = <0xa8010000 0x10000>;\n        interrupts = <7>;\n        clocks = <&clks 9>;\n};\n')),(0,r.kt)("p",null,"\u8981\u7279\u522b\u5f3a\u8c03\u7684\u662f\uff0c\u5728\u5177\u4f53\u7684\u8bbe\u5907\u9a71\u52a8\u4e2d\uff0c\u4e00\u5b9a\u8981\u901a\u8fc7\u901a\u7528clk API\u6765\u64cd\u4f5c\u6240\u6709\u7684\u65f6\u949f\uff0c\u800c\u4e0d\u8981\u76f4\u63a5\u901a\u8fc7\u8bfb\u5199clk\u63a7\u5236\u5668\u7684\u5bc4\u5b58\u5668\u6765\u8fdb\u884c\uff0c\u8fd9\u4e9bAPI\u5305\u62ec\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct clk *clk_get(struct device *dev, const char *id);\nstruct clk *devm_clk_get(struct device *dev, const char *id);\nint clk_enable(struct clk *clk);\nint clk_prepare(struct clk *clk);\nvoid clk_unprepare(struct clk *clk);\nvoid clk_disable(struct clk *clk);\nstatic inline int clk_prepare_enable(struct clk *clk);\nstatic inline void clk_disable_unprepare(struct clk *clk);\nunsigned long clk_get_rate(struct clk *clk);\nint clk_set_rate(struct clk *clk, unsigned long rate);\nstruct clk *clk_get_parent(struct clk *clk);\nint clk_set_parent(struct clk *clk, struct clk *parent);\n")),(0,r.kt)("p",null,"\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u540d\u79f0\u4e2d\u542b\u6709prepare\u3001unprepare\u5b57\u7b26\u4e32\u7684API\u662f\u5185\u6838\u540e\u6765\u624d\u52a0\u5165\u7684\uff0c\u8fc7\u53bb\u53ea\u6709clk_enable\uff08\uff09\u548cclk_disable\uff08\uff09\u3002\u53ea\u6709clk_enable\uff08\uff09\u548cclk_disable\uff08\uff09\u5e26\u6765\u7684\u95ee\u9898\u662f\uff0c\u6709\u65f6\u5019\uff0c\u67d0\u4e9b\u786c\u4ef6\u4f7f\u80fd/\u7981\u6b62\u65f6\u949f\u53ef\u80fd\u4f1a\u5f15\u8d77\u7761\u7720\u4ee5\u4f7f\u5f97\u4f7f\u80fd/\u7981\u6b62\u4e0d\u80fd\u5728\u539f\u5b50\u4e0a\u4e0b\u6587\u8fdb\u884c\u3002\u52a0\u4e0aprepare\u540e\uff0c\u628a\u8fc7\u53bb\u7684clk_enable\uff08\uff09\u5206\u89e3\u6210\u4e0d\u53ef\u5728\u539f\u5b50\u4e0a\u4e0b\u6587\u8c03\u7528\u7684clk_prepare\uff08\uff09\uff08\u8be5\u51fd\u6570\u53ef\u80fd\u7761\u7720\uff09\u548c\u53ef\u4ee5\u5728\u539f\u5b50\u4e0a\u4e0b\u6587\u8c03\u7528\u7684clk_enable\uff08\uff09\u3002\u800cclk_prepare_enable\uff08\uff09\u5219\u540c\u65f6\u5b8c\u6210\u51c6\u5907\u548c\u4f7f\u80fd\u7684\u5de5\u4f5c\uff0c\u5f53\u7136\u4e5f\u53ea\u80fd\u5728\u53ef\u80fd\u7761\u7720\u7684\u4e0a\u4e0b\u6587\u8c03\u7528\u8be5API\u3002"))}u.isMDXComponent=!0}}]);