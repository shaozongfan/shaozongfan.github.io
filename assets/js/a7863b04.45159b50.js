"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[19840],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=s.createContext({}),l=function(e){var n=s.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return s.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},_=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),_=l(t),m=r,d=_["".concat(o,".").concat(m)]||_[m]||c[m]||i;return t?s.createElement(d,a(a({ref:n},u),{},{components:t})):s.createElement(d,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=_;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}_.displayName="MDXCreateElement"},55450:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var s=t(87462),r=t(63366),i=(t(67294),t(3905)),a=["components"],p={},o="12.4.1\u3000\u4e3b\u673a\u9a71\u52a8\u4e0e\u5916\u8bbe\u9a71\u52a8\u5206\u79bb",l={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.4\u3000\u4e3b\u673a\u9a71\u52a8\u4e0e\u5916\u8bbe\u9a71\u52a8\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u60f3",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.4\u3000\u4e3b\u673a\u9a71\u52a8\u4e0e\u5916\u8bbe\u9a71\u52a8\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u60f3.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.4\u3000\u4e3b\u673a\u9a71\u52a8\u4e0e\u5916\u8bbe\u9a71\u52a8\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u60f3.md",title:"12.4.1\u3000\u4e3b\u673a\u9a71\u52a8\u4e0e\u5916\u8bbe\u9a71\u52a8\u5206\u79bb",description:"Linux\u4e2d\u7684SPI\u3001I2 C\u3001USB\u7b49\u5b50\u7cfb\u7edf\u90fd\u5229\u7528\u4e86\u5178\u578b\u7684\u628a\u4e3b\u673a\u9a71\u52a8\u548c\u5916\u8bbe\u9a71\u52a8\u5206\u79bb\u7684\u60f3\u6cd5\uff0c\u8ba9\u4e3b\u673a\u7aef\u53ea\u8d1f\u8d23\u4ea7\u751f\u603b\u7ebf\u4e0a\u7684\u4f20\u8f93\u6ce2\u5f62\uff0c\u800c\u5916\u8bbe\u7aef\u53ea\u662f\u901a\u8fc7\u6807\u51c6\u7684API\u6765\u8ba9\u4e3b\u673a\u7aef\u4ee5\u9002\u5f53\u7684\u6ce2\u5f62\u8bbf\u95ee\u81ea\u8eab\u3002\u56e0\u6b64\u8fd9\u91cc\u9762\u5c31\u6d89\u53ca\u4e864\u4e2a\u8f6f\u4ef6\u6a21\u5757\uff1a",date:"2025-09-15T14:44:14.689Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:14.36,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.12\u3000Linux\u6027\u80fd\u76d1\u63a7\u4e0e\u8c03\u4f18\u5de5\u5177",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/21.12\u3000Linux\u6027\u80fd\u76d1\u63a7\u4e0e\u8c03\u4f18\u5de5\u5177"},nextItem:{title:"9.4.1\u3000AIO\u6982\u5ff5\u4e0eGNU C\u5e93AIO",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.4\u3000Linux\u5f02\u6b65IO"}},u={authorsImageUrls:[]},c=[],_={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,s.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Linux\u4e2d\u7684SPI\u3001I2 C\u3001USB\u7b49\u5b50\u7cfb\u7edf\u90fd\u5229\u7528\u4e86\u5178\u578b\u7684\u628a\u4e3b\u673a\u9a71\u52a8\u548c\u5916\u8bbe\u9a71\u52a8\u5206\u79bb\u7684\u60f3\u6cd5\uff0c\u8ba9\u4e3b\u673a\u7aef\u53ea\u8d1f\u8d23\u4ea7\u751f\u603b\u7ebf\u4e0a\u7684\u4f20\u8f93\u6ce2\u5f62\uff0c\u800c\u5916\u8bbe\u7aef\u53ea\u662f\u901a\u8fc7\u6807\u51c6\u7684API\u6765\u8ba9\u4e3b\u673a\u7aef\u4ee5\u9002\u5f53\u7684\u6ce2\u5f62\u8bbf\u95ee\u81ea\u8eab\u3002\u56e0\u6b64\u8fd9\u91cc\u9762\u5c31\u6d89\u53ca\u4e864\u4e2a\u8f6f\u4ef6\u6a21\u5757\uff1a"),(0,i.kt)("p",null,"1\uff09\u4e3b\u673a\u7aef\u7684\u9a71\u52a8\u3002\u6839\u636e\u5177\u4f53\u7684I2 C\u3001SPI\u3001USB\u7b49\u63a7\u5236\u5668\u7684\u786c\u4ef6\u624b\u518c\uff0c\u64cd\u4f5c\u5177\u4f53\u7684I2C\u3001SPI\u3001USB\u7b49\u63a7\u5236\u5668\uff0c\u4ea7\u751f\u603b\u7ebf\u7684\u5404\u79cd\u6ce2\u5f62\u3002"),(0,i.kt)("p",null,"2\uff09\u8fde\u63a5\u4e3b\u673a\u548c\u5916\u8bbe\u7684\u7ebd\u5e26\u3002\u5916\u8bbe\u4e0d\u76f4\u63a5\u8c03\u7528\u4e3b\u673a\u7aef\u7684\u9a71\u52a8\u6765\u4ea7\u751f\u6ce2\u5f62\uff0c\u800c\u662f\u8c03\u4e00\u4e2a\u6807\u51c6\u7684API\u3002\u7531\u8fd9\u4e2a\u6807\u51c6\u7684API\u628a\u8fd9\u4e2a\u6ce2\u5f62\u7684\u4f20\u8f93\u8bf7\u6c42\u95f4\u63a5\u201c\u8f6c\u53d1\u201d\u7ed9\u4e86\u5177\u4f53\u7684\u4e3b\u673a\u7aef\u9a71\u52a8\u3002\u5f53\u7136\uff0c\u5728\u8fd9\u91cc\uff0c\u6700\u597d\u628a\u5173\u4e8e\u6ce2\u5f62\u7684\u63cf\u8ff0\u4e5f\u4ee5\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u6807\u51c6\u5316\u3002"),(0,i.kt)("p",null,"3\uff09\u5916\u8bbe\u7aef\u7684\u9a71\u52a8\u3002\u5916\u8bbe\u63a5\u5728I2 C\u3001SPI\u3001USB\u8fd9\u6837\u7684\u603b\u7ebf\u4e0a\uff0c\u4f46\u662f\u5b83\u4eec\u672c\u8eab\u53ef\u4ee5\u662f\u89e6\u6478\u5c4f\u3001\u7f51\u5361\u3001\u58f0\u5361\u6216\u8005\u4efb\u610f\u4e00\u79cd\u7c7b\u578b\u7684\u8bbe\u5907\u3002\u6211\u4eec\u5728\u76f8\u5173\u7684i2c_driver\u3001spi_driver\u3001usb_driver\u8fd9\u79cdxxx_driver\u7684probe\uff08\uff09\u51fd\u6570\u4e2d\u53bb\u6ce8\u518c\u5b83\u5177\u4f53\u7684\u7c7b\u578b\u3002\u5f53\u8fd9\u4e9b\u5916\u8bbe\u8981\u6c42I2 C\u3001SPI\u3001USB\u7b49\u53bb\u8bbf\u95ee\u5b83\u7684\u65f6\u5019\uff0c\u5b83\u8c03\u7528\u201c\u8fde\u63a5\u4e3b\u673a\u548c\u5916\u8bbe\u7684\u7ebd\u5e26\u201d\u6a21\u5757\u7684\u6807\u51c6API\u3002"),(0,i.kt)("p",null,"4\uff09\u677f\u7ea7\u903b\u8f91\u3002\u677f\u7ea7\u903b\u8f91\u7528\u6765\u63cf\u8ff0\u4e3b\u673a\u548c\u5916\u8bbe\u662f\u5982\u4f55\u4e92\u8054\u7684\uff0c\u5b83\u76f8\u5f53\u4e8e\u4e00\u4e2a\u201c\u8def\u7531\u8868\u201d\u3002\u5047\u8bbe\u677f\u5b50\u4e0a\u6709\u591a\u4e2aSPI\u63a7\u5236\u5668\u548c\u591a\u4e2aSPI\u5916\u8bbe\uff0c\u90a3\u7a76\u7adf\u8c01\u63a5\u5728\u8c01\u4e0a\u9762\u7ba1\u7406\u4e92\u8054\u5173\u7cfb\uff0c\u65e2\u4e0d\u662f\u4e3b\u673a\u7aef\u7684\u8d23\u4efb\uff0c\u4e5f\u4e0d\u662f\u5916\u8bbe\u7aef\u7684\u8d23\u4efb\uff0c\u8fd9\u5c5e\u4e8e\u677f\u7ea7\u903b\u8f91\u7684\u8d23\u4efb\u3002\u8fd9\u90e8\u5206\u901a\u5e38\u51fa\u73b0\u5728arch/arm/mach-xxx\u4e0b\u9762\u6216\u8005arch/arm/boot/dts\u4e0b\u9762\u3002"),(0,i.kt)("p",null,"\u4ec0\u4e48\u53eb\u826f\u597d\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u4e00\u8a00\u4ee5\u853d\u4e4b\uff0c\u8ba9\u6b63\u786e\u7684\u4ee3\u7801\u51fa\u73b0\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u4e0d\u8981\u5728\u9519\u8bef\u7684\u65f6\u95f4\u3001\u9519\u8bef\u7684\u5730\u70b9\uff0c\u7f16\u5199\u4e00\u6bb5\u9519\u8bef\u7684\u4ee3\u7801\u3002\u5728LKML\u4e2d\uff0c\u5173\u4e8e\u4ee3\u7801\u51fa\u73b0\u5728\u9519\u8bef\u7684\u4f4d\u7f6e\uff0c\u5e38\u89c1\u7684\u53f0\u8bcd\u662f\u4ee3\u7801\u201cout of place\u201d\u3002"),(0,i.kt)("p",null,"Linux\u901a\u8fc7\u4e0a\u8ff0\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u628a\u4e00\u5806\u6742\u4e71\u4e0d\u53cb\u597d\u7684\u4ee3\u7801\u53d8\u6210\u4e864\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5c0f\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u5404\u5f97\u5176\u6240\u3002\u6bcf\u4e2a\u6a21\u5757\u90fd\u89c9\u5f97\u5f88\u201c\u723d\u201d\uff0c\u7ad9\u5728\u4e3b\u673a\u7aef\u60f3\u4e00\u60f3\uff0c\u5b83\u5176\u5b9e\u4e5f\u662f\u5f88\u201c\u723d\u201d\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u804c\u8d23\u672c\u6765\u5c31\u662f\u4ea7\u751f\u6ce2\u5f62\uff0c\u800c\u73b0\u5728\u6211\u4eec\u5c31\u8ba9\u5b83\u53ea\u4ea7\u751f\u6ce2\u5f62\u4e0d\u5e72\u522b\u7684\uff1b\u7ad9\u5728\u5916\u8bbe\u7aef\u60f3\u4e00\u60f3\uff0c\u5b83\u4e5f\u53d8\u5f97\u4e00\u8eab\u8f7b\u677e\uff0c\u56e0\u4e3a\u5b83\u6839\u672c\u5c31\u4e0d\u9700\u8981\u77e5\u9053\u81ea\u5df1\u63a5\u5728\u4e3b\u673a\u7684\u54ea\u4e2a\u63a7\u5236\u5668\u4e0a\uff0c\u6839\u672c\u4e0d\u5173\u5fc3\u5bf9\u65b9\u662f\u5f20\u4e09\u3001\u674e\u56db\u3001\u738b\u4e94\u8fd8\u662f\u516d\u9ebb\u5b50\uff1b\u7ad9\u5728\u677f\u7ea7\u903b\u8f91\u7684\u89d2\u5ea6\u4e0a\uff0c\u4f60\u505a\u4e86\u4e00\u4e2a\u677f\u5b50\uff0c\u81ea\u5df1\u81ea\u7136\u8981\u77e5\u9053\u8c01\u63a5\u5728\u8c01\u4e0a\u9762\u4e86\u3002"),(0,i.kt)("p",null,"\u4e0b\u9762\u4ee5SPI\u5b50\u7cfb\u7edf\u4e3a\u4f8b\u6765\u5c55\u5f00\u8bf4\u660e\uff0c\u540e\u7eed\u7ae0\u8282\u7684I2 C\u3001USB\u7b49\u662f\u7c7b\u4f3c\u7684\u3002"),(0,i.kt)("h1",{id:"1242linux-spi\u4e3b\u673a\u548c\u8bbe\u5907\u9a71\u52a8"},"12.4.2\u3000Linux SPI\u4e3b\u673a\u548c\u8bbe\u5907\u9a71\u52a8"),(0,i.kt)("p",null,"\u5728Linux\u4e2d\uff0c\u7528\u4ee3\u7801\u6e05\u535512.24\u7684spi_master\u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u4e00\u4e2aSPI\u4e3b\u673a\u63a7\u5236\u5668\u9a71\u52a8\uff0c\u5176\u4e3b\u8981\u6210\u5458\u662f\u4e3b\u673a\u63a7\u5236\u5668\u7684\u5e8f\u53f7\uff08\u7cfb\u7edf\u4e2d\u53ef\u80fd\u5b58\u5728\u591a\u4e2aSPI\u4e3b\u673a\u63a7\u5236\u5668\uff09\u3001\u7247\u9009\u6570\u91cf\u3001SPI\u6a21\u5f0f\u3001\u65f6\u949f\u8bbe\u7f6e\u7528\u5230\u7684\u548c\u6570\u636e\u4f20\u8f93\u7528\u5230\u7684\u51fd\u6570\u7b49\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.24\u3000spi_master\u7ed3\u6784\u4f53"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1struct spi_master {\n 2 struct devicedev;\n 3\n 4 s16           bus_num;\n 5\n 6 /* chipselects will be integral to many controllers; some others\n 7  * might use board-specific GPIOs.\n 8  */\n 9 u16           num_chipselect;\n10\n11 ...\n12\n13 /* limits on transfer speed */\n14 u32           min_speed_hz;\n15 u32           max_speed_hz;\n16\n17 ...\n18\n19 /* Setup mode and clock, etc (spi driver may call many times).\n20  *\n21  * IMPORTANT:  this may be called when transfers to another\n22  * device are active.  DO NOT UPDATE SHARED REGISTERS in ways\n23  * which could break those transfers.\n24  */\n25 int            (*setup)(struct spi_device *spi);\n26\n27 /* bidirectional bulk transfers\n28  *\n29  * + The transfer() method may not sleep; its main role is\n30  *   just to add the message to the queue.\n31  * + For now there's no remove-from-queue operation, or\n32  *   any other request management\n33  * + To a given spi_device, message queueing is pure fifo\n34  *\n35  * + The master's main job is to process its message queue,\n36  *   selecting a chip then transferring data\n37  * + If there are multiple spi_device children, the i/o queue\n38  *   arbitration algorithm is unspecified (round robin, fifo,\n39  *   priority, reservations, preemption, etc)\n40  *\n41  * + Chipselect stays active during the entire message\n42  *   (unless modified by spi_transfer.cs_change != 0).\n43  * + The message transfers use clock and SPI mode parameters\n44  *   previously established by setup() for this device\n45  */\n46 int            (*transfer)(struct spi_device *spi,\n47                     struct spi_message *mesg);\n48\n49 /* called on release() to free memory provided by spi_master */\n50 void         (*cleanup)(struct spi_device *spi);\n51\n52\n53 ...\n54 /*\n55  * These hooks are for drivers that use a generic implementation\n56  * of transfer_one_message() provied by the core.\n57  */\n58 void (*set_cs)(struct spi_device *spi, bool enable);\n59 int (*transfer_one)(struct spi_master *master, struct spi_device *spi,\n60             struct spi_transfer *transfer);\n61\n62 /* gpio chip select */\n63 int            *cs_gpios;\n64\n65 ...\n66};\n")),(0,i.kt)("p",null,"\u5206\u914d\u3001\u6ce8\u518c\u548c\u6ce8\u9500SPI\u4e3b\u673a\u7684API\u7531SPI\u6838\u5fc3\u63d0\u4f9b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"struct spi_master * spi_alloc_master(struct device *host, unsigned size);\nint spi_register_master(struct spi_master *master);\nvoid spi_unregister_master(struct spi_master *master);\n")),(0,i.kt)("p",null,"\u5728Linux\u4e2d\uff0c\u7528\u4ee3\u7801\u6e05\u535512.25\u7684spi_driver\u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u4e00\u4e2aSPI\u5916\u8bbe\u9a71\u52a8\uff0c\u8fd9\u4e2a\u5916\u8bbe\u9a71\u52a8\u53ef\u4ee5\u8ba4\u4e3a\u662fspi_master\u7684\u5ba2\u6237\u7aef\u9a71\u52a8\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.25\u3000spi_driver\u7ed3\u6784\u4f53"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1struct spi_driver {\n2 const struct spi_device_id *id_table;\n3 int            (*probe)(struct spi_device *spi);\n4 int            (*remove)(struct spi_device *spi);\n5 void            (*shutdown)(struct spi_device *spi);\n6 int            (*suspend)(struct spi_device *spi, pm_message_t mesg);\n7 int            (*resume)(struct spi_device *spi);\n8 struct device_driver    driver;\n9};\n")),(0,i.kt)("p",null,"\u53ef\u4ee5\u770b\u51fa\uff0cspi_driver\u7ed3\u6784\u4f53\u548cplatform_driver\u7ed3\u6784\u4f53\u6709\u6781\u5927\u7684\u76f8\u4f3c\u6027\uff0c\u90fd\u6709probe\uff08\uff09\u3001remove\uff08\uff09\u3001suspend\uff08\uff09\u3001resume\uff08\uff09\u8fd9\u6837\u7684\u63a5\u53e3\u548cdevice_driver\u7684\u5b9e\u4f8b\u3002\u662f\u7684\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e00\u5207\u5ba2\u6237\u7aef\u9a71\u52a8\u7684\u5e38\u7528\u6a21\u677f\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.26\u3000spi_transfer\u7ed3\u6784\u4f53"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1struct spi_transfer {\n 2 /* it's ok if tx_buf == rx_buf (right )\n 3  * for MicroWire, one buffer must be null\n 4  * buffers must work with dma_*map_single() calls, unless\n 5  *   spi_message.is_dma_mapped reports a pre-existing mapping\n 6  */\n 7 const void    *tx_buf;\n 8 void        *rx_buf;\n 9 unsigned    len;\n10\n11 dma_addr_t    tx_dma;\n12 dma_addr_t    rx_dma;\n13 struct sg_table tx_sg;\n14 struct sg_table rx_sg;\n15\n16 unsigned    cs_change:1;\n17 unsigned    tx_nbits:3;\n18 unsigned    rx_nbits:3;\n19#define    SPI_NBITS_SINGLE    0x01/* 1bit transfer */\n20#define    SPI_NBITS_DUA       0x02/* 2bits transfer */\n21#define    SPI_NBITS_QUAD      0x04/* 4bits transfer */\n22 u8       bits_per_word;\n23 u16       delay_usecs;\n24 u32       speed_hz;\n25\n26 struct list_head transfer_list;\n27};\n")),(0,i.kt)("p",null,"\u800c\u4e00\u6b21\u5b8c\u6574\u7684SPI\u4f20\u8f93\u6d41\u7a0b\u53ef\u80fd\u4e0d\u662f\u53ea\u5305\u542b\u4e00\u6b21spi_transfer\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aspi_transfer\uff0c\u8fd9\u4e9bspi_transfer\u6700\u7ec8\u901a\u8fc7spi_message\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u5176\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535512.27\u6240\u793a\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.27\u3000spi_message\u7ed3\u6784\u4f53"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' 1struct spi_message {\n 2 struct list_head    transfers;\n 3\n 4 struct spi_device    *spi;\n 5\n 6 unsigned        is_dma_mapped:1;\n 7\n 8 /* REVISIT:  we might want a flag affecting the behavior of the\n 9  * last transfer ... allowing things like "read 16bit length L"\n10  * immediately followed by "read L bytes".  Basically imposing\n11  * a specific message scheduling algorithm.\n12  *\n13  * Some controller drivers (message-at-a-time queue processing)\n14  * could provide that as their default scheduling algorithm.  But\n15  * others (with multi-message pipelines) could need a flag to\n16  * tell them about such special cases.\n17  */\n18\n19 /* completion is reported through a callback */\n20    void            (*complete)(void *context);\n21 void            *context;\n22 unsigned        frame_length;\n23 unsigned        actual_length;\n24 int            status;\n25\n26 /* for optional use by whatever driver currently owns the\n27  * spi_message ...  between calls to spi_async and then later\n28  * complete(), that\'s the spi_master controller driver.\n29  */\n30 struct list_head    queue;\n31 void            *state;\n32};\n')),(0,i.kt)("p",null,"\u901a\u8fc7spi_message_init\uff08\uff09\u53ef\u4ee5\u521d\u59cb\u5316spi_message\uff0c\u800c\u5c06spi_transfer\u6dfb\u52a0\u5230spi_message\u961f\u5217\u7684\u65b9\u6cd5\u5219\u662f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"void spi_message_add_tail(struct spi_transfer *t, struct spi_message *m);\n")),(0,i.kt)("p",null,"\u53d1\u8d77\u4e00\u6b21spi_message\u7684\u4f20\u8f93\u6709\u540c\u6b65\u548c\u5f02\u6b65\u4e24\u79cd\u65b9\u5f0f\uff0c\u4f7f\u7528\u540c\u6b65API\u65f6\uff0c\u4f1a\u963b\u585e\u7b49\u5f85\u8fd9\u4e2a\u6d88\u606f\u88ab\u5904\u7406\u5b8c\u3002\u540c\u6b65\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684API\u662f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int spi_sync(struct spi_device *spi, struct spi_message *message);\n")),(0,i.kt)("p",null,"\u4f7f\u7528\u5f02\u6b65API\u65f6\uff0c\u4e0d\u4f1a\u963b\u585e\u7b49\u5f85\u8fd9\u4e2a\u6d88\u606f\u88ab\u5904\u7406\u5b8c\uff0c\u4f46\u662f\u53ef\u4ee5\u5728spi_message\u7684complete\u5b57\u6bb5\u6302\u63a5\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u6d88\u606f\u88ab\u5904\u7406\u5b8c\u6210\u540e\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002\u5728\u5f02\u6b65\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684API\u662f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int spi_async(struct spi_device *spi, struct spi_message *message);\n")),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.28\u662f\u975e\u5e38\u5178\u578b\u7684\u521d\u59cb\u5316spi_transfer\u3001spi_message\u5e76\u8fdb\u884cSPI\u6570\u636e\u4f20\u8f93\u7684\u4f8b\u5b50\uff0c\u540c\u65f6spi_write\uff08\uff09\u3001spi_read\uff08\uff09\u4e5f\u662fSPI\u6838\u5fc3\u5c42\u7684\u4e24\u4e2a\u901a\u7528\u5feb\u6377API\uff0c\u5728SPI\u5916\u8bbe\u9a71\u52a8\u4e2d\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5b83\u4eec\u8fdb\u884c\u7b80\u5355\u7684\u7eaf\u5199\u548c\u7eaf\u8bfb\u64cd\u4f5c\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.28\u3000SPI\u4f20\u8f93\u5b9e\u4f8bspi_write\uff08\uff09\u3001spi_read\uff08\uff09API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1 static inline int\n 2 spi_write(struct spi_device *spi, const u8*buf, size_t len)\n 3 {\n 4         struct spi_transfer     t = {\n 5                         .tx_buf         = buf,\n 6                         .len            = len,\n 7                 };\n 8         struct spi_message      m;\n 9\n10        spi_message_init(&m);\n11        spi_message_add_tail(&t, &m);\n12        return spi_sync(spi, &m);\n13}\n14\n15static inline int\n16spi_read(struct spi_device *spi, u8*buf, size_t len)\n17{\n18        struct spi_transfer     t = {\n19                        .rx_buf         = buf,\n20                        .len            = len,\n21               };\n22       struct spi_message      m;\n23\n24       spi_message_init(&m);\n25       spi_message_add_tail(&t, &m);\n26       return spi_sync(spi, &m);\n27}\n")),(0,i.kt)("p",null,"SPI\u4e3b\u673a\u63a7\u5236\u5668\u9a71\u52a8\u4f4d\u4e8edrivers/spi/\uff0c\u8fd9\u4e9b\u9a71\u52a8\u7684\u4e3b\u4f53\u662f\u5b9e\u73b0\u4e86spi_master\u7684transfer\uff08\uff09\u3001transfer_one\uff08\uff09\u3001setup\uff08\uff09\u8fd9\u6837\u7684\u6210\u5458\u51fd\u6570\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u80fd\u662f\u5b9e\u73b0spi_bitbang\u7684txrx_bufs\uff08\uff09\u3001setup_transfer\uff08\uff09\u3001chipselect\uff08\uff09\u8fd9\u6837\u7684\u6210\u5458\u51fd\u6570\u3002\u4ee3\u7801\u6e05\u535512.29\u6458\u53d6\u4e86drivers/spi/spi-pl022.c\u7684\u90e8\u5206\u4ee3\u7801\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.29\u3000SPI\u4e3b\u673a\u7aef\u9a71\u52a8\u5b8c\u6210\u7684\u6ce2\u5f62\u4f20\u8f93"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," 1static int pl022_transfer_one_message(struct spi_master *master,\n 2                      struct spi_message *msg)\n 3{\n 4 struct pl022*pl022= spi_master_get_devdata(master);\n 5\n 6 /* Initial message state */\n 7 pl022->cur_msg = msg;\n 8 msg->state = STATE_START;\n 9\n10 pl022->cur_transfer = list_entry(msg->transfers.next,\n11                  struct spi_transfer, transfer_list);\n12\n13 /* Setup the SPI using the per chip configuration */\n14 pl022->cur_chip = spi_get_ctldata(msg->spi);\n15 pl022->cur_cs = pl022->chipselects[msg->spi->chip_select];\n16\n17 restore_state(pl022);\n18 flush(pl022);\n19\n20 if (pl022->cur_chip->xfer_type == POLLING_TRANSFER)\n21     do_polling_transfer(pl022);\n22 else\n23     do_interrupt_dma_transfer(pl022);\n24\n25 return 0;\n26}\n27\n28static int pl022_setup(struct spi_device *spi)\n29{\n30 ...\n31 /* Stuff that is common for all versions */\n32 if (spi->mode & SPI_CPOL)\n33     tmp = SSP_CLK_POL_IDLE_HIGH;\n34 else\n35     tmp = SSP_CLK_POL_IDLE_LOW;\n36 SSP_WRITE_BITS(chip->cr0, tmp, SSP_CR0_MASK_SPO, 6);\n37\n38 if (spi->mode & SPI_CPHA)\n39     tmp = SSP_CLK_SECOND_EDGE;\n40 else\n41     tmp = SSP_CLK_FIRST_EDGE;\n42 SSP_WRITE_BITS(chip->cr0, tmp, SSP_CR0_MASK_SPH, 7);\n43\n44 ...\n45}\n46\n47static int pl022_probe(struct amba_device *adev, const struct amba_id *id)\n48{\n49 ...\n50\n51 /*\n52  * Bus Number Which has been Assigned to this SSP controller\n53  * on this board\n54  */\n55 master->bus_num = platform_info->bus_id;\n56 master->num_chipselect = num_cs;\n57 master->cleanup = pl022_cleanup;\n58 master->setup = pl022_setup;\n59 master->auto_runtime_pm = true;\n60 master->transfer_one_message = pl022_transfer_one_message;\n61 master->unprepare_transfer_hardware = pl022_unprepare_transfer_hardware;\n62 master->rt = platform_info->rt;\n63 master->dev.of_node = dev->of_node;\n64\n65    ...\n66}\n")),(0,i.kt)("p",null,"SPI\u5916\u8bbe\u9a71\u52a8\u904d\u5e03\u4e8e\u5185\u6838\u7684drivers\u3001sound\u7684\u5404\u4e2a\u5b50\u76ee\u5f55\u4e4b\u4e0b\uff0cSPI\u53ea\u662f\u4e00\u79cd\u603b\u7ebf\uff0cspi_driver\u7684\u4f5c\u7528\u53ea\u662f\u5c06SPI\u5916\u8bbe\u6302\u63a5\u5728\u8be5\u603b\u7ebf\u4e0a\uff0c\u56e0\u6b64\u5728spi_driver\u7684probe\uff08\uff09\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u5c06\u6ce8\u518cSPI\u5916\u8bbe\u672c\u8eab\u6240\u5c5e\u8bbe\u5907\u9a71\u52a8\u7684\u7c7b\u578b\u3002"),(0,i.kt)("p",null,"\u548cplatform_driver\u5bf9\u5e94\u7740\u4e00\u4e2aplatform_device\u4e00\u6837\uff0cspi_driver\u4e5f\u5bf9\u5e94\u7740\u4e00\u4e2aspi_device\uff1bplatform_device\u9700\u8981\u5728BSP\u7684\u677f\u6587\u4ef6\u4e2d\u6dfb\u52a0\u677f\u4fe1\u606f\u6570\u636e\uff0c\u800cspi_device\u4e5f\u540c\u6837\u9700\u8981\u3002spi_device\u7684\u677f\u4fe1\u606f\u7528spi_board_info\u7ed3\u6784\u4f53\u63cf\u8ff0\uff0c\u8be5\u7ed3\u6784\u4f53\u8bb0\u5f55\u7740SPI\u5916\u8bbe\u4f7f\u7528\u7684\u4e3b\u673a\u63a7\u5236\u5668\u5e8f\u53f7\u3001\u7247\u9009\u5e8f\u53f7\u3001\u6570\u636e\u6bd4\u7279\u7387\u3001SPI\u4f20\u8f93\u6a21\u5f0f\uff08\u5373CPOL\u3001CPHA\uff09\u7b49\u3002\u8bfa\u57fa\u4e9a770\u4e0a\u7684\u4e24\u4e2aSPI\u8bbe\u5907\u7684\u677f\u4fe1\u606f\u6570\u636e\u5982\u4ee3\u7801\u6e05\u535512.30\u6240\u793a\uff0c\u4f4d\u4e8e\u677f\u6587\u4ef6arch/arm/mach-omap1/board-nokia770.c\u4e2d\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.30\u3000\u8bfa\u57fa\u4e9a770\u677f\u6587\u4ef6\u4e2d\u7684spi_board_info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' 1static struct spi_board_info nokia770_spi_board_info[] __initdata = {\n 2   [0] = {\n 3           .modalias           = "lcd_mipid",\n 4           .bus_num            = 2,          /* \u7528\u5230\u7684SPI\u4e3b\u673a\u63a7\u5236\u5668\u5e8f\u53f7*/\n 5           .chip_select        = 3,          /* \u4f7f\u7528\u54ea\u4e2a\u7247\u9009*/\n 6           .max_speed_hz       = 12000000,   /* SPI\u6570\u636e\u4f20\u8f93\u6bd4\u7279\u7387*/\n 7           .platform_data      = &nokia770_mipid_platform_data,\n 8   },\n 9   [1] = {\n10           .modalias           = "ads7846",\n11           .bus_num            = 2,\n12           .chip_select        = 0,\n13           .max_speed_hz       = 2500000,\n14           .irq                = OMAP_GPIO_IRQ(15),\n15           .platform_data      = &nokia770_ads7846_platform_data,\n16   },\n17};\n')),(0,i.kt)("p",null,"\u5728Linux\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u5728\u673a\u5668\u7684init_machine\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u4f1a\u901a\u8fc7\u5982\u4e0b\u8bed\u53e5\u6ce8\u518c\u8fd9\u4e9bspi_board_info\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"spi_register_board_info(nokia770_spi_board_info,\n                       ARRAY_SIZE(nokia770_spi_board_info));\n")),(0,i.kt)("p",null,"\u8fd9\u4e00\u70b9\u548c\u542f\u52a8\u65f6\u901a\u8fc7platform_add_devices\uff08\uff09\u6dfb\u52a0platform_device\u975e\u5e38\u76f8\u4f3c\u3002"),(0,i.kt)("p",null,"ARM Linux 3.x\u4e4b\u540e\u7684\u5185\u6838\u5728\u6539\u4e3a\u8bbe\u5907\u6811\u540e\uff0c\u4e0d\u518d\u9700\u8981\u5728arch/arm/mach-xxx\u4e2d\u7f16\u7801SPI\u7684\u677f\u7ea7\u4fe1\u606f\u4e86\uff0c\u800c\u503e\u5411\u4e8e\u5728SPI\u63a7\u5236\u5668\u8282\u70b9\u4e0b\u586b\u5199\u5b50\u8282\u70b9\uff0c\u5982\u4ee3\u7801\u6e05\u535512.31\u7ed9\u51fa\u4e86arch/arm/boot/dts/omap3-overo-common-lcd43.dtsi\u4e2d\u5305\u542b\u7684ads7846\u8282\u70b9\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.31\u3000\u901a\u8fc7\u8bbe\u5907\u6811\u6dfb\u52a0SPI\u5916\u8bbe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' 1&mcspi1{\n 2      pinctrl-names = "default";\n 3      pinctrl-0= <&mcspi1_pins>;\n 4\n 5      /* touch controller */\n 6      ads7846@0{\n 7              pinctrl-names = "default";\n 8              pinctrl-0= <&ads7846_pins>;\n 9\n10              compatible = "ti,ads7846";\n11              vcc-supply = <&ads7846reg>;\n12\n13              reg = <0>;               /* CS0*/\n14              spi-max-frequency = <1500000>;\n15\n16              interrupt-parent = <&gpio4>;\n17              interrupts = <180>;    /* gpio_114*/\n18              pendown-gpio = <&gpio4180>;\n19\n20              ti,x-min = /bits/ 16<0x0>;\n21              ti,x-max = /bits/ 16<0x0fff>;\n22              ti,y-min = /bits/ 16<0x0>;\n23              ti,y-max = /bits/ 16<0x0fff>;\n24              ti,x-plate-ohms = /bits/ 16<180>;\n25              ti,pressure-max = /bits/ 16<255>;\n26\n27              linux,wakeup;\n28      };\n29};\n')))}m.isMDXComponent=!0}}]);