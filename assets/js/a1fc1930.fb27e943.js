"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[2983],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),_=p(r),f=a,m=_["".concat(d,".").concat(f)]||_[f]||u[f]||l;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=_;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}_.displayName="MDXCreateElement"},37250:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=["components"],i={},d="12.2.1\u3000platform\u603b\u7ebf\u3001\u8bbe\u5907\u4e0e\u9a71\u52a8",p={unversionedId:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8",id:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8",title:"12.2.1\u3000platform\u603b\u7ebf\u3001\u8bbe\u5907\u4e0e\u9a71\u52a8",description:"\u5728Linux 2.6\u4ee5\u540e\u7684\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e2d\uff0c\u9700\u5173\u5fc3\u603b\u7ebf\u3001\u8bbe\u5907\u548c\u9a71\u52a8\u8fd93\u4e2a\u5b9e\u4f53\uff0c\u603b\u7ebf\u5c06\u8bbe\u5907\u548c\u9a71\u52a8\u7ed1\u5b9a\u3002\u5728\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u8bbe\u5907\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u9a71\u52a8\uff1b\u76f8\u53cd\u7684\uff0c\u5728\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u8bbe\u5907\uff0c\u800c\u5339\u914d\u7531\u603b\u7ebf\u5b8c\u6210\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3",slug:"/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8",draft:!1,editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.2\u3000platform\u8bbe\u5907\u9a71\u52a8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"12.1\u3000Linux\u9a71\u52a8\u7684\u8f6f\u4ef6\u67b6\u6784",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.1\u3000Linux\u9a71\u52a8\u7684\u8f6f\u4ef6\u67b6\u6784"},next:{title:"12.3.1\u3000\u8bbe\u5907\u9a71\u52a8\u6838\u5fc3\u5c42\u548c\u4f8b\u5316",permalink:"/docs/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.3\u3000\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42\u601d\u60f3"}},c={},u=[],_={toc:u};function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},_,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"1221platform\u603b\u7ebf\u8bbe\u5907\u4e0e\u9a71\u52a8"},"12.2.1\u3000platform\u603b\u7ebf\u3001\u8bbe\u5907\u4e0e\u9a71\u52a8"),(0,l.kt)("p",null,"\u5728Linux 2.6\u4ee5\u540e\u7684\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e2d\uff0c\u9700\u5173\u5fc3\u603b\u7ebf\u3001\u8bbe\u5907\u548c\u9a71\u52a8\u8fd93\u4e2a\u5b9e\u4f53\uff0c\u603b\u7ebf\u5c06\u8bbe\u5907\u548c\u9a71\u52a8\u7ed1\u5b9a\u3002\u5728\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u8bbe\u5907\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u9a71\u52a8\uff1b\u76f8\u53cd\u7684\uff0c\u5728\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u8bbe\u5907\uff0c\u800c\u5339\u914d\u7531\u603b\u7ebf\u5b8c\u6210\u3002"),(0,l.kt)("p",null,"\u4e00\u4e2a\u73b0\u5b9e\u7684Linux\u8bbe\u5907\u548c\u9a71\u52a8\u901a\u5e38\u90fd\u9700\u8981\u6302\u63a5\u5728\u4e00\u79cd\u603b\u7ebf\u4e0a\uff0c\u5bf9\u4e8e\u672c\u8eab\u4f9d\u9644\u4e8ePCI\u3001USB\u3001I2 C\u3001SPI\u7b49\u7684\u8bbe\u5907\u800c\u8a00\uff0c\u8fd9\u81ea\u7136\u4e0d\u662f\u95ee\u9898\uff0c\u4f46\u662f\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u91cc\u9762\uff0c\u5728SoC\u7cfb\u7edf\u4e2d\u96c6\u6210\u7684\u72ec\u7acb\u5916\u8bbe\u63a7\u5236\u5668\u3001\u6302\u63a5\u5728SoC\u5185\u5b58\u7a7a\u95f4\u7684\u5916\u8bbe\u7b49\u5374\u4e0d\u4f9d\u9644\u4e8e\u6b64\u7c7b\u603b\u7ebf\u3002\u57fa\u4e8e\u8fd9\u4e00\u80cc\u666f\uff0cLinux\u53d1\u660e\u4e86\u4e00\u79cd\u865a\u62df\u7684\u603b\u7ebf\uff0c\u79f0\u4e3aplatform\u603b\u7ebf\uff0c\u76f8\u5e94\u7684\u8bbe\u5907\u79f0\u4e3aplatform_device\uff0c\u800c\u9a71\u52a8\u6210\u4e3aplatform_driver"),(0,l.kt)("p",null,"\u6ce8\u610f\uff1a \u6240\u8c13\u7684platform_device\u5e76\u4e0d\u662f\u4e0e\u5b57\u7b26\u8bbe\u5907\u3001\u5757\u8bbe\u5907\u548c\u7f51\u7edc\u8bbe\u5907\u5e76\u5217\u7684\u6982\u5ff5\uff0c\u800c\u662fLinux\u7cfb\u7edf\u63d0\u4f9b\u7684\u4e00\u79cd\u9644\u52a0\u624b\u6bb5\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u901a\u5e38\u628a\u5728SoC\u5185\u90e8\u96c6\u6210\u7684I2 C\u3001RTC\u3001LCD\u3001\u770b\u95e8\u72d7\u7b49\u63a7\u5236\u5668\u90fd\u5f52\u7eb3\u4e3aplatform_device\uff0c\u800c\u5b83\u4eec\u672c\u8eab\u5c31\u662f\u5b57\u7b26\u8bbe\u5907\u3002platform_device\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535512.1\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.1\u3000platform_device\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct platform_device {\n 2  const char    *name;\n 3  int        id;\n 4  boo    id_auto;\n 5  struct devicedev;\n 6  u32       num_resources;\n 7  struct resource    *resource;\n 8\n 9  const struct platform_device_id    *id_entry;\n10  char *driver_override; /* Driver name to force a match */\n11\n12  /* MFD cell pointer */\n13  struct mfd_cell *mfd_cell;\n14\n15  /* arch specific additions */\n16  struct pdev_archdata    archdata;\n17};\n")),(0,l.kt)("p",null,"platform_driver\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5305\u542bprobe\uff08\uff09\u3001remove\uff08\uff09\u3001\u4e00\u4e2adevice_driver\u5b9e\u4f8b\u3001\u7535\u6e90\u7ba1\u7406\u51fd\u6570suspend\uff08\uff09\u3001resume\uff08\uff09\uff0c\u5982\u4ee3\u7801\u6e05\u535512.2\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.2\u3000platform_driver\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct platform_driver {\n 2 int (*probe)(struct platform_device *);\n 3 int (*remove)(struct platform_device *);\n 4 void (*shutdown)(struct platform_device *);\n 5 int (*suspend)(struct platform_device *, pm_message_t state);\n 6 int (*resume)(struct platform_device *);\n 7 struct device_driver driver;\n 8 const struct platform_device_id *id_table;\n 9 bool prevent_deferred_probe;\n10};\n")),(0,l.kt)("p",null,"\u76f4\u63a5\u586b\u5145platform_driver\u7684suspend\uff08\uff09\u3001resume\uff08\uff09\u505a\u7535\u6e90\u7ba1\u7406\u56de\u8c03\u7684\u65b9\u6cd5\u76ee\u524d\u5df2\u7ecf\u8fc7\u65f6\uff0c\u8f83\u597d\u7684\u505a\u6cd5\u662f\u5b9e\u73b0platform_driver\u7684device_driver\u4e2d\u7684dev_pm_ops\u7ed3\u6784\u4f53\u6210\u5458\uff08\u540e\u7eed\u7684Linux\u7535\u6e90\u7ba1\u7406\u7ae0\u8282\u4f1a\u5bf9\u6b64\u8fdb\u884c\u66f4\u7ec6\u81f4\u7684\u4ecb\u7ecd\uff09\uff0c\u4ee3\u7801\u6e05\u535512.3\u7ed9\u51fa\u4e86device_driver\u7684\u5b9a\u4e49\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.3\u3000device_driver\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1struct device_driver {\n 2       const char              *name;\n 3       struct bus_type         *bus;\n 4\n 5       struct module           *owner;\n 6       const char              *mod_name;  /* used for built-in modules */\n 7\n 8       bool suppress_bind_attrs;           /* disables bind/unbind via sysfs */\n 9\n10       const struct of_device_id           *of_match_table;\n11       const struct acpi_device_id         *acpi_match_table;\n12\n13       int (*probe) (struct device *dev);\n14       int (*remove) (struct device *dev);\n15       void (*shutdown) (struct device *dev);\n16       int (*suspend) (struct device *dev, pm_message_t state);\n17       int (*resume) (struct device *dev);\n18       const struct attribute_group **groups;\n19\n20       const struct dev_pm_ops *pm;\n21\n22       struct driver_private *p;\n23};\n")),(0,l.kt)("p",null,"\u4e0eplatform_driver\u5730\u4f4d\u5bf9\u7b49\u7684i2c_driver\u3001spi_driver\u3001usb_driver\u3001pci_driver\u4e2d\u90fd\u5305\u542b\u4e86device_driver\u7ed3\u6784\u4f53\u5b9e\u4f8b\u6210\u5458\u3002\u5b83\u5176\u5b9e\u63cf\u8ff0\u4e86\u5404\u79cdxxx_driver\uff08xxx\u662f\u603b\u7ebf\u540d\uff09\u5728\u9a71\u52a8\u610f\u4e49\u4e0a\u7684\u4e00\u4e9b\u5171\u6027\u3002"),(0,l.kt)("p",null,"\u7cfb\u7edf\u4e3aplatform\u603b\u7ebf\u5b9a\u4e49\u4e86\u4e00\u4e2abus_type\u7684\u5b9e\u4f8bplatform_bus_type\uff0c\u5176\u5b9a\u4e49\u4f4d\u4e8edrivers/base/platform.c\u4e0b\uff0c\u5982\u4ee3\u7801\u6e05\u535512.4\u6240\u793a"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.4\u3000platform\u603b\u7ebf\u7684bus_type\u5b9e\u4f8bplatform_bus_type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'1struct bus_type platform_bus_type = {\n2       .name           = "platform",\n3       .dev_groups     = platform_dev_groups,\n4       .match          = platform_match,\n5       .uevent         = platform_uevent,\n6       .pm             = &platform_dev_pm_ops,\n7};\n')),(0,l.kt)("p",null,"\u8fd9\u91cc\u8981\u91cd\u70b9\u5173\u6ce8\u5176match\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u6b63\u662f\u6b64\u6210\u5458\u51fd\u6570\u786e\u5b9a\u4e86platform_device\u548cplatform_driver\u4e4b\u95f4\u662f\u5982\u4f55\u8fdb\u884c\u5339\u914d\uff0c\u5982\u4ee3\u7801\u6e05\u535512.5\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.5\u3000platform_bus_type\u7684match\uff08\uff09\u6210\u5458\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1static int platform_match(struct device *dev, struct device_driver *drv)\n 2{\n 3       struct platform_device *pdev = to_platform_device(dev);\n 4       struct platform_driver *pdrv = to_platform_driver(drv);\n 5\n 6       /* Attempt an OF style match first */\n 7       if (of_driver_match_device(dev, drv))\n 8              return 1;\n 9\n10       /* Then try ACPI style match */\n11       if (acpi_driver_match_device(dev, drv))\n12                return 1;\n13\n14       /* Then try to match against the id table */\n15       if (pdrv->id_table)\n16                return platform_match_id(pdrv->id_table, pdev) != NULL;\n17\n18       /* fall-back to driver name match */\n19       return (strcmp(pdev->name, drv->name) == 0);\n20}\n")),(0,l.kt)("p",null,"\u4ece\u4ee3\u7801\u6e05\u535512.5\u53ef\u4ee5\u770b\u51fa\uff0c\u5339\u914dplatform_device\u548cplatform_driver\u67094\u79cd\u53ef\u80fd\u6027\uff0c"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e00\u662f\u57fa\u4e8e\u8bbe\u5907\u6811\u98ce\u683c\u7684\u5339\u914d\uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u4e8c\u662f\u57fa\u4e8eACPI\u98ce\u683c\u7684\u5339\u914d\uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u4e09\u662f\u5339\u914dID\u8868\uff08\u5373platform_device\u8bbe\u5907\u540d\u662f\u5426\u51fa\u73b0\u5728platform_driver\u7684ID\u8868\u5185\uff09\uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u7b2c\u56db\u79cd\u662f\u5339\u914dplatform_device\u8bbe\u5907\u540d\u548c\u9a71\u52a8\u7684\u540d\u5b57\u3002")),(0,l.kt)("p",null,"\u5bf9\u4e8eLinux 2.6ARM\u5e73\u53f0\u800c\u8a00\uff0c\u5bf9platform_device\u7684\u5b9a\u4e49\u901a\u5e38\u5728BSP\u7684\u677f\u6587\u4ef6\u4e2d\u5b9e\u73b0\uff0c\u5728\u677f\u6587\u4ef6\u4e2d\uff0c\u5c06platform_device\u5f52\u7eb3\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u6700\u7ec8\u901a\u8fc7platform_add_devices\uff08\uff09\u51fd\u6570\u7edf\u4e00\u6ce8\u518c\u3002platform_add_devices\uff08\uff09\u51fd\u6570\u53ef\u4ee5\u5c06\u5e73\u53f0\u8bbe\u5907\u6dfb\u52a0\u5230\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u539f\u578b\u4e3a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"int platform_add_devices(struct platform_device **devs, int num);\n")),(0,l.kt)("p",null,"\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5e73\u53f0\u8bbe\u5907\u6570\u7ec4\u7684\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5e73\u53f0\u8bbe\u5907\u7684\u6570\u91cf\uff0c\u5b83\u5185\u90e8\u8c03\u7528\u4e86platform_device_register\uff08\uff09\u51fd\u6570\u4ee5\u6ce8\u518c\u5355\u4e2a\u7684\u5e73\u53f0\u8bbe\u5907\u3002"),(0,l.kt)("p",null,"Linux 3.x\u4e4b\u540e\uff0cARM Linux\u4e0d\u592a\u559c\u6b22\u4eba\u4eec\u4ee5\u7f16\u7801\u7684\u5f62\u5f0f\u53bb\u586b\u5199platform_device\u548c\u6ce8\u518c\uff0c\u800c\u503e\u5411\u4e8e\u6839\u636e\u8bbe\u5907\u6811\u4e2d\u7684\u5185\u5bb9\u81ea\u52a8\u5c55\u5f00platform_device\u3002"),(0,l.kt)("h1",{id:"1222\u5c06globalfifo\u4f5c\u4e3aplatform\u8bbe\u5907"},"12.2.2\u3000\u5c06globalfifo\u4f5c\u4e3aplatform\u8bbe\u5907"),(0,l.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u5c06\u524d\u9762\u7ae0\u8282\u7684globalfifo\u9a71\u52a8\u6302\u63a5\u5230platform\u603b\u7ebf\u4e0a\uff0c\u8fd9\u8981\u5b8c\u6210\u4e24\u4e2a\u5de5\u4f5c\u3002"),(0,l.kt)("p",null,"1\uff09\u5c06globalfifo\u79fb\u690d\u4e3aplatform\u9a71\u52a8\u3002"),(0,l.kt)("p",null,"2\uff09\u5728\u677f\u6587\u4ef6\u4e2d\u6dfb\u52a0globalfifo\u8fd9\u4e2aplatform\u8bbe\u5907\u3002"),(0,l.kt)("p",null,"\u4e3a\u5b8c\u6210\u5c06globalfifo\u79fb\u690d\u5230platform\u9a71\u52a8\u7684\u5de5\u4f5c\uff0c\u9700\u8981\u5728\u539f\u59cb\u7684globalfifo\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u4e2d\u5957\u4e00\u5c42platform_driver\u7684\u5916\u58f3\uff0c\u5982\u4ee3\u7801\u6e05\u535512.6\u6240\u793a\u3002\u6ce8\u610f\u8fdb\u884c\u8fd9\u4e00\u5de5\u4f5c\u540e\uff0c\u5e76\u6ca1\u6709\u6539\u53d8globalfifo\u662f\u5b57\u7b26\u8bbe\u5907\u7684\u672c\u8d28\uff0c\u53ea\u662f\u5c06\u5176\u6302\u63a5\u5230\u4e86platform\u603b\u7ebf\u4e0a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.6\u3000\u4e3aglobalfifo\u6dfb\u52a0platform_driver"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static int globalfifo_probe(struct platform_device *pdev)\n 2{\n 3       int ret;\n 4       dev_t devno = MKDEV(globalfifo_major, 0);\n 5\n 6       if (globalfifo_major)\n 7              ret = register_chrdev_region(devno, 1, "globalfifo");\n 8       else {\n 9              ret = alloc_chrdev_region(&devno, 0, 1, "globalfifo");\n10              globalfifo_major = MAJOR(devno);\n11       }\n12       if (ret < 0)\n13              return ret;\n14\n15           globalfifo_devp = devm_kzalloc(&pdev->dev, sizeof(*globalfifo_devp),\n             GFP_KERNEL);\n16       if (!globalfifo_devp) {\n17              ret = -ENOMEM;\n18              goto fail_malloc;\n19       }\n20\n21       globalfifo_setup_cdev(globalfifo_devp, 0);\n22\n23       mutex_init(&globalfifo_devp->mutex);\n24       init_waitqueue_head(&globalfifo_devp->r_wait);\n25       init_waitqueue_head(&globalfifo_devp->w_wait);\n26\n27       return 0;\n28\n29fail_malloc:\n30       unregister_chrdev_region(devno, 1);\n31       return ret;\n32}\n33\n34static int globalfifo_remove(struct platform_device *pdev)\n35{\n36       cdev_del(&globalfifo_devp->cdev);\n37       unregister_chrdev_region(MKDEV(globalfifo_major, 0), 1);\n38\n39       return 0;\n40}\n41\n42static struct platform_driver globalfifo_driver = {\n43       .driver = {\n44               .name = "globalfifo",\n45               .owner = THIS_MODULE,\n46       },\n47       .probe = globalfifo_probe,\n48       .remove = globalfifo_remove,\n49};\n50\n51module_platform_driver(globalfifo_driver);\n')),(0,l.kt)("p",null,"\u5728\u4ee3\u7801\u6e05\u535512.6\u4e2d\uff0cmodule_platform_driver\uff08\uff09\u5b8f\u6240\u5b9a\u4e49\u7684\u6a21\u5757\u52a0\u8f7d\u548c\u5378\u8f7d\u51fd\u6570\u4ec5\u4ec5\u901a\u8fc7platform_driver_register\uff08\uff09\u3001platform_driver_unregister\uff08\uff09\u51fd\u6570\u8fdb\u884cplatform_driver\u7684\u6ce8\u518c\u4e0e\u6ce8\u9500\uff0c\u800c\u539f\u5148\u6ce8\u518c\u548c\u6ce8\u9500\u5b57\u7b26\u8bbe\u5907\u7684\u5de5\u4f5c\u5df2\u7ecf\u88ab\u79fb\u4ea4\u5230platform_driver\u7684probe\uff08\uff09\u548cremove\uff08\uff09\u6210\u5458\u51fd\u6570\u4e2d\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.6\u672a\u5217\u51fa\u7684\u90e8\u5206\u4e0e\u539f\u59cb\u7684globalfifo\u9a71\u52a8\u76f8\u540c\uff0c\u90fd\u662f\u5b9e\u73b0\u4f5c\u4e3a\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6838\u5fc3\u7684file_operations\u7684\u6210\u5458\u51fd\u6570\u3002\u6ce8\u518c\u5b8cglobalfifo\u5bf9\u5e94\u7684platform_driver\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0/sys/bus/platform/drivers\u76ee\u5f55\u4e0b\u591a\u51fa\u4e86\u4e00\u4e2a\u540d\u5b57\u53ebglobalfifo\u7684\u5b50\u76ee\u5f55\u3002"),(0,l.kt)("p",null,"\u4e3a\u4e86\u5b8c\u6210\u5728\u677f\u6587\u4ef6\u4e2d\u6dfb\u52a0globalfifo\u8fd9\u4e2aplatform\u8bbe\u5907\u7684\u5de5\u4f5c\uff0c\u9700\u8981\u5728\u677f\u6587\u4ef6arch/arm/mach-<soc\u540d>/mach-<\u677f\u540d>.c\uff09\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u4ee3\u7801\uff0c\u5982\u4ee3\u7801\u6e05\u535512.7\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.7\u3000\u4e0eglobalfifo\u5bf9\u5e94\u7684platform_device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'1static struct platform_device globalfifo_device = {\n2  .name         = "globalfifo",\n3  .id         = -1,\n4};\n')),(0,l.kt)("p",null,"\u5e76\u6700\u7ec8\u901a\u8fc7\u7c7b\u4f3c\u4e8eplatform_add_devices\uff08\uff09\u7684\u51fd\u6570\u628a\u8fd9\u4e2aplatform_device\u6ce8\u518c\u8fdb\u7cfb\u7edf\u3002\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u6211\u4eec\u4f1a\u5728/sys/devices/platform\u76ee\u5f55\u4e0b\u770b\u5230\u4e00\u4e2a\u540d\u5b57\u53ebglobalfifo\u7684\u5b50\u76ee\u5f55\uff0c/sys/devices/platform/globalfifo\u4e2d\u4f1a\u6709\u4e00\u4e2adriver\u6587\u4ef6\uff0c\u5b83\u662f\u6307\u5411/sys/bus/platform/drivers/globalfifo\u7684\u7b26\u53f7\u94fe\u63a5\uff0c\u8fd9\u8bc1\u660e\u9a71\u52a8\u548c\u8bbe\u5907\u5339\u914d\u4e0a\u4e86\u3002"),(0,l.kt)("h1",{id:"1223platform\u8bbe\u5907\u8d44\u6e90\u548c\u6570\u636e"},"12.2.3\u3000platform\u8bbe\u5907\u8d44\u6e90\u548c\u6570\u636e"),(0,l.kt)("p",null,"\u7559\u610f\u4e00\u4e0b\u4ee3\u7801\u6e05\u535512.1\u4e2dplatform_device\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u7b2c6~7\u884c\uff0c\u5b83\u4eec\u63cf\u8ff0\u4e86platform_device\u7684\u8d44\u6e90\uff0c\u8d44\u6e90\u672c\u8eab\u7531resource\u7ed3\u6784\u4f53\u63cf\u8ff0\uff0c\u5176\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535512.8\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.8\u3000resource\u7ed3\u6784\u4f53\u5b9a\u4e49"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1struct resource {\n2  resource__size_t start;\n3  resource_size_t end;\n4  const char *name;\n5  unsigned long flags;\n6  struct resource *parent, *sibling, *child;\n7};\n")),(0,l.kt)("p",null,"\u6211\u4eec\u901a\u5e38\u5173\u5fc3start\u3001end\u548cflags\u8fd93\u4e2a\u5b57\u6bb5\uff0c\u5b83\u4eec\u5206\u522b\u6807\u660e\u4e86\u8d44\u6e90\u7684\u5f00\u59cb\u503c\u3001\u7ed3\u675f\u503c\u548c\u7c7b\u578b\uff0cflags\u53ef\u4ee5\u4e3aIORESOURCE_IO\u3001IORESOURCE_MEM\u3001IORESOURCE_IRQ\u3001IORE-SOURCE_DMA\u7b49\u3002start\u3001end\u7684\u542b\u4e49\u4f1a\u968f\u7740flags\u800c\u53d8\u66f4\uff0c\u5982\u5f53flags\u4e3aIORESOURCE_MEM\u65f6\uff0cstart\u3001end\u5206\u522b\u8868\u793a\u8be5platform_device\u5360\u636e\u7684\u5185\u5b58\u7684\u5f00\u59cb\u5730\u5740\u548c\u7ed3\u675f\u5730\u5740\uff1b\u5f53flags\u4e3aIORESOURCE_IRQ\u65f6\uff0cstart\u3001end\u5206\u522b\u8868\u793a\u8be5platform_device\u4f7f\u7528\u7684\u4e2d\u65ad\u53f7\u7684\u5f00\u59cb\u503c\u548c\u7ed3\u675f\u503c\uff0c\u5982\u679c\u53ea\u4f7f\u7528\u4e861\u4e2a\u4e2d\u65ad\u53f7\uff0c\u5f00\u59cb\u548c\u7ed3\u675f\u503c\u76f8\u540c\u3002\u5bf9\u4e8e\u540c\u79cd\u7c7b\u578b\u7684\u8d44\u6e90\u800c\u8a00\uff0c\u53ef\u4ee5\u6709\u591a\u4efd\uff0c\u4f8b\u5982\u8bf4\u67d0\u8bbe\u5907\u5360\u636e\u4e86\u4e24\u4e2a\u5185\u5b58\u533a\u57df\uff0c\u5219\u53ef\u4ee5\u5b9a\u4e49\u4e24\u4e2aIORESOURCE_MEM\u8d44\u6e90\u3002"),(0,l.kt)("p",null,"\u5bf9resource\u7684\u5b9a\u4e49\u4e5f\u901a\u5e38\u5728BSP\u7684\u677f\u6587\u4ef6\u4e2d\u8fdb\u884c\uff0c\u800c\u5728\u5177\u4f53\u7684\u8bbe\u5907\u9a71\u52a8\u4e2d\u901a\u8fc7platform_get_resource\uff08\uff09\u8fd9\u6837\u7684API\u6765\u83b7\u53d6\uff0c\u6b64API\u7684\u539f\u578b\u4e3a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct resource *platform_get_resource(struct platform_device *, unsigned int,\n    unsigned int);\n")),(0,l.kt)("p",null,"\u4f8b\u5982\u5728arch/arm/mach-at91/board-sam9261ek.c\u677f\u6587\u4ef6\u4e2d\u4e3aDM9000\u7f51\u5361\u5b9a\u4e49\u4e86\u5982\u4e0bresouce\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"static struct resource dm9000_resource[] = {\n       [0] = {\n               .start  = AT91_CHIPSELECT_2,\n               .end    = AT91_CHIPSELECT_2+ 3,\n               .flags  = IORESOURCE_MEM\n       },\n       [1] = {\n               .start  = AT91_CHIPSELECT_2+ 0x44,\n               .end    = AT91_CHIPSELECT_2+ 0xFF,\n               .flags  = IORESOURCE_MEM\n       },\n       [2] = {\n               .flags  = IORESOURCE_IRQ\n                       | IORESOURCE_IRQ_LOWEDGE | IORESOURCE_IRQ_HIGHEDGE,\n       }\n};\n")),(0,l.kt)("p",null,"\u5728DM9000\u7f51\u5361\u7684\u9a71\u52a8\u4e2d\u5219\u662f\u901a\u8fc7\u5982\u4e0b\u529e\u6cd5\u62ff\u5230\u8fd93\u4efd\u8d44\u6e90\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"db->addr_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);\ndb->data_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);\ndb->irq_res  = platform_get_resource(pdev, IORESOURCE_IRQ, 0);\n")),(0,l.kt)("p",null,"\u5bf9\u4e8eIRQ\u800c\u8a00\uff0cplatform_get_resource\uff08\uff09\u8fd8\u6709\u4e00\u4e2a\u8fdb\u884c\u4e86\u5c01\u88c5\u7684\u53d8\u4f53platform_get_irq\uff08\uff09\uff0c\u5176\u539f\u578b\u4e3a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"int platform_get_irq(struct platform_device *dev, unsigned int num);\n")),(0,l.kt)("p",null,"\u5b83\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86\u201cplatform_get_resource\uff08dev\uff0cIORESOURCE_IRQ\uff0cnum\uff09\uff1b\u201d\u3002"),(0,l.kt)("p",null,"\u8bbe\u5907\u9664\u4e86\u53ef\u4ee5\u5728BSP\u4e2d\u5b9a\u4e49\u8d44\u6e90\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u9644\u52a0\u4e00\u4e9b\u6570\u636e\u4fe1\u606f\uff0c\u56e0\u4e3a\u5bf9\u8bbe\u5907\u7684\u786c\u4ef6\u63cf\u8ff0\u9664\u4e86\u4e2d\u65ad\u3001\u5185\u5b58\u7b49\u6807\u51c6\u8d44\u6e90\u4ee5\u5916\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\uff0c\u800c\u8fd9\u4e9b\u914d\u7f6e\u4fe1\u606f\u4e5f\u4f9d\u8d56\u4e8e\u677f\uff0c\u4e0d\u9002\u5b9c\u76f4\u63a5\u653e\u7f6e\u5728\u8bbe\u5907\u9a71\u52a8\u4e0a\u3002\u56e0\u6b64\uff0cplatform\u4e5f\u63d0\u4f9b\u4e86platform_data\u7684\u652f\u6301\uff0cplatform_data\u7684\u5f62\u5f0f\u662f\u7531\u6bcf\u4e2a\u9a71\u52a8\u81ea\u5b9a\u4e49\u7684\uff0c\u5982\u5bf9\u4e8eDM9000\u7f51\u5361\u800c\u8a00\uff0cplatform_data\u4e3a\u4e00\u4e2adm9000_plat_data\u7ed3\u6784\u4f53\uff0c\u5b8c\u6210\u5b9a\u4e49\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06MAC\u5730\u5740\u3001\u603b\u7ebf\u5bbd\u5ea6\u3001\u677f\u4e0a\u6709\u65e0EEPROM\u4fe1\u606f\u7b49\u653e\u5165platform_data\u4e2d\uff0c\u5982\u4ee3\u7801\u6e05\u535512.9\u6240\u793a\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.9\u3000platform_data\u7684\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' 1static struct dm9000_plat_data dm9000_platdata = {\n 2        .flags          = DM9000_PLATF_16BITONLY | DM9000_PLATF_NO_EEPROM,\n 3};\n 4\n 5static struct platform_device dm9000_device = {\n 6        .name           = "dm9000",\n 7        .id             = 0,\n 8        .num_resources  = ARRAY_SIZE(dm9000_resource),\n 9        .resource       = dm9000_resource,\n10        .dev            = {\n11                .platform_data  = &dm9000_platdata,\n12        }\n13};\n')),(0,l.kt)("p",null,"[\u63d2\u56fe]","\u800c\u5728DM9000\u7f51\u5361\u7684\u9a71\u52a8drivers/net/ethernet/davicom/dm9000.c\u7684probe\uff08\uff09\u4e2d\uff0c\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5c31\u62ff\u5230\u4e86platform_data\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct dm9000_plat_data *pdata = dev_get_platdata(&pdev->dev);\n")),(0,l.kt)("p",null,"\u5176\u4e2d\uff0cpdev\u4e3aplatform_device\u7684\u6307\u9488\u3002"),(0,l.kt)("p",null,"\u7531\u4ee5\u4e0a\u5206\u6790\u53ef\u77e5\uff0c\u5728\u8bbe\u5907\u9a71\u52a8\u4e2d\u5f15\u5165platform\u7684\u6982\u5ff5\u81f3\u5c11\u6709\u5982\u4e0b\u597d\u5904\u3002"),(0,l.kt)("p",null,"1\uff09\u4f7f\u5f97\u8bbe\u5907\u88ab\u6302\u63a5\u5728\u4e00\u4e2a\u603b\u7ebf\u4e0a\uff0c\u7b26\u5408Linux 2.6\u4ee5\u540e\u5185\u6838\u7684\u8bbe\u5907\u6a21\u578b\u3002\u5176\u7ed3\u679c\u662f\u4f7f\u914d\u5957\u7684sysfs\u8282\u70b9\u3001\u8bbe\u5907\u7535\u6e90\u7ba1\u7406\u90fd\u6210\u4e3a\u53ef\u80fd\u3002"),(0,l.kt)("p",null,"2\uff09\u9694\u79bbBSP\u548c\u9a71\u52a8\u3002\u5728BSP\u4e2d\u5b9a\u4e49platform\u8bbe\u5907\u548c\u8bbe\u5907\u4f7f\u7528\u7684\u8d44\u6e90\u3001\u8bbe\u5907\u7684\u5177\u4f53\u914d\u7f6e\u4fe1\u606f\uff0c\u800c\u5728\u9a71\u52a8\u4e2d\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u901a\u7528API\u53bb\u83b7\u53d6\u8d44\u6e90\u548c\u6570\u636e\uff0c\u505a\u5230\u4e86\u677f\u76f8\u5173\u4ee3\u7801\u548c\u9a71\u52a8\u4ee3\u7801\u7684\u5206\u79bb\uff0c\u4f7f\u5f97\u9a71\u52a8\u5177\u6709\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u548c\u8de8\u5e73\u53f0\u6027\u3002"),(0,l.kt)("p",null,"3\uff09\u8ba9\u4e00\u4e2a\u9a71\u52a8\u652f\u6301\u591a\u4e2a\u8bbe\u5907\u5b9e\u4f8b\u3002\u8b6c\u5982DM9000\u7684\u9a71\u52a8\u53ea\u6709\u4e00\u4efd\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u677f\u7ea7\u6dfb\u52a0\u591a\u4efdDM9000\u7684platform_device\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4e0e\u552f\u4e00\u7684\u9a71\u52a8\u5339\u914d\u3002"),(0,l.kt)("p",null,"\u5728Linux 3.x\u4e4b\u540e\u7684\u5185\u6838\u4e2d\uff0cDM9000\u9a71\u52a8\u5b9e\u9645\u4e0a\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7\u8bbe\u5907\u6811\u7684\u65b9\u6cd5\u88ab\u679a\u4e3e\uff0c\u53ef\u4ee5\u53c2\u89c1\u8865\u4e01net\uff1adm9000\uff1aAllow instantiation using device tree\uff08\u5185\u6838commit\u7684ID\u662f0b8bf1ba\uff09\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'index a2408c8..dd243a1 100644\n--- a/drivers/net/ethernet/davicom/dm9000.c\n+++ b/drivers/net/ethernet/davicom/dm9000.c\n@@ -29,6+29,8@@\n#include <linux/spinlock.h>\n#include <linux/crc32.h>\n#include <linux/mii.h>\n+#include <linux/of.h>\n+#include <linux/of_net.h>\n#include <linux/ethtool.h>\n#include <linux/dm9000.h>\n#include <linux/delay.h>\n@@ -1351,6+1353,31@@ static const struct net_device_ops dm9000_netdev_ops = {\n#endif\n};\n+static struct dm9000_plat_data *dm9000_parse_dt(struct device *dev)\n+{\n+ \u2026\n+}\n+\n/*\n* Search DM9000board, allocate space and register it\n*/\n@@ -1366,6+1393,12@@ dm9000_probe(struct platform_device *pdev)\nint i;\nu32id_val;\n+ if (!pdata) {\n+     pdata = dm9000_parse_dt(&pdev->dev);\n+     if (IS_ERR(pdata))\n+         return PTR_ERR(pdata);\n+ }\n+\n/* Init network device */\nndev = alloc_etherdev(sizeof(struct board_info));\nif (!ndev)\n@@ -1676,11+1709,20@@ dm9000_drv_remove(struct platform_device *pdev)\nreturn 0;\n}\n+#ifdef CONFIG_OF\n+static const struct of_device_id dm9000_of_matches[] = {\n+   { .compatible = "davicom,dm9000", },\n+   { /* sentinel */ }\n+};\n+MODULE_DEVICE_TABLE(of, dm9000_of_matches);\n+#endif\n+\nstatic struct platform_driver dm9000_driver = {\n    .driver = {\n    .name = "dm9000",\n    .owner = THIS_MODULE,\n    .pm = &dm9000_drv_pm_ops,\n+      .of_match_table = of_match_ptr(dm9000_of_matches),\n},\n.probe = dm9000_probe,\n.remove = dm9000_drv_remove,\n')),(0,l.kt)("p",null,"\u6539\u4e3a\u8bbe\u5907\u6811\u540e\uff0c\u5728\u677f\u4e0a\u6dfb\u52a0DM9000\u7f51\u5361\u7684\u52a8\u4f5c\u5c31\u53d8\u6210\u4e86\u7b80\u5355\u5730\u4fee\u6539dts\u6587\u4ef6\uff0c\u5982arch/arm/boot/dts/s3c6410-mini6410.dts\u4e2d\u5c31\u6709\u8fd9\u6837\u7684\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'srom-cs1@18000000 {\n        compatible = "simple-bus";\n        #address-cells = <1>;\n        #size-cells = <1>;\n        reg = <0x180000000x8000000>;\n        ranges;\n        ethernet@18000000{\n                compatible = "davicom,dm9000";\n                reg = <0x180000000x20x180000040x2>;\n                interrupt-parent = <&gpn>;\n                interrupts = <7IRQ_TYPE_LEVEL_HIGH>;\n                davicom,no-eeprom;\n        };\n};\n')))}f.isMDXComponent=!0}}]);