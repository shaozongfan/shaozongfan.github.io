"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[1191],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return u}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},_=Object.keys(e);for(n=0;n<_.length;n++)r=_[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var _=Object.getOwnPropertySymbols(e);for(n=0;n<_.length;n++)r=_[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=n.createContext({}),o=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,_=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=o(r),u=i,v=s["".concat(d,".").concat(u)]||s[u]||p[u]||_;return r?n.createElement(v,a(a({ref:t},l),{},{components:r})):n.createElement(v,a({ref:t},l))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var _=r.length,a=new Array(_);a[0]=s;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var o=2;o<_;o++)a[o]=r[o];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},73688:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return c},metadata:function(){return o},toc:function(){return p}});var n=r(87462),i=r(63366),_=(r(67294),r(3905)),a=["components"],c={},d=void 0,o={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.5\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u5b9e\u4f8b",description:"NVIDIA Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u4f4d\u4e8edrivers/i2c/busses/i2c-tegra.c\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u5177\u4f53\u7814\u7a76\u5b83\u7684\u786c\u4ef6\u7ec6\u8282\uff0c\u53ea\u770b\u4e00\u4e0b\u9a71\u52a8\u7684\u6846\u67b6\u548c\u6d41\u7a0b\u3002",date:"2025-09-15T14:44:14.893Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:6.82,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.5\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684ioctl\u51fd\u6570",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.5\u3000\u5757\u8bbe\u5907\u9a71\u52a8\u7684ioctl\u51fd\u6570"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/3.1\u3000Linux\u5185\u6838\u7684\u53d1\u5c55\u4e0e\u6f14\u53d8",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/3.1\u3000Linux\u5185\u6838\u7684\u53d1\u5c55\u4e0e\u6f14\u53d8"}},l={authorsImageUrls:[]},p=[],s={toc:p};function u(e){var t=e.components,r=(0,i.Z)(e,a);return(0,_.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,_.kt)("p",null,"NVIDIA Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u4f4d\u4e8edrivers/i2c/busses/i2c-tegra.c\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u5177\u4f53\u7814\u7a76\u5b83\u7684\u786c\u4ef6\u7ec6\u8282\uff0c\u53ea\u770b\u4e00\u4e0b\u9a71\u52a8\u7684\u6846\u67b6\u548c\u6d41\u7a0b\u3002"),(0,_.kt)("p",null,"I2 C\u603b\u7ebf\u9a71\u52a8\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u9a71\u52a8\uff0c\u5728\u6a21\u5757\u7684\u52a0\u8f7d\u548c\u5378\u8f7d\u51fd\u6570\u4e2d\uff0c\u53ea\u9700\u6ce8\u518c\u548c\u6ce8\u9500\u4e00\u4e2aplatform_driver\u7ed3\u6784\u4f53\uff0c\u5982\u4ee3\u7801\u6e05\u535515.18\u6240\u793a\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.18\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u7684\u6a21\u5757\u52a0\u8f7d\u4e0e\u5378\u8f7d"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"},' 1/* Match table for of_platform binding */\n 2static const struct of_device_id tegra_i2c_of_match[] = {\n 3    { .compatible = "nvidia,tegra114-i2c", .data = &tegra114_i2c_hw, },\n 4    { .compatible = "nvidia,tegra30-i2c", .data = &tegra30_i2c_hw, },\n 5    { .compatible = "nvidia,tegra20-i2c", .data = &tegra20_i2c_hw, },\n 6    { .compatible = "nvidia,tegra20-i2c-dvc", .data = &tegra20_i2c_hw, },\n 7    {},\n 8};\n 9MODULE_DEVICE_TABLE(of, tegra_i2c_of_match);\n10\n11static struct platform_driver tegra_i2c_driver = {\n12    .probe   = tegra_i2c_probe,\n13    .remove  = tegra_i2c_remove,\n14    .driver  = {\n15        .name  = "tegra-i2c",\n16        .owner = THIS_MODULE,\n17        .of_match_table = tegra_i2c_of_match,\n18        .pm    = TEGRA_I2C_PM,\n19    },\n20};\n21\n22static int __init tegra_i2c_init_driver(void)\n23{\n24    return platform_driver_register(&tegra_i2c_driver);\n25}\n26\n27static void __exit tegra_i2c_exit_driver(void)\n28{\n29    platform_driver_unregister(&tegra_i2c_driver);\n30}\n31\n32subsys_initcall(tegra_i2c_init_driver);\n33module_exit(tegra_i2c_exit_driver);\n')),(0,_.kt)("p",null,"\u5f53\u5728arch/arm/mach-tegra\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3ategra-i2c\u7684\u540c\u540dplatform_device\uff0c\u6216\u8005\u5728tegra\u7684\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0\u4e86tegra_i2c_of_match\u5339\u914d\u8868\u517c\u5bb9\u7684\u8282\u70b9\u540e\uff0c\u4e0a\u8ff0platform_driver\u4e2d\u7684probe\uff08\uff09\u51fd\u6570\u4f1a\u6267\u884c\u3002"),(0,_.kt)("p",null,"\u5f53\u5728arch/arm/mach-tegra\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3ategra-i2c\u7684\u540c\u540dplatform_device\uff0c\u6216\u8005\u5728tegra\u7684\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0\u4e86tegra_i2c_of_match\u5339\u914d\u8868\u517c\u5bb9\u7684\u8282\u70b9\u540e\uff0c\u4e0a\u8ff0platform_driver\u4e2d\u7684probe\uff08\uff09\u51fd\u6570\u4f1a\u6267\u884c\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.19\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u4e2d\u7684tegra_i2c_probe\uff08\uff09\u51fd\u6570"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"},' 1static int tegra_i2c_probe(struct platform_device *pdev)\n 2{\n 3    struct tegra_i2c_dev *i2c_dev;\n 4    struct resource *res;\n 5    struct clk *div_clk;\n 6    struct clk *fast_clk;\n 7    void __iomem *base;\n 8    int irq;\n 9    int ret = 0;\n10\n11    res = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n12    base = devm_ioremap_resource(&pdev->dev, res);\n13    ...\n14    res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);\n15    ...\n16    irq = res->start;\n17\n18    div_clk = devm_clk_get(&pdev->dev, "div-clk");\n19    ...\n20\n21    i2c_dev = devm_kzalloc(&pdev->dev, sizeof(*i2c_dev), GFP_KERNEL);\n22    ...\n23\n24    i2c_dev->base = base;\n25    i2c_dev->div_clk = div_clk;\n26    i2c_dev->adapter.algo = &tegra_i2c_algo;\n27    i2c_dev->irq = irq;\n28    i2c_dev->cont_id = pdev->id;\n29    i2c_dev->dev = &pdev->dev;\n30\n31    i2c_dev->rst = devm_reset_control_get(&pdev->dev, "i2c");\n32    ...\n33\n34    ret = of_property_read_u32(i2c_dev->dev->of_node, "clock-frequency",\n35                         &i2c_dev->bus_clk_rate);\n36    if (ret)\n37    i2c_dev->bus_clk_rate = 100000; /* default clock rate */\n38\n39    i2c_dev->hw = &tegra20_i2c_hw;\n40\n41    ...\n42    init_completion(&i2c_dev->msg_complete);\n43\n44    ...\n45\n46    platform_set_drvdata(pdev, i2c_dev);\n47\n48    ret = tegra_i2c_init(i2c_dev);\n49    ...\n50\n51    ret = devm_request_irq(&pdev->dev, i2c_dev->irq,\n52                      tegra_i2c_isr, 0, dev_name(&pdev->dev), i2c_dev);\n53    ...\n54\n55    i2c_set_adapdata(&i2c_dev->adapter, i2c_dev);\n56    i2c_dev->adapter.owner = THIS_MODULE;\n57    i2c_dev->adapter.class = I2C_CLASS_DEPRECATED;\n58    strlcpy(i2c_dev->adapter.name, "Tegra I2C adapter",\n59         sizeof(i2c_dev->adapter.name));\n60    i2c_dev->adapter.algo = &tegra_i2c_algo;\n61    i2c_dev->adapter.dev.parent = &pdev->dev;\n62    i2c_dev->adapter.nr = pdev->id;\n63    i2c_dev->adapter.dev.of_node = pdev->dev.of_node;\n64\n65    ret = i2c_add_numbered_adapter(&i2c_dev->adapter);\n66    ...\n67\n68    return 0;\n69}\n')),(0,_.kt)("p",null,"\u6709\u4e0etegra_i2c_probe\uff08\uff09\u51fd\u6570\u76f8\u53cd\u529f\u80fd\u7684\u51fd\u6570\u662ftegra_i2c_remove\uff08\uff09\u51fd\u6570\uff0c\u5b83\u5728\u9002\u914d\u5668\u6a21\u5757\u5378\u8f7d\u51fd\u6570\u8c03\u7528platform_driver_unregister\uff08\uff09\u51fd\u6570\u65f6\u901a\u8fc7platform_driver\u7684remove\u6307\u9488\u65b9\u5f0f\u88ab\u8c03\u7528\u3002tegra_i2c_remove\uff08\uff09\u7684\u4ee3\u7801\u5982\u6e05\u535515.20\u6240\u793a\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.20\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u4e2d\u7684tegra_i2c_remove\uff08\uff09\u51fd\u6570"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"}," 1static int tegra_i2c_remove(struct platform_device *pdev)\n 2{\n 3     struct tegra_i2c_dev *i2c_dev = platform_get_drvdata(pdev);\n 4     i2c_del_adapter(&i2c_dev->adapter);\n 5     return 0;\n 6}\n")),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.19\u548c\u4ee3\u7801\u6e05\u535515.20\u4e2d\u7684tegra_i2c_dev\u7ed3\u6784\u4f53\u53ef\u8fdb\u884c\u9002\u914d\u5668\u6240\u6709\u4fe1\u606f\u7684\u5c01\u88c5\uff0c\u7c7b\u4f3c\u4e8e\u79c1\u6709\u4fe1\u606f\u7ed3\u6784\u4f53\uff0c\u4ee3\u7801\u6e05\u535515.21\u6240\u793a\u4e3ategra_i2c_dev\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u3002\u6211\u4eec\u5728\u7f16\u7a0b\u4e2d\u8981\u65f6\u523b\u7262\u8bb0Linux\u8fd9\u4e2a\u7f16\u7a0b\u4e60\u60ef\uff0c\u8fd9\u5b9e\u9645\u4e0a\u4e5f\u662f\u9762\u5411\u5bf9\u8c61\u7684\u4e00\u79cd\u4f53\u73b0\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.21\u3000tegra_i2c_dev\u7ed3\u6784\u4f53"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"}," 1struct tegra_i2c_dev {\n 2    struct device *dev;\n 3    const struct tegra_i2c_hw_feature *hw;\n 4    struct i2c_adapter adapter;\n 5    struct clk *div_clk;\n 6    struct clk *fast_clk;\n 7    struct reset_control *rst;\n 8    void __iomem *base;\n 9    int cont_id;\n10    int irq;\n11    bool irq_disabled;\n12    int is_dvc;\n13    struct completion msg_complete;\n14    int msg_err;\n15    u8 *msg_buf;\n16    size_t msg_buf_remaining;\n17    int msg_read;\n18    u32 bus_clk_rate;\n19    bool is_suspended;\n20};\n")),(0,_.kt)("p",null,"tegra_i2c_probe\uff08\uff09\u51fd\u6570\u4e2d\u7684platform_set_drvdata\uff08pdev\uff0ci2c_dev\uff09\u548ci2c_set_adapdata\uff08&i2c_dev->adapter\uff0ci2c_dev\uff09\u5df2\u7ecf\u628a\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u4f9d\u9644\u5230\u4e86platform_device\u548ci2c_adapter\u7684\u79c1\u6709\u6570\u636e\u4e0a\u4e86\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u53ea\u8981\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u53d6\u51fa\u6765\u3002"),(0,_.kt)("p",null,"\u7531\u4ee3\u7801\u6e05\u535515.19\u7684\u7b2c60\u884c\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0eI2 C\u9002\u914d\u5668\u5bf9\u5e94\u7684i2c_algorithm\u7ed3\u6784\u4f53\u5b9e\u4f8b\u4e3ategra_i2c_algo\uff0c\u4ee3\u7801\u6e05\u535515.22\u7ed9\u51fa\u4e3ategra_i2c_algo\u7684\u5b9a\u4e49\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.22\u3000tegra_i2c_algo\u7ed3\u6784\u4f53"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"}," 1static const struct i2c_algorithm tegra_i2c_algo = {\n 2    .master_xfer      = tegra_i2c_xfer,\n 3    .functionality    = tegra_i2c_func,\n 4};\n")),(0,_.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7b2c\u4e00\u884c\u6307\u5b9a\u4e86Tegra I2 C\u603b\u7ebf\u901a\u4fe1\u4f20\u8f93\u51fd\u6570tegra_i2c_xfer\uff08\uff09\uff0c\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u5173\u952e\uff0c\u6240\u6709\u5728I2 C\u603b\u7ebf\u4e0a\u5bf9\u8bbe\u5907\u7684\u8bbf\u95ee\u6700\u7ec8\u5e94\u8be5\u7531\u5b83\u6765\u5b8c\u6210\uff0c\u4ee3\u7801\u6e05\u535515.23\u6240\u793a\u4e3a\u8fd9\u4e2a\u91cd\u8981\u51fd\u6570\u4ee5\u53ca\u5176\u4f9d\u8d56\u7684tegra_i2c_xfer_msg\uff08\uff09\u51fd\u6570\u7684\u6e90\u4ee3\u7801\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.23\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u7684tegra_i2c_xfer\uff08\uff09\u51fd\u6570"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"}," 1static int tegra_i2c_xfer_msg(struct tegra_i2c_dev *i2c_dev,\n 2    struct i2c_msg *msg, enum msg_end_type end_state)\n 3{\n 4    ...\n 5    i2c_dev->msg_buf = msg->buf;\n 6    i2c_dev->msg_buf_remaining = msg->len;\n 7    i2c_dev->msg_err = I2C_ERR_NONE;\n 8    i2c_dev->msg_read = (msg->flags & I2C_M_RD);\n 9    reinit_completion(&i2c_dev->msg_complete);\n10\n11    packet_header = (0 << PACKET_HEADER0_HEADER_SIZE_SHIFT) |\n12              PACKET_HEADER0_PROTOCOL_I2C |\n13              (i2c_dev->cont_id << PACKET_HEADER0_CONT_ID_SHIFT) |\n14              (1 << PACKET_HEADER0_PACKET_ID_SHIFT);\n15    i2c_writel(i2c_dev, packet_header, I2C_TX_FIFO);\n16\n17    packet_header = msg->len - 1;\n18    i2c_writel(i2c_dev, packet_header, I2C_TX_FIFO);\n19\n20    ...\n21\n22    ret = wait_for_completion_timeout(&i2c_dev->msg_complete, TEGRA_I2C_TIMEOUT);\n23    ...\n24}\n25\n26static int tegra_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[],\n27    int num)\n28{\n29    struct tegra_i2c_dev *i2c_dev = i2c_get_adapdata(adap);\n30    int i;\n31    int ret = 0;\n32\n33    ...\n34\n35    for (i = 0; i < num; i++) {\n36         enum msg_end_type end_type = MSG_END_STOP;\n37         if (i < (num - 1)) {\n38              if (msgs[i + 1].flags & I2C_M_NOSTART)\n39                   end_type = MSG_END_CONTINUE;\n40              else\n41                   end_type = MSG_END_REPEAT_START;\n42         }\n43         ret = tegra_i2c_xfer_msg(i2c_dev, &msgs[i], end_type);\n44         if (ret)\n45              break;\n46    }\n47    tegra_i2c_clock_disable(i2c_dev);\n48    return ret  : i;\n49}\n")),(0,_.kt)("p",null,"\u4ece\u4ee3\u7801\u5c42\u9762\u4e0a\u770b\uff0c\u7b2c35\u884c\u7684for\u5faa\u73af\u904d\u5386\u6240\u6709\u7684i2c_msg\uff0c\u800c\u6bcf\u4e2ai2c_msg\u5219\u7531tegra_i2c_xfer_msg\uff08\uff09\u51fd\u6570\u5904\u7406\uff0c\u5b83\u6bcf\u6b21\u53d1\u8d77\u786c\u4ef6\u64cd\u4f5c\u540e\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u901a\u8fc7wait_for_completion_timeout\uff08\uff09\u7b49\u5f85\u4f20\u8f93\u7684\u5b8c\u6210\uff0c\u56e0\u6b64\u8fd9\u91cc\u9762\u5c31\u4f1a\u6709\u4e00\u4e2a\u88ab\u8c03\u5ea6\u51fa\u53bb\u7684\u8fc7\u7a0b\u3002\u4e2d\u65ad\u5230\u6765\u4e14I2 C\u7684\u5305\u4f20\u8f93\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5c31\u662f\u5524\u9192\u8fd9\u4e2a\u7761\u7720\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5982\u4ee3\u7801\u6e05\u535515.24\u6240\u793a\u3002"),(0,_.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.24\u3000Tegra I2 C\u603b\u7ebf\u9a71\u52a8\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f"),(0,_.kt)("pre",null,(0,_.kt)("code",{parentName:"pre"}," 1static irqreturn_t tegra_i2c_isr(int irq, void *dev_id)\n 2{\n 3    ...\n 4\n 5    if (status & I2C_INT_PACKET_XFER_COMPLETE) {\n 6         BUG_ON(i2c_dev->msg_buf_remaining);\n 7         complete(&i2c_dev->msg_complete);\n 8    }\n 9    return IRQ_HANDLED;\n10    ...\n11}\n")))}u.isMDXComponent=!0}}]);