"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[57654],{3905:function(e,t,n){n.d(t,{Zo:function(){return o},kt:function(){return _}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},o=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),p=u(n),_=r,m=p["".concat(s,".").concat(_)]||p[_]||d[_]||c;return n?i.createElement(m,a(a({ref:t},o),{},{components:n})):i.createElement(m,a({ref:t},o))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<c;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},32036:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return _},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var i=n(87462),r=n(63366),c=(n(67294),n(3905)),a=["components"],l={},s=void 0,u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.1\u3000Linux I2 C\u4f53\u7cfb\u7ed3\u6784",description:"Linux\u7684I2 C\u4f53\u7cfb\u7ed3\u6784\u5206\u4e3a3\u4e2a\u7ec4\u6210\u90e8\u5206\u3002",date:"2025-09-15T14:44:14.541Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:12.835,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.2\u3000Linux\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u67b6\u6784",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/10.2\u3000Linux\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u67b6\u6784"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/11.7\u3000\u603b\u7ed3",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/11.7\u3000\u603b\u7ed3"}},o={authorsImageUrls:[]},d=[],p={toc:d};function _(e){var t=e.components,l=(0,r.Z)(e,a);return(0,c.kt)("wrapper",(0,i.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Linux\u7684I2 C\u4f53\u7cfb\u7ed3\u6784\u5206\u4e3a3\u4e2a\u7ec4\u6210\u90e8\u5206\u3002"),(0,c.kt)("p",null,"\uff081\uff09I2 C\u6838\u5fc3"),(0,c.kt)("p",null,"I2 C\u6838\u5fc3\u63d0\u4f9b\u4e86I2 C\u603b\u7ebf\u9a71\u52a8\u548c\u8bbe\u5907\u9a71\u52a8\u7684\u6ce8\u518c\u3001\u6ce8\u9500\u65b9\u6cd5\uff0cI2 C\u901a\u4fe1\u65b9\u6cd5\uff08\u5373Algorithm\uff09\u4e0a\u5c42\u7684\u4e0e\u5177\u4f53\u9002\u914d\u5668\u65e0\u5173\u7684\u4ee3\u7801\u4ee5\u53ca\u63a2\u6d4b\u8bbe\u5907\u3001\u68c0\u6d4b\u8bbe\u5907\u5730\u5740\u7684\u4e0a\u5c42\u4ee3\u7801\u7b49\uff0c\u5982\u56fe15.1\u6240\u793a\u3002"),(0,c.kt)("p",null,"\uff082\uff09I2 C\u603b\u7ebf\u9a71\u52a8"),(0,c.kt)("p",null,"I2 C\u603b\u7ebf\u9a71\u52a8\u662f\u5bf9I2 C\u786c\u4ef6\u4f53\u7cfb\u7ed3\u6784\u4e2d\u9002\u914d\u5668\u7aef\u7684\u5b9e\u73b0\uff0c\u9002\u914d\u5668\u53ef\u7531CPU\u63a7\u5236\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u96c6\u6210\u5728CPU\u5185\u90e8\u3002"),(0,c.kt)("p",null,"I2 C\u603b\u7ebf\u9a71\u52a8\u4e3b\u8981\u5305\u542bI2 C\u9002\u914d\u5668\u6570\u636e\u7ed3\u6784i2c_adapter\u3001I2 C\u9002\u914d\u5668\u7684Algorithm\u6570\u636e\u7ed3\u6784i2c_algorithm\u548c\u63a7\u5236I2 C\u9002\u914d\u5668\u4ea7\u751f\u901a\u4fe1\u4fe1\u53f7\u7684\u51fd\u6570\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"1744988278285",src:n(28914).Z,width:"771",height:"1063"})),(0,c.kt)("p",null,"\u56fe15.1\u3000Linux\u7684I2 C\u4f53\u7cfb\u7ed3\u6784"),(0,c.kt)("p",null,"\u7ecf\u7531I2 C\u603b\u7ebf\u9a71\u52a8\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236I2 C\u9002\u914d\u5668\u4ee5\u4e3b\u63a7\u65b9\u5f0f\u4ea7\u751f\u5f00\u59cb\u4f4d\u3001\u505c\u6b62\u4f4d\u3001\u8bfb\u5199\u5468\u671f\uff0c\u4ee5\u53ca\u4ee5\u4ece\u8bbe\u5907\u65b9\u5f0f\u88ab\u8bfb\u5199\u3001\u4ea7\u751fACK\u7b49\u3002"),(0,c.kt)("p",null,"\uff083\uff09I2 C\u8bbe\u5907\u9a71\u52a8"),(0,c.kt)("p",null,"I2 C\u8bbe\u5907\u9a71\u52a8\uff08\u4e5f\u79f0\u4e3a\u5ba2\u6237\u9a71\u52a8\uff09\u662f\u5bf9I2 C\u786c\u4ef6\u4f53\u7cfb\u7ed3\u6784\u4e2d\u8bbe\u5907\u7aef\u7684\u5b9e\u73b0\uff0c\u8bbe\u5907\u4e00\u822c\u6302\u63a5\u5728\u53d7CPU\u63a7\u5236\u7684I2 C\u9002\u914d\u5668\u4e0a\uff0c\u901a\u8fc7I2 C\u9002\u914d\u5668\u4e0eCPU\u4ea4\u6362\u6570\u636e\u3002"),(0,c.kt)("p",null,"I2 C\u8bbe\u5907\u9a71\u52a8\u4e3b\u8981\u5305\u542b\u6570\u636e\u7ed3\u6784i2c_driver\u548ci2c_client\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u5177\u4f53\u8bbe\u5907\u5b9e\u73b0\u5176\u4e2d\u7684\u6210\u5458\u51fd\u6570\u3002"),(0,c.kt)("p",null,"\u5728Linux 2.6\u5185\u6838\u4e2d\uff0c\u6240\u6709\u7684I2 C\u8bbe\u5907\u90fd\u5728sysfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u663e\u793a\uff0c\u5b58\u4e8e/sys/bus/i2c/\u76ee\u5f55\u4e0b\uff0c\u4ee5\u9002\u914d\u5668\u5730\u5740\u548c\u82af\u7247\u5730\u5740\u7684\u5f62\u5f0f\u5217\u51fa\uff0c\u4f8b\u5982\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"$ tree /sys/bus/i2c/\n/sys/bus/i2c/\n|-- devices\n|   |-- i2c0 -> ../../../devices/platform/versatile-i2c.0/i2c-0\n|   '-- i2c1 -> ../../../devices/platform/versatile-i2c.0/i2c-1\n'-- drivers\n    '-- dummy\n")),(0,c.kt)("p",null,"\u5728Linux\u5185\u6838\u6e90\u4ee3\u7801\u4e2d\u7684drivers\u76ee\u5f55\u4e0b\u6709\u4e00\u4e2ai2c\u76ee\u5f55\uff0c\u800c\u5728i2c\u76ee\u5f55\u4e0b\u53c8\u5305\u542b\u5982\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002"),(0,c.kt)("p",null,"\uff081\uff09i2c-core.c"),(0,c.kt)("p",null,"\u8fd9\u4e2a\u6587\u4ef6\u5b9e\u73b0\u4e86I2 C\u6838\u5fc3\u7684\u529f\u80fd\u4ee5\u53ca/proc/bus/i2c*\u63a5\u53e3\u3002"),(0,c.kt)("p",null,"\uff082\uff09i2c-dev.c"),(0,c.kt)("p",null,"\u5b9e\u73b0\u4e86I2 C\u9002\u914d\u5668\u8bbe\u5907\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u6bcf\u4e00\u4e2aI2 C\u9002\u914d\u5668\u90fd\u88ab\u5206\u914d\u4e00\u4e2a\u8bbe\u5907\u3002\u901a\u8fc7\u9002\u914d\u5668\u8bbf\u95ee\u8bbe\u5907\u65f6\u7684\u4e3b\u8bbe\u5907\u53f7\u90fd\u4e3a89\uff0c\u6b21\u8bbe\u5907\u53f7\u4e3a0~255\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u201ci2c-%d\u201d\uff08i2c-0\uff0ci2c-1\uff0c\u2026\uff0ci2c-10\uff0c\u2026\uff09\u6587\u4ef6\u540d\u5e76\u4f7f\u7528\u6587\u4ef6\u64cd\u4f5c\u63a5\u53e3open\uff08\uff09\u3001write\uff08\uff09\u3001read\uff08\uff09\u3001ioctl\uff08\uff09\u548cclose\uff08\uff09\u7b49\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8bbe\u5907\u3002"),(0,c.kt)("p",null,"i2c-dev.c\u5e76\u4e0d\u662f\u9488\u5bf9\u7279\u5b9a\u7684\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\uff0c\u53ea\u662f\u63d0\u4f9b\u4e86\u901a\u7528\u7684read\uff08\uff09\u3001write\uff08\uff09\u548cioctl\uff08\uff09\u7b49\u63a5\u53e3\uff0c\u5e94\u7528\u5c42\u53ef\u4ee5\u501f\u7528\u8fd9\u4e9b\u63a5\u53e3\u8bbf\u95ee\u6302\u63a5\u5728\u9002\u914d\u5668\u4e0a\u7684I2 C\u8bbe\u5907\u7684\u5b58\u50a8\u7a7a\u95f4\u6216\u5bc4\u5b58\u5668\uff0c\u5e76\u63a7\u5236I2 C\u8bbe\u5907\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002"),(0,c.kt)("p",null,"\uff083\uff09busses\u6587\u4ef6\u5939"),(0,c.kt)("p",null,"\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u4e00\u4e9bI2 C\u4e3b\u673a\u63a7\u5236\u5668\u7684\u9a71\u52a8\uff0c\u5982i2c-tegra.c\u3001i2c-omap.c\u3001i2c-versatile.c\u3001i2c-s3c2410.c\u7b49\u3002"),(0,c.kt)("p",null,"\uff084\uff09algos\u6587\u4ef6\u5939"),(0,c.kt)("p",null,"\u5b9e\u73b0\u4e86\u4e00\u4e9bI2 C\u603b\u7ebf\u9002\u914d\u5668\u7684\u901a\u4fe1\u65b9\u6cd5\u3002"),(0,c.kt)("p",null,"\u6b64\u5916\uff0c\u5185\u6838\u4e2d\u7684i2c.h\u5934\u6587\u4ef6\u5bf9i2c_adapter\u3001i2c_algorithm\u3001i2c_driver\u548ci2c_client\u8fd94\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002\u7406\u89e3\u8fd94\u4e2a\u7ed3\u6784\u4f53\u7684\u4f5c\u7528\u5341\u5206\u91cd\u8981\uff0c\u5b83\u4eec\u7684\u5b9a\u4e49\u4f4d\u4e8einclude/linux/i2c.h\u6587\u4ef6\u4e2d\uff0c\u4ee3\u7801\u6e05\u535515.1\u300115.2\u300115.3\u300115.4\u5206\u522b\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u63cf\u8ff0\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.1\u3000i2c_adapter\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_adapter {\n 2        struct module *owner;\n 3        unsigned int class;                 /* classes to allow probing for */\n 4        const struct i2c_algorithm *algo;   /* the algorithm to access the bus */\n 5        void *algo_data;\n 6\n 7        /* data fields that are valid for all devices   */\n 8        struct rt_mutex bus_lock;\n 9\n10        int timeout;                        /* in jiffies */\n11        int retries;\n12        struct device dev;                  /* the adapter device */\n13\n14        int nr;\n15        char name[48];\n16        struct completion dev_released;\n17\n18        struct mutex userspace_clients_lock;\n19        struct list_head userspace_clients;\n20\n21        struct i2c_bus_recovery_info *bus_recovery_info;\n22};\n")),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.2\u3000i2c_algorithm\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_algorithm {\n 2        /* If an adapter algorithm can't do I2C-level access, set master_xfer\n 3           to NULL. If an adapter algorithm can do SMBus access, set\n 4           smbus_xfer. If set to NULL, the SMBus protocol is simulated\n 5           using common I2C messages */\n 6        /* master_xfer should return the number of messages successfully\n 7           processed, or a negative value on error */\n 8        int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,\n 9                           int num);\n10        int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr,\n11                        unsigned short flags, char read_write,\n12                        u8 command, int size, union i2c_smbus_data *data);\n13\n14        /* To determine what the adapter supports */\n15        u32 (*functionality) (struct i2c_adapter *);\n16};\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u7b2c8\u884c\u4ee3\u7801\u5bf9\u5e94\u4e3aI2 C\u4f20\u8f93\u51fd\u6570\u6307\u9488\uff0cI2 C\u4e3b\u673a\u9a71\u52a8\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u4e5f\u805a\u96c6\u5728\u8fd9\u91cc\u3002\u4e0a\u8ff0\u7b2c10\u884c\u4ee3\u7801\u5bf9\u5e94\u4e3aSMBus\u4f20\u8f93\u51fd\u6570\u6307\u9488\uff0cSMBus\u4e0d\u9700\u8981\u589e\u52a0\u989d\u5916\u5f15\u811a\uff0c\u4e0eI2 C\u603b\u7ebf\u76f8\u6bd4\uff0c\u5728\u8bbf\u95ee\u65f6\u5e8f\u4e0a\u4e5f\u6709\u4e00\u5b9a\u7684\u5dee\u5f02\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.3\u3000i2c_driver\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_driver {\n 2        unsigned int class;\n 3\n 4        /* Notifies the driver that a new bus has appeared. You should avoid\n 5         * using this, it will be removed in a near future.\n 6         */\n 7        int (*attach_adapter)(struct i2c_adapter *) __deprecated;\n 8\n 9        /* Standard driver model interfaces */\n10        int (*probe)(struct i2c_client *, const struct i2c_device_id *);\n11        int (*remove)(struct i2c_client *);\n12\n13        /* driver model interfaces that don't relate to enumeration  */\n14        void (*shutdown)(struct i2c_client *);\n15        int (*suspend)(struct i2c_client *, pm_message_t mesg);\n16        int (*resume)(struct i2c_client *);\n17\n18        /* Alert callback, for example for the SMBus alert protocol.\n19         * The format and meaning of the data value depends on the protocol.\n20         * For the SMBus alert protocol, there is a single bit of data passed\n21         * as the alert response's low bit (\"event flag\").\n22         */\n23        void (*alert)(struct i2c_client *, unsigned int data);\n24\n25        /* a ioctl like command that can be used to perform specific functions\n26         * with the device.\n27         */\n28        int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);\n29\n30        struct device_driver driver;\n31        const struct i2c_device_id *id_table;\n32\n33        /* Device detection callback for automatic device creation */\n34        int (*detect)(struct i2c_client *, struct i2c_board_info *);\n35        const unsigned short *address_list;\n36        struct list_head clients;\n37};\n")),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.4\u3000i2c_client\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_client {\n 2        unsigned short flags;         /* div., see below            */\n 3        unsigned short addr;          /* chip address - NOTE: 7bit    */\n 4                                      /* addresses are stored in the  */\n 5                                      /* _LOWER_ 7 bits             */\n 6        char name[I2C_NAME_SIZE];\n 7        struct i2c_adapter *adapter;  /* the adapter we sit on        */\n 8        struct device dev;            /* the device structure         */\n 9        int irq;                      /* irq issued by device         */\n10        struct list_head detected;\n11};\n")),(0,c.kt)("p",null,"\u4e0b\u9762\u5206\u6790i2c_adapter\u3001i2c_algorithm\u3001i2c_driver\u548ci2c_client\u8fd94\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u4f5c\u7528\u53ca\u5176\u76d8\u6839\u9519\u8282\u7684\u5173\u7cfb\u3002"),(0,c.kt)("p",null,"\uff081\uff09i2c_adapter\u4e0ei2c_algorithm"),(0,c.kt)("p",null,"i2c_adapter\u5bf9\u5e94\u4e8e\u7269\u7406\u4e0a\u7684\u4e00\u4e2a\u9002\u914d\u5668\uff0c\u800ci2c_algorithm\u5bf9\u5e94\u4e00\u5957\u901a\u4fe1\u65b9\u6cd5\u3002\u4e00\u4e2aI2 C\u9002\u914d\u5668\u9700\u8981i2c_algorithm\u63d0\u4f9b\u7684\u901a\u4fe1\u51fd\u6570\u6765\u63a7\u5236\u9002\u914d\u5668\u4ea7\u751f\u7279\u5b9a\u7684\u8bbf\u95ee\u5468\u671f\u3002\u7f3a\u5c11i2c_algorithm\u7684i2c_adapter\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\uff0c\u56e0\u6b64i2c_adapter\u4e2d\u5305\u542b\u6240\u4f7f\u7528\u7684i2c_algorithm\u7684\u6307\u9488\u3002"),(0,c.kt)("p",null,"i2c_algorithm\u4e2d\u7684\u5173\u952e\u51fd\u6570master_xfer\uff08\uff09\u7528\u4e8e\u4ea7\u751fI2 C\u8bbf\u95ee\u5468\u671f\u9700\u8981\u7684\u4fe1\u53f7\uff0c\u4ee5i2c_msg\uff08\u5373I2 C\u6d88\u606f\uff09\u4e3a\u5355\u4f4d\u3002i2c_msg\u7ed3\u6784\u4f53\u4e5f\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u5b9a\u4e49\u4e8einclude/uapi/linux/i2c.h\uff08\u5728uapi\u76ee\u5f55\u4e0b\uff0c\u8bc1\u660e\u7528\u6237\u7a7a\u95f4\u7684\u5e94\u7528\u4e5f\u53ef\u80fd\u4f7f\u7528\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff09\u4e2d\uff0c\u4ee3\u7801\u6e05\u535515.5\u7ed9\u51fa\u4e86\u5b83\u7684\u5b9a\u4e49\uff0c\u5176\u4e2d\u7684\u6210\u5458\u8868\u660e\u4e86I2 C\u7684\u4f20\u8f93\u5730\u5740\u3001\u65b9\u5411\u3001\u7f13\u51b2\u533a\u3001\u7f13\u51b2\u533a\u957f\u5ea6\u7b49\u4fe1\u606f\u3002"),(0,c.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.5\u3000i2c_msg\u7ed3\u6784\u4f53"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"}," 1struct i2c_msg {\n 2        __u16 addr;                     /* slave address          */\n 3        __u16 flags;\n 4#define I2C_M_TEN             0x0010  /* this is a ten bit chip address */\n 5#define I2C_M_RD              0x0001  /* read data, from slave to master */\n 6#define I2C_M_STOP            0x8000  /* if I2C_FUNC_PROTOCOL_MANGLING */\n 7#define I2C_M_NOSTART         0x4000  /* if I2C_FUNC_NOSTART */\n 8#define I2C_M_REV_DIR_ADDR    0x2000  /* if I2C_FUNC_PROTOCOL_MANGLING */\n 9#define I2C_M_IGNORE_NAK      0x1000  /* if I2C_FUNC_PROTOCOL_MANGLING */\n10#define I2C_M_NO_RD_ACK       0x0800  /* if I2C_FUNC_PROTOCOL_MANGLING */\n11#define I2C_M_RECV_LEN        0x0400  /* length will be first received byte */\n12         __u16 len;                     /* msg length                 */\n13         __u8 *buf;                     /* pointer to msg data          */\n14};\n")),(0,c.kt)("p",null,"\uff082\uff09i2c_driver\u4e0ei2c_client"),(0,c.kt)("p",null,"i2c_driver\u5bf9\u5e94\u4e8e\u4e00\u5957\u9a71\u52a8\u65b9\u6cd5\uff0c\u5176\u4e3b\u8981\u6210\u5458\u51fd\u6570\u662fprobe\uff08\uff09\u3001remove\uff08\uff09\u3001suspend\uff08\uff09\u3001resume\uff08\uff09\u7b49\uff0c\u53e6\u5916\uff0cstruct i2c_device_id\u5f62\u5f0f\u7684id_table\u662f\u8be5\u9a71\u52a8\u6240\u652f\u6301\u7684I2 C\u8bbe\u5907\u7684ID\u8868\u3002i2c_client\u5bf9\u5e94\u4e8e\u771f\u5b9e\u7684\u7269\u7406\u8bbe\u5907\uff0c\u6bcf\u4e2aI2 C\u8bbe\u5907\u90fd\u9700\u8981\u4e00\u4e2ai2c_client\u6765\u63cf\u8ff0\u3002i2c_driver\u4e0ei2c_client\u7684\u5173\u7cfb\u662f\u4e00\u5bf9\u591a\uff0c\u4e00\u4e2ai2c_driver\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u540c\u7c7b\u578b\u7684i2c_client\u3002"),(0,c.kt)("p",null,"i2c_client\u7684\u4fe1\u606f\u901a\u5e38\u5728BSP\u7684\u677f\u6587\u4ef6\u4e2d\u901a\u8fc7i2c_board_info\u586b\u5145\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2aI2 C\u8bbe\u5907\u7684ID\u4e3a\u201cad7142_joystick\u201d\u3001\u5730\u5740\u4e3a0x2C\u3001\u4e2d\u65ad\u53f7\u4e3aIRQ_PF5\u7684i2c_client\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'static struct i2c_board_info __initdata xxx_i2c_board_info[] = {\n#if defined(CONfiG_JOYSTICK_AD7142) || defined(CONfiG_JOYSTICK_AD7142_MODULE)\n       {\n               I2C_BOARD_INFO("ad7142_joystick", 0x2C),\n               .irq = IRQ_PF5,\n       },\n...\n}\n')),(0,c.kt)("p",null,"\u5728I2 C\u603b\u7ebf\u9a71\u52a8i2c_bus_type\u7684match\uff08\uff09\u51fd\u6570i2c_device_match\uff08\uff09\u4e2d\uff0c\u4f1a\u8c03\u7528i2c_match_id\uff08\uff09\u51fd\u6570\u5339\u914d\u5728\u677f\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684ID\u548ci2c_driver\u6240\u652f\u6301\u7684ID\u8868\u3002"),(0,c.kt)("p",null,"\uff083\uff09i2c_adpater\u4e0ei2c_client"),(0,c.kt)("p",null,"i2c_adpater\u4e0ei2c_client\u7684\u5173\u7cfb\u4e0eI2 C\u786c\u4ef6\u4f53\u7cfb\u4e2d\u9002\u914d\u5668\u548c\u8bbe\u5907\u7684\u5173\u7cfb\u4e00\u81f4\uff0c\u5373i2c_client\u4f9d\u9644\u4e8ei2c_adpater\u3002\u7531\u4e8e\u4e00\u4e2a\u9002\u914d\u5668\u53ef\u4ee5\u8fde\u63a5\u591a\u4e2aI2 C\u8bbe\u5907\uff0c\u6240\u4ee5\u4e00\u4e2ai2c_adpater\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2ai2c_client\u4f9d\u9644\uff0ci2c_adpater\u4e2d\u5305\u62ec\u4f9d\u9644\u4e8e\u5b83\u7684i2c_client\u7684\u94fe\u8868\u3002"),(0,c.kt)("p",null,"\u5047\u8bbeI2 C\u603b\u7ebf\u9002\u914d\u5668xxx\u4e0a\u6709\u4e24\u4e2a\u4f7f\u7528\u76f8\u540c\u9a71\u52a8\u7a0b\u5e8f\u7684yyy I2 C\u8bbe\u5907\uff0c\u5728\u6253\u5f00\u8be5I2 C\u603b\u7ebf\u7684\u8bbe\u5907\u8282\u70b9\u540e\uff0c\u76f8\u5173\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u7684\u903b\u8f91\u7ec4\u7ec7\u5173\u7cfb\u5c06\u5982\u56fe15.2\u6240\u793a\u3002"),(0,c.kt)("p",null,(0,c.kt)("img",{alt:"image-20250418230357150",src:n(63903).Z,width:"1035",height:"1462"})),(0,c.kt)("p",null,"\u56fe15.2\u3000I2 C\u9a71\u52a8\u7684\u5404\u79cd\u6570\u636e\u7ed3\u6784\u7684\u5173\u7cfb"),(0,c.kt)("p",null,"\u4ece\u4e0a\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u867d\u7136I2 C\u786c\u4ef6\u4f53\u7cfb\u7ed3\u6784\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662fI2 C\u4f53\u7cfb\u7ed3\u6784\u5728Linux\u4e2d\u7684\u5b9e\u73b0\u5374\u76f8\u5f53\u590d\u6742\u3002\u5f53\u5de5\u7a0b\u5e08\u62ff\u5230\u5b9e\u9645\u7684\u7535\u8def\u677f\u65f6\uff0c\u9762\u5bf9\u590d\u6742\u7684Linux I2 C\u5b50\u7cfb\u7edf\uff0c\u5e94\u8be5\u5982\u4f55\u4e0b\u624b\u5199\u9a71\u52a8\u5462\uff1f\u7a76\u7adf\u6709\u54ea\u4e9b\u662f\u9700\u8981\u4eb2\u81ea\u505a\u7684\uff0c\u54ea\u4e9b\u662f\u5185\u6838\u5df2\u7ecf\u63d0\u4f9b\u7684\u5462\uff1f\u7406\u6e05\u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u5728\u9762\u5bf9\u5177\u4f53\u95ee\u9898\u65f6\u8fc5\u901f\u6293\u4f4f\u91cd\u70b9"),(0,c.kt)("p",null,"\u4e00\u65b9\u9762\uff0c\u9002\u914d\u5668\u9a71\u52a8\u53ef\u80fd\u662fLinux\u5185\u6838\u672c\u8eab\u8fd8\u4e0d\u5305\u542b\u7684\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u6302\u63a5\u5728\u9002\u914d\u5668\u4e0a\u7684\u5177\u4f53\u8bbe\u5907\u9a71\u52a8\u53ef\u80fd\u4e5f\u662fLinux\u5185\u6838\u8fd8\u4e0d\u5305\u542b\u7684\u3002\u56e0\u6b64\uff0c\u5de5\u7a0b\u5e08\u8981\u5b9e\u73b0\u7684\u4e3b\u8981\u5de5\u4f5c\u5982\u4e0b\u3002"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"\xb7\u63d0\u4f9bI2 C\u9002\u914d\u5668\u7684\u786c\u4ef6\u9a71\u52a8\uff0c\u63a2\u6d4b\u3001\u521d\u59cb\u5316I2 C\u9002\u914d\u5668\uff08\u5982\u7533\u8bf7I2 C\u7684I/O\u5730\u5740\u548c\u4e2d\u65ad\u53f7\uff09\u3001\u9a71\u52a8CPU\u63a7\u5236\u7684I2 C\u9002\u914d\u5668\u4ece\u786c\u4ef6\u4e0a\u4ea7\u751f\u5404\u79cd\u4fe1\u53f7\u4ee5\u53ca\u5904\u7406I2 C\u4e2d\u65ad\u7b49\u3002"),(0,c.kt)("li",{parentName:"ul"},"\xb7\u63d0\u4f9bI2 C\u9002\u914d\u5668\u7684Algorithm\uff0c\u7528\u5177\u4f53\u9002\u914d\u5668\u7684xxx_xfer\uff08\uff09\u51fd\u6570\u586b\u5145i2c_algorithm\u7684master_xfer\u6307\u9488\uff0c\u5e76\u628ai2c_algorithm\u6307\u9488\u8d4b\u503c\u7ed9i2c_adapter\u7684algo\u6307\u9488\u3002"),(0,c.kt)("li",{parentName:"ul"},"\xb7\u5b9e\u73b0I2 C\u8bbe\u5907\u9a71\u52a8\u4e2d\u7684i2c_driver\u63a5\u53e3\uff0c\u7528\u5177\u4f53\u8bbe\u5907yyy\u7684yyy_probe\uff08\uff09\u3001yyy_remove\uff08\uff09\u3001yyy_suspend\uff08\uff09\u3001yyy_resume\uff08\uff09\u51fd\u6570\u6307\u9488\u548ci2c_device_id\u8bbe\u5907ID\u8868\u8d4b\u503c\u7ed9i2c_driver\u7684probe\u3001remove\u3001suspend\u3001resume\u548cid_table\u6307\u9488\u3002"),(0,c.kt)("li",{parentName:"ul"},"\xb7\u5b9e\u73b0I2 C\u8bbe\u5907\u6240\u5bf9\u5e94\u7c7b\u578b\u7684\u5177\u4f53\u9a71\u52a8\uff0ci2c_driver\u53ea\u662f\u5b9e\u73b0\u8bbe\u5907\u4e0e\u603b\u7ebf\u7684\u6302\u63a5\uff0c\u800c\u6302\u63a5\u5728\u603b\u7ebf\u4e0a\u7684\u8bbe\u5907\u5219\u5343\u5dee\u4e07\u522b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u662f\u5b57\u7b26\u8bbe\u5907\uff0c\u5c31\u5b9e\u73b0\u6587\u4ef6\u64cd\u4f5c\u63a5\u53e3\uff0c\u5373\u5b9e\u73b0\u5177\u4f53\u8bbe\u5907yyy\u7684yyy_read\uff08\uff09\u3001yyy_write\uff08\uff09\u548cyyy_ioctl\uff08\uff09\u51fd\u6570\u7b49\uff1b\u5982\u679c\u662f\u58f0\u5361\uff0c\u5c31\u5b9e\u73b0ALSA\u9a71\u52a8\u3002")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u5de5\u4f5c\u4e2d\u524d\u4e24\u4e2a\u5c5e\u4e8eI2 C\u603b\u7ebf\u9a71\u52a8\uff0c\u540e\u4e24\u4e2a\u5c5e\u4e8eI2 C\u8bbe\u5907\u9a71\u52a8\u300215.3~15.4\u8282\u5c06\u8be6\u7ec6\u5206\u6790\u8fd9\u4e9b\u5de5\u4f5c\u7684\u5b9e\u65bd\u65b9\u6cd5\uff0c\u7ed9\u51fa\u8bbe\u8ba1\u6a21\u677f\uff0c\u800c15.5~15.6\u8282\u5c06\u7ed9\u51fa\u4e24\u4e2a\u5177\u4f53\u7684\u5b9e\u4f8b\u3002"))}_.isMDXComponent=!0},28914:function(e,t,n){t.Z=n.p+"assets/images/1744988278285-ad84009052c6baa96b5c7a120f46d9ff.png"},63903:function(e,t,n){t.Z=n.p+"assets/images/image-20250418230357150-2e9634bd72ee33537545fc6ccb2ab6aa.png"}}]);