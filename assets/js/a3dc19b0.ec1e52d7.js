"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[85822],{3905:function(t,n,e){e.d(n,{Zo:function(){return l},kt:function(){return f}});var r=e(67294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function a(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?a(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function c(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)e=a[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)e=a[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var s=r.createContext({}),u=function(t){var n=r.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},l=function(t){var n=u(t.components);return r.createElement(s.Provider,{value:n},t.children)},_={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,a=t.originalType,s=t.parentName,l=c(t,["components","mdxType","originalType","parentName"]),d=u(e),f=i,p=d["".concat(s,".").concat(f)]||d[f]||_[f]||a;return e?r.createElement(p,o(o({ref:n},l),{},{components:e})):r.createElement(p,o({ref:n},l))}));function f(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var a=e.length,o=new Array(a);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=t,c.mdxType="string"==typeof t?t:i,o[1]=c;for(var u=2;u<a;u++)o[u]=e[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},58550:function(t,n,e){e.r(n),e.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return _}});var r=e(87462),i=e(63366),a=(e(67294),e(3905)),o=["components"],c={},s=void 0,u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.6\u3000AT24xx EEPROM\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.6\u3000AT24xx EEPROM\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.6\u3000AT24xx EEPROM\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b.md",title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/15.6\u3000AT24xx EEPROM\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b",description:"drivers/misc/eeprom/at24.c\u6587\u4ef6\u652f\u6301\u5927\u591a\u6570I2 C\u63a5\u53e3\u7684EEPROM\uff0c\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8ff0\uff0c\u4e00\u4e2a\u5177\u4f53\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u7531i2cdriver\u7684\u5f62\u5f0f\u8fdb\u884c\u7ec4\u7ec7\uff0c\u7528\u4e8e\u5c06\u8bbe\u5907\u6302\u63a5\u4e8eI2 C\u603b\u7ebf\uff0c\u7ec4\u7ec7\u597d\u4e86\u540e\uff0c\u518d\u5b8c\u6210\u8bbe\u5907\u672c\u8eab\u6240\u5c5e\u7c7b\u578b\u7684\u9a71\u52a8\u3002\u5bf9\u4e8eEEPROM\u800c\u8a00\uff0c\u8bbe\u5907\u672c\u8eab\u7684\u9a71\u52a8\u4ee5binattribute\u4e8c\u8fdb\u5236sysfs\u8282\u70b9\u5f62\u5f0f\u5448\u73b0\u3002\u4ee3\u7801\u6e05\u535515.25\u7ed9\u51fa\u4e86\u8be5\u9a71\u52a8\u7684\u6846\u67b6\u3002",date:"2025-09-15T14:44:14.729Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:2.645,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.1\u3000\u5757\u8bbe\u5907\u7684IO\u64cd\u4f5c\u7279\u70b9",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/13.1\u3000\u5757\u8bbe\u5907\u7684IO\u64cd\u4f5c\u7279\u70b9"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.8\u3000CPU\u70ed\u63d2\u62d4",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/19.8\u3000CPU\u70ed\u63d2\u62d4"}},l={authorsImageUrls:[]},_=[],d={toc:_};function f(t){var n=t.components,e=(0,i.Z)(t,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"drivers/misc/eeprom/at24.c\u6587\u4ef6\u652f\u6301\u5927\u591a\u6570I2 C\u63a5\u53e3\u7684EEPROM\uff0c\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8ff0\uff0c\u4e00\u4e2a\u5177\u4f53\u7684I2 C\u8bbe\u5907\u9a71\u52a8\u7531i2c_driver\u7684\u5f62\u5f0f\u8fdb\u884c\u7ec4\u7ec7\uff0c\u7528\u4e8e\u5c06\u8bbe\u5907\u6302\u63a5\u4e8eI2 C\u603b\u7ebf\uff0c\u7ec4\u7ec7\u597d\u4e86\u540e\uff0c\u518d\u5b8c\u6210\u8bbe\u5907\u672c\u8eab\u6240\u5c5e\u7c7b\u578b\u7684\u9a71\u52a8\u3002\u5bf9\u4e8eEEPROM\u800c\u8a00\uff0c\u8bbe\u5907\u672c\u8eab\u7684\u9a71\u52a8\u4ee5bin_attribute\u4e8c\u8fdb\u5236sysfs\u8282\u70b9\u5f62\u5f0f\u5448\u73b0\u3002\u4ee3\u7801\u6e05\u535515.25\u7ed9\u51fa\u4e86\u8be5\u9a71\u52a8\u7684\u6846\u67b6\u3002"),(0,a.kt)("p",null,"\u4ee3\u7801\u6e05\u535515.25\u3000AT24xx EEPROM\u9a71\u52a8"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},' 1struct at24_data {\n 2          struct at24_platform_data chip;\n 3          ...\n 4          struct bin_attribute bin;\n 5          ...\n 6};\n 7\n 8static const struct i2c_device_id at24_ids[] = {\n 9          /* needs 8 addresses as A0-A2 are ignored */\n10          { "24c00", AT24_DEVICE_MAGIC(128 / 8, AT24_FLAG_TAKE8ADDR) },\n11          /* old variants can\'t be handled with this generic entry! */\n12          { "24c01", AT24_DEVICE_MAGIC(1024 / 8, 0) },\n13          { "24c02", AT24_DEVICE_MAGIC(2048 / 8, 0) },\n14          ...\n15          { /* END OF LIST */ }\n16};\n17MODULE_DEVICE_TABLE(i2c, at24_ids);\n18\n19static ssize_t at24_eeprom_read(struct at24_data *at24, char *buf,\n20                  unsigned offset, size_t count)\n21{\n22          struct i2c_msg msg[2];\n23          ...\n24          i2c_transfer(client->adapter, msg, 2);\n25          ...\n26}\n27\n28static ssize_t at24_read(struct at24_data *at24,\n29                  char *buf, loff_t off, size_t count)\n30{\n31          ...\n32\n33          status = at24_eeprom_read(at24, buf, off, count);\n34          ...\n35\n36          return retval;\n37 }\n38\n39static ssize_t at24_bin_read(struct file *filp, struct kobject *kobj,\n40                  struct bin_attribute *attr,\n41                  char *buf, loff_t off, size_t count)\n42{\n43          struct at24_data *at24;\n44\n45          at24 = dev_get_drvdata(container_of(kobj, struct device, kobj));\n46          return at24_read(at24, buf, off, count);\n47}\n48\n49\u2026\n\n\n\n50\n51static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)\n52{\n53          ...\n54          sysfs_bin_attr_init(&at24->bin);\n55          at24->bin.attr.name = "eeprom";\n56          at24->bin.attr.mode = chip.flags & AT24_FLAG_IRUGO   S_IRUGO : S_IRUSR;\n57          at24->bin.read = at24_bin_read;\n58          at24->bin.size = chip.byte_len;\n59\n60          ...\n61          return err;\n62}\n63\n64static int at24_remove(struct i2c_client *client)\n65{\n66          ...\n67          sysfs_remove_bin_file(&client->dev.kobj, &at24->bin);\n68          ...\n69\n70          return 0;\n71}\n72\n73static struct i2c_driver at24_driver = {\n74          .driver = {\n75                  .name = "at24",\n76                  .owner = THIS_MODULE,\n77          },\n78          .probe = at24_probe,\n79          .remove = at24_remove,\n80          .id_table = at24_ids,\n81};\n82\n83static int __init at24_init(void)\n84{\n85          ...\n86          return i2c_add_driver(&at24_driver);\n87}\n88module_init(at24_init);\n89\n90static void __exit at24_exit(void)\n91{\n92          i2c_del_driver(&at24_driver);\n93}\n94module_exit(at24_exit);\n')),(0,a.kt)("p",null,"drivers/misc/eeprom/at24.c\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684CPU\u548cI2 C\u63a7\u5236\u5668\u7684\u786c\u4ef6\u7279\u6027\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u67d0\u4e00\u7535\u8def\u677f\u5305\u542b\u8be5\u5916\u8bbe\uff0c\u53ea\u9700\u8981\u5728\u677f\u7ea7\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5bf9\u5e94\u7684i2c_board_info\uff0c\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static struct i2c_board_info i2c_devs0[] __initdata = {\n     { I2C_BOARD_INFO("24c02", 0x57), },\n};\n')),(0,a.kt)("p",null,"\u5728\u652f\u6301\u8bbe\u5907\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u7b80\u5355\u5730\u5728.dts\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'i2c@11000 {\n       status = "okay";\n       \u2026\n       eeprom@57 {\n               compatible = "atmel,24c02";\n               reg = <0x57>;\n       };\n};\n')))}f.isMDXComponent=!0}}]);