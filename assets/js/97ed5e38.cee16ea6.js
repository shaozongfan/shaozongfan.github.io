"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[93888],{3905:function(n,e,t){t.d(e,{Zo:function(){return d},kt:function(){return s}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),c=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},d=function(n){var e=c(n.components);return r.createElement(a.Provider,{value:e},n.children)},_={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,l=n.originalType,a=n.parentName,d=u(n,["components","mdxType","originalType","parentName"]),g=c(t),s=i,p=g["".concat(a,".").concat(s)]||g[s]||_[s]||l;return t?r.createElement(p,o(o({ref:e},d),{},{components:t})):r.createElement(p,o({ref:e},d))}));function s(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var l=t.length,o=new Array(l);o[0]=g;var u={};for(var a in e)hasOwnProperty.call(e,a)&&(u[a]=e[a]);u.originalType=n,u.mdxType="string"==typeof n?n:i,o[1]=u;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},38705:function(n,e,t){t.r(e),t.d(e,{assets:function(){return d},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return _}});var r=t(87462),i=t(63366),l=(t(67294),t(3905)),o=["components"],u={},a="1.6.1\u3000\u65e0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684LED\u9a71\u52a8",c={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.6\u3000\u8bbe\u5907\u9a71\u52a8Hello World\uff1aLED\u9a71\u52a8",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.6\u3000\u8bbe\u5907\u9a71\u52a8Hello World\uff1aLED\u9a71\u52a8.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/1.6\u3000\u8bbe\u5907\u9a71\u52a8Hello World\uff1aLED\u9a71\u52a8.md",title:"1.6.1\u3000\u65e0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684LED\u9a71\u52a8",description:"\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e2d\uff0cLED\u4e00\u822c\u76f4\u63a5\u7531CPU\u7684GPIO\uff08\u901a\u7528\u53ef\u7f16\u7a0bI/O\uff09\u53e3\u63a7\u5236\u3002GPIO\u4e00\u822c\u7531\u4e24\u7ec4\u5bc4\u5b58\u5668\u63a7\u5236\uff0c\u5373\u4e00\u7ec4\u63a7\u5236\u5bc4\u5b58\u5668\u548c\u4e00\u7ec4\u6570\u636e\u5bc4\u5b58\u5668\u3002\u63a7\u5236\u5bc4\u5b58\u5668\u53ef\u8bbe\u7f6eGPIO\u53e3\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e3a\u8f93\u5165\u6216\u8005\u8f93\u51fa\u3002\u5f53\u5f15\u811a\u88ab\u8bbe\u7f6e\u4e3a\u8f93\u51fa\u65f6\uff0c\u5411\u6570\u636e\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u5199\u51651\u548c0\u4f1a\u5206\u522b\u5728\u5f15\u811a\u4e0a\u4ea7\u751f\u9ad8\u7535\u5e73\u548c\u4f4e\u7535\u5e73\uff1b\u5f53\u5f15\u811a\u8bbe\u7f6e\u4e3a\u8f93\u5165\u65f6\uff0c\u8bfb\u53d6\u6570\u636e\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u53ef\u83b7\u5f97\u5f15\u811a\u4e0a\u7684\u7535\u5e73\u4e3a\u9ad8\u6216\u4f4e\u3002",date:"2025-09-15T14:44:14.933Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:7.13,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.3\u3000\u4e2d\u65ad\u5c4f\u853d",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/7.3\u3000\u4e2d\u65ad\u5c4f\u853d"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.1\u3000ARM\u8bbe\u5907\u6811\u8d77\u6e90",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/18.1\u3000ARM\u8bbe\u5907\u6811\u8d77\u6e90"}},d={authorsImageUrls:[]},_=[],g={toc:_};function s(n){var e=n.components,t=(0,i.Z)(n,o);return(0,l.kt)("wrapper",(0,r.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e2d\uff0cLED\u4e00\u822c\u76f4\u63a5\u7531CPU\u7684GPIO\uff08\u901a\u7528\u53ef\u7f16\u7a0bI/O\uff09\u53e3\u63a7\u5236\u3002GPIO\u4e00\u822c\u7531\u4e24\u7ec4\u5bc4\u5b58\u5668\u63a7\u5236\uff0c\u5373\u4e00\u7ec4\u63a7\u5236\u5bc4\u5b58\u5668\u548c\u4e00\u7ec4\u6570\u636e\u5bc4\u5b58\u5668\u3002\u63a7\u5236\u5bc4\u5b58\u5668\u53ef\u8bbe\u7f6eGPIO\u53e3\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e3a\u8f93\u5165\u6216\u8005\u8f93\u51fa\u3002\u5f53\u5f15\u811a\u88ab\u8bbe\u7f6e\u4e3a\u8f93\u51fa\u65f6\uff0c\u5411\u6570\u636e\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u5199\u51651\u548c0\u4f1a\u5206\u522b\u5728\u5f15\u811a\u4e0a\u4ea7\u751f\u9ad8\u7535\u5e73\u548c\u4f4e\u7535\u5e73\uff1b\u5f53\u5f15\u811a\u8bbe\u7f6e\u4e3a\u8f93\u5165\u65f6\uff0c\u8bfb\u53d6\u6570\u636e\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u53ef\u83b7\u5f97\u5f15\u811a\u4e0a\u7684\u7535\u5e73\u4e3a\u9ad8\u6216\u4f4e\u3002"),(0,l.kt)("p",null,"\u5728\u672c\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c4f\u853d\u5177\u4f53CPU\u7684\u5dee\u5f02\uff0c\u5047\u8bbe\u5728GPIO_REG_CTRL\u7269\u7406\u5730\u5740\u4e2d\u63a7\u5236\u5bc4\u5b58\u5668\u5904\u7684\u7b2cn\u4f4d\u5199\u51651\u53ef\u8bbe\u7f6eGPIO\u53e3\u4e3a\u8f93\u51fa\uff0c\u5728\u5730\u5740GPIO_REG_DATA\u7269\u7406\u5730\u5740\u4e2d\u6570\u636e\u5bc4\u5b58\u5668\u7684\u7b2cn\u4f4d\u5199\u51651\u62160\u53ef\u5728\u5f15\u811a\u4e0a\u4ea7\u751f\u9ad8\u6216\u4f4e\u7535\u5e73\uff0c\u5219\u5728\u65e0\u64cd\u4f5c\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\uff0c\u8bbe\u5907\u9a71\u52a8\u89c1\u4ee3\u7801\u6e05\u53551.3\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53551.3\u3000\u65e0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684LED\u9a71\u52a8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," 1 #define reg_gpio_ctrl *(volatile int *)(ToVirtual(GPIO_REG_CTRL))\n 2 #define reg_gpio_data *(volatile int *)(ToVirtual(GPIO_REG_DATA))\n 3 /* \u521d\u59cb\u5316\n\n\nLED */\n 4 void LightInit(void)\n 5 {\n 6   reg_gpio_ctrl |= (1 << n); /* \u8bbe\u7f6e\n\n\nGPIO\u4e3a\u8f93\u51fa\n\n\n */\n 7 }\n 8\n 9 /* \u70b9\u4eae\n\n\nLED */\n10 void LightOn(void)\n11 {\n12   reg_gpio_data |= (1 << n); /* \u5728\n\n\nGPIO\u4e0a\u8f93\u51fa\u9ad8\u7535\u5e73\n\n\n */\n13 }\n14\n15 /* \u7184\u706d\n\n\nLED */\n16 void LightOff(void)\n17 {\n18   reg_gpio_data &= ~\n\n\n(1 << n); /* \u5728\n\n\nGPIO\u4e0a\u8f93\u51fa\u4f4e\u7535\u5e73\n\n\n */\n19 }\n")),(0,l.kt)("p",null,"\u4e0a\u8ff0\u7a0b\u5e8f\u4e2d\u7684LightInit\uff08\uff09\u3001LightOn\uff08\uff09\u3001LightOff\uff08\uff09\u90fd\u76f4\u63a5\u4f5c\u4e3a\u9a71\u52a8\u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u5916\u90e8\u63a5\u53e3\u51fd\u6570\u3002\u7a0b\u5e8f\u4e2dToVirtual\uff08\uff09\u7684\u4f5c\u7528\u662f\u5f53\u7cfb\u7edf\u542f\u52a8\u4e86\u786c\u4ef6MMU\u4e4b\u540e\uff0c\u6839\u636e\u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5c06\u5bc4\u5b58\u5668\u7684\u7269\u7406\u5730\u5740\u8f6c\u5316\u4e3a\u865a\u62df\u5730\u5740\u3002"),(0,l.kt)("h1",{id:"162linux\u4e0b\u7684led\u9a71\u52a8"},"1.6.2\u3000Linux\u4e0b\u7684LED\u9a71\u52a8"),(0,l.kt)("p",null,"\u5728Linux\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7684\u6846\u67b6\u6765\u7f16\u5199\u5bf9\u5e94\u4e8e\u4ee3\u7801\u6e05\u53551.3\u7684LED\u8bbe\u5907\u9a71\u52a8\uff08\u8fd9\u91cc\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3\uff0c\u5185\u6838\u4e2d\u5b9e\u9645\u5b9e\u73b0\u4e86\u4e00\u4e2a\u63d0\u4f9bsysfs\u8282\u70b9\u7684GPIO LED\u9a71\u52a8\uff0c\u4f4d\u4e8edrivers/leds/leds-gpio.c\u4e2d\uff09\uff0c\u64cd\u4f5c\u786c\u4ef6\u7684LightInit\uff08\uff09\u3001LightOn\uff08\uff09\u3001LightOff\uff08\uff09\u51fd\u6570\u4ecd\u7136\u9700\u8981\uff0c\u4f46\u662f\uff0c\u9075\u5faaLinux\u7f16\u7a0b\u7684\u547d\u540d\u4e60\u60ef\uff0c\u91cd\u65b0\u5c06\u5176\u547d\u540d\u4e3alight_init\uff08\uff09\u3001light_on\uff08\uff09\u3001light_off\uff08\uff09\u3002\u8fd9\u4e9b\u51fd\u6570\u5c06\u88abLED\u8bbe\u5907\u9a71\u52a8\u4e2d\u72ec\u7acb\u4e8e\u8bbe\u5907\u5e76\u9488\u5bf9\u5185\u6838\u7684\u63a5\u53e3\u8fdb\u884c\u8c03\u7528\uff0c\u4ee3\u7801\u6e05\u53551.4\u7ed9\u51fa\u4e86Linux\u4e0b\u7684LED\u9a71\u52a8\uff0c\u6b64\u65f6\u8bfb\u8005\u5e76\u4e0d\u9700\u8981\u80fd\u8bfb\u61c2\u8fd9\u4e9b\u4ee3\u7801\u3002"),(0,l.kt)("p",null,"\u4ee3\u7801\u6e05\u53551.4\u3000Linux\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684LED\u9a71\u52a8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'  1 #include .../* \u5305\u542b\u5185\u6838\u4e2d\u7684\u591a\u4e2a\u5934\u6587\u4ef6\n\n\n */\n  2 /* \u8bbe\u5907\u7ed3\u6784\u4f53\n\n\n */\n  3 struct light_dev {\n  4     struct cdev cdev;      /* \u5b57\u7b26\u8bbe\u5907\n\n\ncdev\u7ed3\u6784\u4f53\n\n\n */\n  5     unsigned char vaule;   /* LED\u4eae\u65f6\u4e3a\n\n\n1\uff0c\u7184\u706d\u65f6\u4e3a\n\n\n0\uff0c\u7528\u6237\u53ef\u8bfb\u5199\u6b64\u503c\n\n\n */\n  6 };\n  7 struct light_dev *light_devp;\n  8 int light_major = LIGHT_MAJOR;\n  9 MODULE_AUTHOR("Barry Song <21cnbao@gmail.com>");\n 10 MODULE_LICENSE("Dual BSD/GPL");\n 11 /* \u6253\u5f00\u548c\u5173\u95ed\u51fd\u6570\n\n\n */\n 12 int light_open(struct inode *inode, struct file *filp)\n 13 {\n 14     struct light_dev *dev;\n 15     /* \u83b7\u5f97\u8bbe\u5907\u7ed3\u6784\u4f53\u6307\u9488\n\n\n */\n 16     dev = container_of(inode->i_cdev, struct light_dev, cdev);\n 17     /* \u8ba9\u8bbe\u5907\u7ed3\u6784\u4f53\u4f5c\u4e3a\u8bbe\u5907\u7684\u79c1\u6709\u4fe1\u606f\n\n\n */\n 18     filp->private_data = dev;\n 19     return 0;\n 20 }\n 21 int light_release(struct inode *inode, struct file *filp)\n 22 {\n 23     return 0;\n 24 }\n 25 /* \u8bfb\u5199\u8bbe\u5907\n\n\n:\u53ef\u4ee5\u4e0d\u9700\u8981\n\n\n */\n 26 ssize_t light_read(struct file *filp, char __user *buf, size_t count,\n 27     loff_t *f_pos)\n 28 {\n 29     struct light_dev *dev = filp->private_data; /* \u83b7\u5f97\u8bbe\u5907\u7ed3\u6784\u4f53\n\n\n */\n 30     if (copy_to_user(buf, &(dev->value), 1))\n 31         return  -EFAULT;\n 32     return 1;\n 33 }\n 34 ssize_t light_write(struct file *filp, const char __user *buf, size_t count,\n 35     loff_t *f_pos)\n 36 {\n 37     struct light_dev *dev = filp->private_data;\n 38     if (copy_from_user(&(dev->value), buf, 1))\n 39         return  -EFAULT;\n 40     /* \u6839\u636e\u5199\u5165\u7684\u503c\u70b9\u4eae\u548c\u7184\u706d\n\n\nLED */\n 41      if (dev->value == 1)\n 42          light_on();\n 43      else\n 44          light_off();\n 45      return 1;\n 46 }\n 47 /* ioctl\u51fd\u6570\n\n\n */\n 48 int light_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,\n 49     unsigned long arg)\n 50 {\n 51     struct light_dev *dev = filp->private_data;\n 52     switch (cmd) {\n 53     case LIGHT_ON:\n 54         dev->value = 1;\n 55         light_on();\n 56         break;\n 57     case LIGHT_OFF:\n 58         dev->value = 0;\n 59         light_off();\n 60         break;\n 61     default:\n 62         /* \u4e0d\u80fd\u652f\u6301\u7684\u547d\u4ee4\n\n\n */\n 63         return  -ENOTTY;\n 64     }\n 65     return 0;\n 66 }\n 67 struct file_operations light_fops = {\n 68     .owner = THIS_MODULE,\n 69     .read = light_read,\n 70     .write = light_write,\n 71     .ioctl = light_ioctl,\n 72     .open = light_open,\n 73     .release = light_release,\n 74 };\n 75 /* \u8bbe\u7f6e\u5b57\u7b26\u8bbe\u5907\n\n\ncdev\u7ed3\u6784\u4f53\n\n\n */\n 76 static void light_setup_cdev(struct light_dev *dev, int index)\n 77 {\n 78     int err, devno = MKDEV(light_major, index);\n 79     cdev_init(&dev->cdev, &light_fops);\n 80     dev->cdev.owner = THIS_MODULE;\n 81     dev->cdev.ops = &light_fops;\n 82     err = cdev_add(&dev->cdev, devno, 1);\n 83     if (err)\n 84         printk(KERN_NOTICE "Error %d adding LED%d", err, index);\n 85 }\n 86 /* \u6a21\u5757\u52a0\u8f7d\u51fd\u6570\n\n\n */\n 87 int light_init(void)\n 88 {\n 89     int result;\n 90     dev_t dev = MKDEV(light_major, 0);\n 91     /* \u7533\u8bf7\u5b57\u7b26\u8bbe\u5907\u53f7\n\n\n */\n 92     if (light_major)\n 93         result = register_chrdev_region(dev, 1, "LED");\n 94     else {\n 95         result = alloc_chrdev_region(&dev, 0, 1, "LED");\n 96         light_major = MAJOR(dev);\n 97     }\n 98     if (result < 0)\n 99         return result;\n100     /* \u5206\u914d\u8bbe\u5907\u7ed3\u6784\u4f53\u7684\u5185\u5b58\n\n\n */\n101     light_devp = kmalloc(sizeof(struct light_dev), GFP_KERNEL);\n102     if (!light_devp) {\n103         result =  -ENOMEM;\n104         goto fail_malloc;\n105     }\n106     memset(light_devp, 0, sizeof(struct light_dev));\n107     light_setup_cdev(light_devp, 0);\n108     light_gpio_init();\n109     return 0;\n110 fail_malloc:\n111     unregister_chrdev_region(dev, light_devp);\n112     return result;\n113 }\n114 /* \u6a21\u5757\u5378\u8f7d\u51fd\u6570\n\n\n */\n115 void light_cleanup(void)\n116 {\n117     cdev_del(&light_devp->cdev);  /* \u5220\u9664\u5b57\u7b26\u8bbe\u5907\u7ed3\u6784\u4f53\n\n\n */\n118     kfree(light_devp);            /* \u91ca\u653e\u5728\n\n\nlight_init\u4e2d\u5206\u914d\u7684\u5185\u5b58\n\n\n */\n119     unregister_chrdev_region(MKDEV(light_major, 0), 1); /* \u5220\u9664\u5b57\u7b26\u8bbe\u5907\n\n\n */\n120 }\n121 module_init(light_init);\n122 module_exit(light_cleanup);\n')),(0,l.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7684\u884c\u6570\u4e0e\u4ee3\u7801\u6e05\u53551.3\u5df2\u7ecf\u4e0d\u80fd\u76f8\u6bd4\u4e86\uff0c\u9664\u4e86\u4ee3\u7801\u6e05\u53551.3\u4e2d\u7684\u786c\u4ef6\u64cd\u4f5c\u51fd\u6570\u4ecd\u7136\u9700\u8981\u5916\uff0c\u4ee3\u7801\u6e05\u53551.4\u4e2d\u8fd8\u5305\u542b\u4e86\u5927\u91cf\u6682\u65f6\u964c\u751f\u7684\u5143\u7d20\uff0c\u5982\u7ed3\u6784\u4f53file_operations\u3001cdev\uff0cLinux\u5185\u6838\u6a21\u5757\u58f0\u660e\u7528\u7684MODULE_AUTHOR\u3001MODULE_LICENSE\u3001module_init\u3001module_exit\uff0c\u4ee5\u53ca\u7528\u4e8e\u5b57\u7b26\u8bbe\u5907\u6ce8\u518c\u3001\u5206\u914d\u548c\u6ce8\u9500\u7684\u51fd\u6570register_chrdev_region\uff08\uff09\u3001alloc_chrdev_region\uff08\uff09\u3001unregister_chrdev_region\uff08\uff09\u7b49\u3002\u6211\u4eec\u4e5f\u4e0d\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u9a71\u52a8\u4e2d\u8981\u5305\u542blight_init\uff08\uff09\u3001light_cleanup\uff08\uff09\u3001light_read\uff08\uff09\u3001light_write\uff08\uff09\u7b49\u51fd\u6570"),(0,l.kt)("p",null,"\u6b64\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6709\u4e00\u4e2a\u611f\u6027\u8ba4\u8bc6\uff0c\u90a3\u5c31\u662f\uff0c\u4e0a\u8ff0\u6682\u65f6\u964c\u751f\u7684\u5143\u7d20\u90fd\u662fLinux\u5185\u6838\u4e3a\u5b57\u7b26\u8bbe\u5907\u5b9a\u4e49\u7684\uff0c\u4ee5\u5b9e\u73b0\u9a71\u52a8\u4e0e\u5185\u6838\u63a5\u53e3\u800c\u5b9a\u4e49\u7684\u3002Linux\u5bf9\u5404\u7c7b\u8bbe\u5907\u7684\u9a71\u52a8\u90fd\u5b9a\u4e49\u4e86\u7c7b\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u548c\u51fd\u6570"))}s.isMDXComponent=!0}}]);