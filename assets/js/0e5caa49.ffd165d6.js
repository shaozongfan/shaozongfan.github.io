"use strict";(self.webpackChunkshaozongfan_website=self.webpackChunkshaozongfan_website||[]).push([[60719],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var a=r.createContext({}),u=function(t){var e=r.useContext(a),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(a.Provider,{value:e},t.children)},_={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,a=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(n),d=i,f=p["".concat(a,".").concat(d)]||p[d]||_[d]||o;return n?r.createElement(f,c(c({ref:e},l),{},{components:n})):r.createElement(f,c({ref:e},l))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,c=new Array(o);c[0]=p;var s={};for(var a in e)hasOwnProperty.call(e,a)&&(s[a]=e[a]);s.originalType=t,s.mdxType="string"==typeof t?t:i,c[1]=s;for(var u=2;u<o;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},98712:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return _}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),c=["components"],s={},a="12.3.1\u3000\u8bbe\u5907\u9a71\u52a8\u6838\u5fc3\u5c42\u548c\u4f8b\u5316",u={permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.3\u3000\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42\u601d\u60f3",editUrl:"https://github.com/shaozongfan/shaozongfan.github.io/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.3\u3000\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42\u601d\u60f3.md",source:"@site/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/12.3\u3000\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42\u601d\u60f3.md",title:"12.3.1\u3000\u8bbe\u5907\u9a71\u52a8\u6838\u5fc3\u5c42\u548c\u4f8b\u5316",description:"\u572812.1\u8282\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u611f\u6027\u4e0a\u8ba4\u8bc6\u4e86Linux\u9a71\u52a8\u8f6f\u4ef6\u5206\u5c42\u7684\u610f\u4e49\u3002\u5176\u5b9e\uff0c\u5728\u5206\u5c42\u8bbe\u8ba1\u7684\u65f6\u5019\uff0cLinux\u5185\u6838\u5927\u91cf\u4f7f\u7528\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u601d\u60f3\u3002",date:"2025-09-15T14:44:15.041Z",formattedDate:"2025\u5e749\u670815\u65e5",tags:[],readingTime:34.545,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"6.1.1\u3000cdev\u7ed3\u6784\u4f53",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/6.1\u3000Linux\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7ed3\u6784"},nextItem:{title:"\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.1\u3000\u5f02\u6b65\u901a\u77e5\u7684\u6982\u5ff5\u4e0e\u4f5c\u7528",permalink:"/blog/\u6280\u672f\u535a\u5ba2/\u5d4c\u5165\u5f0f/linux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3/9.1\u3000\u5f02\u6b65\u901a\u77e5\u7684\u6982\u5ff5\u4e0e\u4f5c\u7528"}},l={authorsImageUrls:[]},_=[],p={toc:_};function d(t){var e=t.components,s=(0,i.Z)(t,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u572812.1\u8282\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u611f\u6027\u4e0a\u8ba4\u8bc6\u4e86Linux\u9a71\u52a8\u8f6f\u4ef6\u5206\u5c42\u7684\u610f\u4e49\u3002\u5176\u5b9e\uff0c\u5728\u5206\u5c42\u8bbe\u8ba1\u7684\u65f6\u5019\uff0cLinux\u5185\u6838\u5927\u91cf\u4f7f\u7528\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u601d\u60f3\u3002"),(0,o.kt)("p",null,"\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u53ef\u4ee5\u4e3a\u67d0\u4e00\u7c7b\u76f8\u4f3c\u7684\u4e8b\u7269\u5b9a\u4e49\u4e00\u4e2a\u57fa\u7c7b\uff0c\u800c\u5177\u4f53\u7684\u4e8b\u7269\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e2a\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u3002\u5982\u679c\u5bf9\u4e8e\u7ee7\u627f\u7684\u8fd9\u4e2a\u4e8b\u7269\u800c\u8a00\uff0c\u67d0\u6210\u5458\u51fd\u6570\u7684\u5b9e\u73b0\u4e0e\u57fa\u7c7b\u4e00\u81f4\uff0c\u90a3\u5b83\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u57fa\u7c7b\u7684\u51fd\u6570\uff1b\u76f8\u53cd\uff0c\u5b83\u4e5f\u53ef\u4ee5\u91cd\u5199\uff08Overriding\uff09\uff0c\u5bf9\u7236\u7c7b\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u65b0\u5b9a\u4e49\u3002\u82e5\u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4e0e\u7236\u7c7b\u4e2d\u7684\u67d0\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d\u3001\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u8868\uff0c\u5219\u65b0\u65b9\u6cd5\u5c06\u8986\u76d6\u539f\u6709\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u201c\u591a\u6001\u201d\u8bbe\u8ba1\u601d\u60f3\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u91cd\u7528\u80fd\u529b\uff0c\u662f\u5bf9\u73b0\u5b9e\u4e16\u754c\u4e2d\u4e8b\u7269\u4e4b\u95f4\u5173\u7cfb\u7684\u4e00\u79cd\u826f\u597d\u5448\u73b0\u3002"),(0,o.kt)("p",null,"Linux\u5185\u6838\u5b8c\u5168\u662f\u7531C\u8bed\u8a00\u548c\u6c47\u7f16\u8bed\u8a00\u5199\u6210\uff0c\u4f46\u662f\u5374\u9891\u7e41\u5730\u7528\u5230\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u5728\u8bbe\u5907\u9a71\u52a8\u65b9\u9762\uff0c\u5f80\u5f80\u4e3a\u540c\u7c7b\u7684\u8bbe\u5907\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6846\u67b6\uff0c\u800c\u6846\u67b6\u4e2d\u7684\u6838\u5fc3\u5c42\u5219\u5b9e\u73b0\u4e86\u8be5\u8bbe\u5907\u901a\u7528\u7684\u4e00\u4e9b\u529f\u80fd\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u5177\u4f53\u7684\u8bbe\u5907\u4e0d\u60f3\u4f7f\u7528\u6838\u5fc3\u5c42\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u91cd\u5199\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"return_type core_funca(xxx_device * bottom_dev, param1_type param1, param1_type param2)\n{\n    if (bottom_dev->funca)\n        return bottom_dev->funca(param1, param2);\n    /* \u6838\u5fc3\u5c42\u901a\u7528\u7684funca\u4ee3\u7801*/\n    ...\n}\n")),(0,o.kt)("p",null,"\u5728\u4e0a\u8ff0core_funca\u7684\u5b9e\u73b0\u4e2d\uff0c\u4f1a\u68c0\u67e5\u5e95\u5c42\u8bbe\u5907\u662f\u5426\u91cd\u5199\u4e86funca\uff08\uff09\uff0c\u5982\u679c\u91cd\u5199\u4e86\uff0c\u5c31\u8c03\u7528\u5e95\u5c42\u7684\u4ee3\u7801\uff0c\u5426\u5219\uff0c\u76f4\u63a5\u4f7f\u7528\u901a\u7528\u5c42\u7684\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u6838\u5fc3\u5c42\u7684\u4ee3\u7801\u53ef\u4ee5\u5904\u7406\u7edd\u5927\u591a\u6570\u4e0e\u8be5\u7c7b\u8bbe\u5907\u7684funca\uff08\uff09\u5bf9\u5e94\u7684\u529f\u80fd\uff0c\u53ea\u6709\u5c11\u6570\u7279\u6b8a\u8bbe\u5907\u9700\u8981\u91cd\u65b0\u5b9e\u73b0funca\uff08\uff09\u3002"),(0,o.kt)("p",null,"\u518d\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"return_type core_funca(xxx_device * bottom_dev, param1_type param1, param1_type param2)\n{\n     /*\u901a\u7528\u7684\u6b65\u9aa4\u4ee3\u7801A */\n     typea_dev_commonA();\n     ...\n     /* \u5e95\u5c42\u64cd\u4f5cops1 */\n     bottom_dev->funca_ops1();\n     /*\u901a\u7528\u7684\u6b65\u9aa4\u4ee3\u7801B */\n     typea_dev_commonB();\n     ...\n     /* \u5e95\u5c42\u64cd\u4f5cops2 */\n     bottom_dev->funca_ops2();\n     /*\u901a\u7528\u7684\u6b65\u9aa4\u4ee3\u7801C */\n     typea_dev_commonB();\n     ...\n     /** \u5e95\u5c42\u64cd\u4f5cops3*/\n     bottom_dev->funca_ops3();\n}\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u5047\u5b9a\u4e3a\u4e86\u5b9e\u73b0funca\uff08\uff09\uff0c\u5bf9\u4e8e\u540c\u7c7b\u8bbe\u5907\u800c\u8a00\uff0c\u64cd\u4f5c\u6d41\u7a0b\u4e00\u81f4\uff0c\u90fd\u8981\u7ecf\u8fc7\u201c\u901a\u7528\u4ee3\u7801A\u3001\u5e95\u5c42ops1\u3001\u901a\u7528\u4ee3\u7801B\u3001\u5e95\u5c42ops2\u3001\u901a\u7528\u4ee3\u7801C\u3001\u5e95\u5c42ops3\u201d\u8fd9\u51e0\u6b65\uff0c\u5206\u5c42\u8bbe\u8ba1\u5e26\u6765\u7684\u660e\u663e\u597d\u5904\u662f\uff0c\u5bf9\u4e8e\u901a\u7528\u4ee3\u7801A\u3001B\u3001C\uff0c\u5177\u4f53\u7684\u5e95\u5c42\u9a71\u52a8\u4e0d\u9700\u8981\u518d\u5b9e\u73b0\uff0c\u800c\u4ec5\u4ec5\u53ea\u8981\u5173\u5fc3\u5176\u5e95\u5c42\u7684\u64cd\u4f5cops1\u3001ops2\u3001ops3\u5219\u53ef\u3002"),(0,o.kt)("p",null,"\u56fe12.5\u660e\u786e\u53cd\u6620\u4e86\u8bbe\u5907\u9a71\u52a8\u7684\u6838\u5fc3\u5c42\u4e0e\u5177\u4f53\u8bbe\u5907\u9a71\u52a8\u7684\u5173\u7cfb\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u79cd\u5206\u5c42\u53ef\u80fd\u53ea\u6709\u4e24\u5c42\uff08\u89c1\u56fe12.5a\uff09\uff0c\u4e5f\u53ef\u80fd\u662f\u591a\u5c42\u7684\uff08\u56fe12.5b\uff09\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743910600543",src:n(66434).Z,width:"1092",height:"768"})),(0,o.kt)("p",null,"\u56fe12.5\u3000Linux\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42"),(0,o.kt)("p",null,"\u8fd9\u6837\u7684\u5206\u5c42\u5316\u8bbe\u8ba1\u5728Linux\u7684input\u3001RTC\u3001MTD\u3001I2 C\u3001SPI\u3001tty\u3001USB\u7b49\u8bf8\u591a\u7c7b\u578b\u8bbe\u5907\u9a71\u52a8\u4e2d\u5c61\u89c1\u4e0d\u9c9c\u3002\u4e0b\u9762\u7684\u51e0\u5c0f\u8282\u4ee5input\u3001RTC\u3001Framebuffer\u7b49\u4e3a\u4f8b\u5148\u8fdb\u884c\u4e00\u756a\u8bb2\u89e3\uff0c\u5f53\u7136\uff0c\u540e\u7eed\u7684\u7ae0\u8282\u4f1a\u5bf9\u4e0e\u51e0\u4e2a\u5927\u7684\u8bbe\u5907\u7c7b\u578b\u5bf9\u5e94\u7684\u9a71\u52a8\u5c42\u6b21\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u5206\u6790\u3002"),(0,o.kt)("h1",{id:"1232\u8f93\u5165\u8bbe\u5907\u9a71\u52a8"},"12.3.2\u3000\u8f93\u5165\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("p",null,"\u8f93\u5165\u8bbe\u5907\uff08\u5982\u6309\u952e\u3001\u952e\u76d8\u3001\u89e6\u6478\u5c4f\u3001\u9f20\u6807\u7b49\uff09\u662f\u5178\u578b\u7684\u5b57\u7b26\u8bbe\u5907\uff0c\u5176\u4e00\u822c\u7684\u5de5\u4f5c\u673a\u7406\u662f\u5e95\u5c42\u5728\u6309\u952e\u3001\u89e6\u6478\u7b49\u52a8\u4f5c\u53d1\u9001\u65f6\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff08\u6216\u9a71\u52a8\u901a\u8fc7Timer\u5b9a\u65f6\u67e5\u8be2\uff09\uff0c\u7136\u540eCPU\u901a\u8fc7SPI\u3001I2 C\u6216\u5916\u90e8\u5b58\u50a8\u5668\u603b\u7ebf\u8bfb\u53d6\u952e\u503c\u3001\u5750\u6807\u7b49\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u653e\u5165\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7ba1\u7406\u8be5\u7f13\u51b2\u533a\uff0c\u800c\u9a71\u52a8\u7684read\uff08\uff09\u63a5\u53e3\u8ba9\u7528\u6237\u53ef\u4ee5\u8bfb\u53d6\u952e\u503c\u3001\u5750\u6807\u7b49\u6570\u636e\u3002"),(0,o.kt)("p",null,"\u663e\u7136\uff0c\u5728\u8fd9\u4e9b\u5de5\u4f5c\u4e2d\uff0c\u53ea\u662f\u4e2d\u65ad\u3001\u8bfb\u952e\u503c/\u5750\u6807\u503c\u662f\u4e0e\u8bbe\u5907\u76f8\u5173\u7684\uff0c\u800c\u8f93\u5165\u4e8b\u4ef6\u7684\u7f13\u51b2\u533a\u7ba1\u7406\u4ee5\u53ca\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7684file_operations\u63a5\u53e3\u5219\u5bf9\u8f93\u5165\u8bbe\u5907\u662f\u901a\u7528\u7684\u3002\u57fa\u4e8e\u6b64\uff0c\u5185\u6838\u8bbe\u8ba1\u4e86\u8f93\u5165\u5b50\u7cfb\u7edf\uff0c\u7531\u6838\u5fc3\u5c42\u5904\u7406\u516c\u5171\u7684\u5de5\u4f5c\u3002Linux\u5185\u6838\u8f93\u5165\u5b50\u7cfb\u7edf\u7684\u6846\u67b6\u5982\u56fe12.6\u6240\u793a\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743911207521",src:n(20436).Z,width:"850",height:"984"})),(0,o.kt)("p",null,"\u56fe12.6\u3000Linux\u5185\u6838\u8f93\u5165\u5b50\u7cfb\u7edf\u7684\u6846\u67b6"),(0,o.kt)("p",null,"\u8f93\u5165\u6838\u5fc3\u63d0\u4f9b\u4e86\u5e95\u5c42\u8f93\u5165\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u6240\u9700\u7684API\uff0c\u5982\u5206\u914d/\u91ca\u653e\u4e00\u4e2a\u8f93\u5165\u8bbe\u5907\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct input_dev *input_allocate_device(void);\nvoid input_free_device(struct input_dev *dev);\n")),(0,o.kt)("p",null,"input_allocate_device\uff08\uff09\u8fd4\u56de\u7684\u662f1\u4e2ainput_dev\u7684\u7ed3\u6784\u4f53\uff0c\u6b64\u7ed3\u6784\u4f53\u7528\u4e8e\u8868\u5f811\u4e2a\u8f93\u5165\u8bbe\u5907\u3002"),(0,o.kt)("p",null,"\u6ce8\u518c/\u6ce8\u9500\u8f93\u5165\u8bbe\u5907\u7528\u7684\u63a5\u53e3\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int __must_check input_register_device(struct input_dev *);\nvoid input_unregister_device(struct input_dev *);\n")),(0,o.kt)("p",null,"\u62a5\u544a\u8f93\u5165\u4e8b\u4ef6\u7528\u7684\u63a5\u53e3\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/* \u62a5\u544a\u6307\u5b9atype\u3001code\u7684\u8f93\u5165\u4e8b\u4ef6*/\nvoid input_event(struct input_dev *dev, unsigned int type, unsigned int code, int value);\n/* \u62a5\u544a\u952e\u503c*/\nvoid input_report_key(struct input_dev *dev, unsigned int code, int value);\n/* \u62a5\u544a\u76f8\u5bf9\u5750\u6807*/\nvoid input_report_rel(struct input_dev *dev, unsigned int code, int value);\n/* \u62a5\u544a\u7edd\u5bf9\u5750\u6807 */\nvoid input_report_abs(struct input_dev *dev, unsigned int code, int value);\n/* \u62a5\u544a\u540c\u6b65\u4e8b\u4ef6 */\nvoid input_sync(struct input_dev *dev);\n")),(0,o.kt)("p",null,"\u800c\u5bf9\u4e8e\u6240\u6709\u7684\u8f93\u5165\u4e8b\u4ef6\uff0c\u5185\u6838\u90fd\u7528\u7edf\u4e00\u7684\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662finput_event\uff0c\u5982\u4ee3\u7801\u6e05\u535512.10\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.10\u3000input_event\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1struct input_event {\n2   struct timeval time;\n3   __u16type;\n4   __u16code;\n5   __s32value;\n6};\n")),(0,o.kt)("p",null,"drivers/input/keyboard/gpio_keys.c\u57fa\u4e8einput\u67b6\u6784\u5b9e\u73b0\u4e86\u4e00\u4e2a\u901a\u7528\u7684GPIO\u6309\u952e\u9a71\u52a8\u3002\u8be5\u9a71\u52a8\u662f\u57fa\u4e8eplatform_driver\u67b6\u6784\u7684\uff0c\u540d\u4e3a\u201cgpio-keys\u201d\u3002\u5b83\u5c06\u4e0e\u786c\u4ef6\u76f8\u5173\u7684\u4fe1\u606f\uff08\u5982\u4f7f\u7528\u7684GPIO\u53f7\uff0c\u6309\u4e0b\u548c\u62ac\u8d77\u65f6\u7684\u7535\u5e73\u7b49\uff09\u5c4f\u853d\u5728\u677f\u6587\u4ef6platform_device\u7684platform_data\u4e2d\uff0c\u56e0\u6b64\u8be5\u9a71\u52a8\u53ef\u5e94\u7528\u4e8e\u5404\u4e2a\u5904\u7406\u5668\uff0c\u5177\u6709\u826f\u597d\u7684\u8de8\u5e73\u53f0\u6027\u3002\u4ee3\u7801\u6e05\u535512.11\u5217\u51fa\u4e86\u8be5\u9a71\u52a8\u7684probe\uff08\uff09\u51fd\u6570\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.11\u3000GPIO\u6309\u952e\u9a71\u52a8\u7684probe\uff08\uff09\u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1static int gpio_keys_probe(struct platform_device *pdev)\n 2{\n 3 struct device *dev = &pdev->dev;\n 4 const struct gpio_keys_platform_data *pdata = dev_get_platdata(dev);\n 5 struct gpio_keys_drvdata *ddata;\n 6 struct input_dev *input;\n 7 size_t size;\n 8 int i, error;\n 9 int wakeup = 0;\n10\n11 if (!pdata) {\n12     pdata = gpio_keys_get_devtree_pdata(dev);\n13     if (IS_ERR(pdata))\n14         return PTR_ERR(pdata);\n15 }\n16\n17 size = sizeof(struct gpio_keys_drvdata) +\n18         pdata->nbuttons * sizeof(struct gpio_button_data);\n19 ddata = devm_kzalloc(dev, size, GFP_KERNEL);\n20 if (!ddata) {\n21     dev_err(dev, "failed to allocate state\\n");\n22     return -ENOMEM;\n23 }\n24\n25 input = devm_input_allocate_device(dev);\n26 if (!input) {\n27     dev_err(dev, "failed to allocate input device\\n");\n28     return -ENOMEM;\n29 }\n30\n31 ddata->pdata = pdata;\n32 ddata->input = input;\n33 mutex_init(&ddata->disable_lock);\n34\n35 platform_set_drvdata(pdev, ddata);\n36 input_set_drvdata(input, ddata);\n37\n38 input->name = pdata->name   : pdev->name;\n39 input->phys = "gpio-keys/input0";\n40 input->dev.parent = &pdev->dev;\n41 input->open = gpio_keys_open;\n42 input->close = gpio_keys_close;\n43\n44 input->id.bustype = BUS_HOST;\n45 input->id.vendor = 0x0001;\n46 input->id.product = 0x0001;\n47 input->id.version = 0x0100;\n48\n49 /* Enable auto repeat feature of Linux input subsystem */\n50 if (pdata->rep)\n51     __set_bit(EV_REP, input->evbit);\n52\n53 for (i = 0; i < pdata->nbuttons; i++) {\n54     const struct gpio_keys_button *button = &pdata->buttons[i];\n55     struct gpio_button_data *bdata = &ddata->data[i];\n56\n57     error = gpio_keys_setup_key(pdev, input, bdata, button);\n58     if (error)\n59         return error;\n60\n61     if (button->wakeup)\n62         wakeup = 1;\n63 }\n64\n65 error = sysfs_create_group(&pdev->dev.kobj, &gpio_keys_attr_group);\n66 ...\n67 error = input_register_device(input);\n68 ...\n69}\n')),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u7684\u7b2c25\u884c\u5206\u914d\u4e861\u4e2a\u8f93\u5165\u8bbe\u5907\uff0c\u7b2c31~47\u884c\u521d\u59cb\u5316\u4e86\u8be5input_dev\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u7b2c58\u884c\u6ce8\u518c\u4e86\u8fd9\u4e2a\u8f93\u5165\u8bbe\u5907\u3002\u7b2c53~63\u884c\u5219\u521d\u59cb\u5316\u4e86\u6240\u7528\u5230\u7684GPIO\uff0c\u7b2c67\u884c\u5b8c\u6210\u4e86\u8fd9\u4e2a\u8f93\u5165\u8bbe\u5907\u7684\u6ce8\u518c\u3002"),(0,o.kt)("p",null,"\u5728\u6ce8\u518c\u8f93\u5165\u8bbe\u5907\u540e\uff0c\u5e95\u5c42\u8f93\u5165\u8bbe\u5907\u9a71\u52a8\u7684\u6838\u5fc3\u5de5\u4f5c\u53ea\u5269\u4e0b\u5728\u6309\u952e\u3001\u89e6\u6478\u7b49\u4eba\u4e3a\u52a8\u4f5c\u53d1\u751f\u65f6\u62a5\u544a\u4e8b\u4ef6\u3002\u4ee3\u7801\u6e05\u535512.12\u5217\u51fa\u4e86GPIO\u6309\u952e\u4e2d\u65ad\u53d1\u751f\u65f6\u7684\u4e8b\u4ef6\u62a5\u544a\u4ee3\u7801\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.12\u3000GPIO\u6309\u952e\u4e2d\u65ad\u53d1\u751f\u65f6\u7684\u4e8b\u4ef6\u62a5\u544a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static irqreturn_t gpio_keys_irq_isr(int irq, void *dev_id)\n 2{\n 3 struct gpio_button_data *bdata = dev_id;\n 4 const struct gpio_keys_button *button = bdata->button;\n 5 struct input_dev *input = bdata->input;\n 6 unsigned long flags;\n 7\n 8 BUG_ON(irq != bdata->irq);\n 9\n10 spin_lock_irqsave(&bdata->lock, flags);\n11\n12 if (!bdata->key_pressed) {\n13     if (bdata->button->wakeup)\n14         pm_wakeup_event(bdata->input->dev.parent, 0);\n15\n16     input_event(input, EV_KEY, button->code, 1);\n17     input_sync(input);\n18\n19     if (!bdata->timer_debounce) {\n20         input_event(input, EV_KEY, button->code, 0);\n21         input_sync(input);\n22         goto out;\n23     }\n24\n25     bdata->key_pressed = true;\n26 }\n27\n28 if (bdata->timer_debounce)\n29     mod_timer(&bdata->timer,\n30         jiffies + msecs_to_jiffies(bdata->timer_debounce));\n31out:\n32 spin_unlock_irqrestore(&bdata->lock, flags);\n33 return IRQ_HANDLED;\n34}\n")),(0,o.kt)("p",null,"GPIO\u6309\u952e\u9a71\u52a8\u901a\u8fc7input_event\uff08\uff09\u3001input_sync\uff08\uff09\u8fd9\u6837\u7684\u51fd\u6570\u6765\u6c47\u62a5\u6309\u952e\u4e8b\u4ef6\u4ee5\u53ca\u540c\u6b65\u4e8b\u4ef6\u3002\u4ece\u5e95\u5c42\u7684GPIO\u6309\u952e\u9a71\u52a8\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u9a71\u52a8\u4e2d\u6ca1\u6709\u4efb\u4f55file_operations\u7684\u52a8\u4f5c\uff0c\u4e5f\u6ca1\u6709\u5404\u79cdI/O\u6a21\u578b\uff0c\u6ce8\u518c\u8fdb\u5165\u7cfb\u7edf\u4e5f\u7528\u7684\u662finput_register_device\uff08\uff09\u8fd9\u6837\u7684\u4e0einput\u76f8\u5173\u7684API\u3002\u8fd9\u662f\u7531\u4e8e\u4e0eLinux VFS\u63a5\u53e3\u7684\u8fd9\u4e00\u90e8\u5206\u4ee3\u7801\u5168\u90e8\u90fd\u5728drivers/input/evdev.c\u4e2d\u5b9e\u73b0\u4e86\uff0c\u4ee3\u7801\u6e05\u535512.13\u6458\u53d6\u4e86\u90e8\u5206\u5173\u952e\u4ee3\u7801\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.13\u3000input\u6838\u5fc3\u5c42\u7684file_operations\u548cread\uff08\uff09\u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static ssize_t evdev_read(struct file *file, char __user *buffer,\n 2            size_t count, loff_t *ppos)\n 3{\n 4 struct evdev_client *client = file->private_data;\n 5 struct evdev *evdev = client->evdev;\n 6 struct input_event event;\n 7 size_t read = 0;\n 8 int error;\n 9\n10 if (count != 0&& count < input_event_size())\n11     return -EINVAL;\n12\n13 for (;;) {\n14     if (!evdev->exist || client->revoked)\n15         return -ENODEV;\n16\n17     if (client->packet_head == client->tail &&\n18         (file->f_flags & O_NONBLOCK))\n19         return -EAGAIN;\n20\n21     /*\n22      * count == 0is special - no IO is done but we check\n23      * for error conditions (see above).\n24      */\n25     if (count == 0)\n26         break;\n27\n28     while (read + input_event_size() <= count &&\n29            evdev_fetch_next_event(client, &event)) {\n30\n31         if (input_event_to_user(buffer + read, &event))\n32             return -EFAULT;\n33\n34         read += input_event_size();\n35     }\n36\n37     if (read)\n38         break;\n39\n40     if (!(file->f_flags & O_NONBLOCK)) {\n41         error = wait_event_interruptible(evdev->wait,\n42                 client->packet_head != client->tail ||\n43                 !evdev->exist || client->revoked);\n44         if (error)\n45             return error;\n46     }\n47 }\n48\n49 return read;\n50}\n51\n52static const struct file_operations evdev_fops = {\n53 .owner        = THIS_MODULE,\n54 .read         = evdev_read,\n55 .write        = evdev_write,\n56 .pol          = evdev_poll,\n57 .open         = evdev_open,\n58 .release      = evdev_release,\n59 .unlocked_ioct= evdev_ioctl,\n60#ifdef CONFIG_COMPAT\n61 .compat_ioct= evdev_ioctl_compat,\n62#endif\n63 .fasync        = evdev_fasync,\n64 .flush         = evdev_flush,\n65 .llseek        = no_llseek,\n66};\n")),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u768417~19\u884c\u5728\u68c0\u67e5\u51fa\u662f\u975e\u963b\u585e\u8bbf\u95ee\u540e\uff0c\u7acb\u5373\u8fd4\u56deEAGAIN\u9519\u8bef\uff0c\u800c\u7b2c29\u884c\u548c\u7b2c41~43\u884c\u7684\u4ee3\u7801\u5219\u5904\u7406\u4e86\u963b\u585e\u7684\u7761\u7720\u60c5\u51b5\u3002\u56de\u8fc7\u5934\u6765\u60f3\uff0c\u5176\u5b9egpio_keys\u9a71\u52a8\u91cc\u9762\u8c03\u7528\u7684input_event\uff08\uff09\u3001input_sync\uff08\uff09\u6709\u95f4\u63a5\u5524\u9192\u8fd9\u4e2a\u7b49\u5f85\u961f\u5217evdev->wait\u7684\u529f\u80fd\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u4ee3\u7801\u90fd\u9690\u85cf\u5728\u5176\u5185\u90e8\u5b9e\u73b0\u91cc\u4e86\u3002"),(0,o.kt)("h1",{id:"1233rtc\u8bbe\u5907\u9a71\u52a8"},"12.3.3\u3000RTC\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("p",null,"RTC\uff08\u5b9e\u65f6\u949f\uff09\u501f\u52a9\u7535\u6c60\u4f9b\u7535\uff0c\u5728\u7cfb\u7edf\u6389\u7535\u7684\u60c5\u51b5\u4e0b\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u8ba1\u65f6\u3002\u5b83\u901a\u5e38\u8fd8\u5177\u6709\u4ea7\u751f\u5468\u671f\u6027\u4e2d\u65ad\u4ee5\u53ca\u95f9\u949f\uff08Alarm\uff09\u4e2d\u65ad\u7684\u80fd\u529b\uff0c\u662f\u4e00\u79cd\u5178\u578b\u7684\u5b57\u7b26\u8bbe\u5907\u3002\u4f5c\u4e3a\u4e00\u79cd\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\uff0cRTC\u9700\u8981\u6709file_operations\u4e2d\u63a5\u53e3\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u5982open\uff08\uff09\u3001release\uff08\uff09\u3001read\uff08\uff09\u3001poll\uff08\uff09\u3001ioctl\uff08\uff09\u7b49\uff0c\u800c\u5178\u578b\u7684IOCTL\u5305\u62ecRTC_SET_TIME\u3001RTC_ALM_READ\u3001RTC_ALM_SET\u3001RTC_IRQP_SET\u3001RTC_IRQP_READ\u7b49\uff0c\u8fd9\u4e9b\u5bf9\u4e8e\u6240\u6709\u7684RTC\u662f\u901a\u7528\u7684\uff0c\u53ea\u6709\u5e95\u5c42\u7684\u5177\u4f53\u5b9e\u73b0\u662f\u4e0e\u8bbe\u5907\u76f8\u5173\u7684\u3002"),(0,o.kt)("p",null,"\u56e0\u6b64\uff0cdrivers/rtc/rtc-dev.c\u5b9e\u73b0\u4e86RTC\u9a71\u52a8\u901a\u7528\u7684\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u5c42\uff0c\u5b83\u5b9e\u73b0\u4e86file_opearations\u7684\u6210\u5458\u51fd\u6570\u4ee5\u53ca\u4e00\u4e9b\u901a\u7528\u7684\u5173\u4e8eRTC\u7684\u63a7\u5236\u4ee3\u7801\uff0c\u5e76\u5411\u5e95\u5c42\u5bfc\u51fartc_device_register\uff08\uff09\u3001rtc_device_unregister\uff08\uff09\u4ee5\u6ce8\u518c\u548c\u6ce8\u9500RTC\uff1b\u5bfc\u51fartc_class_ops\u7ed3\u6784\u4f53\u4ee5\u63cf\u8ff0\u5e95\u5c42\u7684RTC\u786c\u4ef6\u64cd\u4f5c\u3002\u8fd9\u4e2aRTC\u901a\u7528\u5c42\u5b9e\u73b0\u7684\u7ed3\u679c\u662f\uff0c\u5e95\u5c42\u7684RTC\u9a71\u52a8\u4e0d\u518d\u9700\u8981\u5173\u5fc3RTC\u4f5c\u4e3a\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u4e5f\u65e0\u9700\u5173\u5fc3\u4e00\u4e9b\u901a\u7528\u7684RTC\u63a7\u5236\u903b\u8f91\uff0c\u56fe12.7\u8868\u660e\u4e86\u8fd9\u79cd\u5173\u7cfb\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743911539487",src:n(24081).Z,width:"907",height:"487"})),(0,o.kt)("p",null,"\u56fe12.7\u3000Linux RTC\u8bbe\u5907\u9a71\u52a8\u7684\u5206\u5c42"),(0,o.kt)("p",null,"drivers/rtc/rtc-s3c.c\u5b9e\u73b0\u4e86S3C6410\u7684RTC\u9a71\u52a8\uff0c\u5176\u6ce8\u518cRTC\u4ee5\u53ca\u7ed1\u5b9artc_class_ops\u7684\u4ee3\u7801\u5982\u4ee3\u7801\u6e05\u535512.14\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.14\u3000S3C6410RTC\u9a71\u52a8\u7684rtc_class_ops\u5b9e\u4f8b\u4e0eRTC\u6ce8\u518c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1static const struct rtc_class_ops s3c_rtcops = {\n 2 .read_time     = s3c_rtc_gettime,\n 3 .set_time      = s3c_rtc_settime,\n 4 .read_alarm    = s3c_rtc_getalarm,\n 5 .set_alarm     = s3c_rtc_setalarm,\n 6 .proc          = s3c_rtc_proc,\n 7 .alarm_irq_enable = s3c_rtc_setaie,\n 8};\n 9\n10static int s3c_rtc_probe(struct platform_device *pdev)\n11{\n12 ...\n13 rtc = devm_rtc_device_register(&pdev->dev, "s3c", &s3c_rtcops,\n14               THIS_MODULE);\n15 ...\n16}\n')),(0,o.kt)("p",null,"drivers/rtc/rtc-dev.c\u4ee5\u53ca\u5176\u8c03\u7528\u7684drivers/rtc/interface.c\u7b49RTC\u6838\u5fc3\u5c42\u76f8\u5f53\u4e8e\u628afile_operations\u4e2d\u7684open\uff08\uff09\u3001release\uff08\uff09\u3001\u8bfb\u53d6\u548c\u8bbe\u7f6e\u65f6\u95f4\u7b49\u90fd\u95f4\u63a5\u201c\u8f6c\u53d1\u201d\u7ed9\u4e86\u5e95\u5c42\u7684\u5b9e\u4f8b\uff0c\u4ee3\u7801\u6e05\u535512.15\u6458\u53d6\u4e86\u90e8\u5206RTC\u6838\u5fc3\u5c42\u8c03\u7528\u5177\u4f53\u5e95\u5c42\u9a71\u52a8callback\u7684\u8fc7\u7a0b\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.15\u3000RTC\u6838\u5fc3\u5c42\u201c\u8f6c\u53d1\u201d\u5230\u5e95\u5c42RTC\u9a71\u52a8callback"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static int rtc_dev_open(struct inode *inode, struct file *file)\n 2{\n 3 ...\n 4 err = ops->open   ops->open(rtc->dev.parent) : 0;\n 5 ...\n 6}\n 7\n 8static int __rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm)\n 9{\n10 int err;\n11 if (!rtc->ops)\n12     err = -ENODEV;\n13 else if (!rtc->ops->read_time)\n14      err = -EINVAL;\n15 ...\n16 return err;\n17}\n18\n19int rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm)\n20{\n21 int err;\n22\n23 err = mutex_lock_interruptible(&rtc->ops_lock);\n24 if (err)\n25     return err;\n26\n27 err = __rtc_read_time(rtc, tm);\n28 mutex_unlock(&rtc->ops_lock);\n29 return err;\n30}\n31\n32int rtc_set_time(struct rtc_device *rtc, struct rtc_time *tm)\n33{\n34 ...\n35\n36 if (!rtc->ops)\n37     err = -ENODEV;\n38 else if (rtc->ops->set_time)\n39     err = rtc->ops->set_time(rtc->dev.parent, tm);\n40 ...\n41 return err;\n42}\n43\n44static long rtc_dev_ioctl(struct file *file,\n45     unsigned int cmd, unsigned long arg)\n46{\n47 ...\n48\n49 case RTC_RD_TIME:\n50     mutex_unlock(&rtc->ops_lock);\n51\n52     err = rtc_read_time(rtc, &tm);\n53     if (err < 0)\n54         return err;\n55\n56     if (copy_to_user(uarg, &tm, sizeof(tm)))\n57         err = -EFAULT;\n58     return err;\n59\n60 case RTC_SET_TIME:\n61     mutex_unlock(&rtc->ops_lock);\n62\n63     if (copy_from_user(&tm, uarg, sizeof(tm)))\n64         return -EFAULT;\n65\n66     return rtc_set_time(rtc, &tm);\n67 ...\n68}\n")),(0,o.kt)("h1",{id:"1234framebuffer\u8bbe\u5907\u9a71\u52a8"},"12.3.4\u3000Framebuffer\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("p",null,"Framebuffer\uff08\u5e27\u7f13\u51b2\uff09\u662fLinux\u7cfb\u7edf\u4e3a\u663e\u793a\u8bbe\u5907\u63d0\u4f9b\u7684\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5c06\u663e\u793a\u7f13\u51b2\u533a\u62bd\u8c61\uff0c\u5c4f\u853d\u56fe\u50cf\u786c\u4ef6\u7684\u5e95\u5c42\u5dee\u5f02\uff0c\u5141\u8bb8\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u5728\u56fe\u5f62\u6a21\u5f0f\u4e0b\u76f4\u63a5\u5bf9\u663e\u793a\u7f13\u51b2\u533a\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5e27\u7f13\u51b2\u8bbe\u5907\u800c\u8a00\uff0c\u53ea\u8981\u5728\u663e\u793a\u7f13\u51b2\u533a\u4e2d\u4e0e\u663e\u793a\u70b9\u5bf9\u5e94\u7684\u533a\u57df\u5185\u5199\u5165\u989c\u8272\u503c\uff0c\u5bf9\u5e94\u7684\u989c\u8272\u4f1a\u81ea\u52a8\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u3002"),(0,o.kt)("p",null,"\u56fe12.8\u6240\u793a\u4e3aLinux\u5e27\u7f13\u51b2\u8bbe\u5907\u9a71\u52a8\u7684\u4e3b\u8981\u7ed3\u6784\uff0c\u5e27\u7f13\u51b2\u8bbe\u5907\u63d0\u4f9b\u7ed9\u7528\u6237\u7a7a\u95f4\u7684file_operations\u7ed3\u6784\u4f53\u7531drivers/video/fbdev/core/fbmem.c\u4e2d\u7684file_operations\u63d0\u4f9b\uff0c\u800c\u7279\u5b9a\u5e27\u7f13\u51b2\u8bbe\u5907fb_info\u7ed3\u6784\u4f53\u7684\u6ce8\u518c\u3001\u6ce8\u9500\u4ee5\u53ca\u5176\u4e2d\u6210\u5458\u7684\u7ef4\u62a4\uff0c\u5c24\u5176\u662ffb_ops\u4e2d\u6210\u5458\u51fd\u6570\u7684\u5b9e\u73b0\u5219\u7531\u5bf9\u5e94\u7684xxxfb.c\u6587\u4ef6\u5b9e\u73b0\uff0cfb_ops\u4e2d\u7684\u6210\u5458\u51fd\u6570\u6700\u7ec8\u4f1a\u64cd\u4f5cLCD\u63a7\u5236\u5176\u786c\u4ef6\u5bc4\u5b58\u5668\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743912007495",src:n(79051).Z,width:"1366",height:"805"})),(0,o.kt)("p",null,"\u56fe12.8\u3000Linux\u5e27\u7f13\u51b2\u8bbe\u5907\u9a71\u52a8\u7684\u7a0b\u5e8f\u7ed3\u6784"),(0,o.kt)("p",null,"\u591a\u6570\u663e\u5b58\u7684\u64cd\u4f5c\u65b9\u6cd5\u90fd\u662f\u89c4\u8303\u7684\uff0c\u53ef\u4ee5\u6309\u7167\u50cf\u7d20\u70b9\u683c\u5f0f\u7684\u8981\u6c42\u987a\u5e8f\u5199\u5e27\u7f13\u51b2\u533a\u3002\u4f46\u662f\u6709\u5c11\u91cfLCD\u7684\u663e\u5b58\u5199\u6cd5\u53ef\u80fd\u6bd4\u8f83\u7279\u6b8a\uff0c\u8fd9\u65f6\u5019\uff0c\u5728\u6838\u5fc3\u5c42drivers/video/fbdev/core/fbmem.c\u5b9e\u73b0\u7684fb_write\uff08\uff09\u4e2d\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u7ed9\u5e95\u5c42\u63d0\u4f9b\u4e00\u4e2a\u91cd\u5199\u81ea\u5df1\u7684\u673a\u4f1a\uff0c\u5982\u4ee3\u7801\u6e05\u535512.16\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.16\u3000LCD\u7684framebuffer write\uff08\uff09\u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1static ssize_t\n 2fb_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)\n 3{\n 4 unsigned long p = *ppos;\n 5 struct fb_info *info = file_fb_info(file);\n 6 u8*buffer, *src;\n 7 u8__iomem *dst;\n 8 int c, cnt = 0, err = 0;\n 9 unsigned long total_size;\n10\n11 if (!info || !info->screen_base)\n12     return -ENODEV;\n13\n14 if (info->state != FBINFO_STATE_RUNNING)\n15     return -EPERM;\n16\n17 if (info->fbops->fb_write)\n18     return info->fbops->fb_write(info, buf, count, ppos);\n19\n20 total_size = info->screen_size;\n21\n22 if (total_size == 0)\n23     total_size = info->fix.smem_len;\n24\n25 if (p > total_size)\n26     return -EFBIG;\n27\n28 if (count > total_size) {\n29     err = -EFBIG;\n30     count = total_size;\n31 }\n32\n33 if (count + p > total_size) {\n34     if (!err)\n35         err = -ENOSPC;\n36\n37     count = total_size - p;\n38 }\n39\n40 buffer = kmalloc((count > PAGE_SIZE)   PAGE_SIZE : count,\n41          GFP_KERNEL);\n42 if (!buffer)\n43     return -ENOMEM;\n44\n45 dst = (u8__iomem *) (info->screen_base + p);\n46\n47 if (info->fbops->fb_sync)\n48     info->fbops->fb_sync(info);\n49\n50 while (count) {\n51     c = (count > PAGE_SIZE)   PAGE_SIZE : count;\n52     src = buffer;\n53\n54     if (copy_from_user(src, buf, c)) {\n55         err = -EFAULT;\n56         break;\n57     }\n58\n59     fb_memcpy_tofb(dst, src, c);\n60     dst += c;\n61     src += c;\n62     *ppos += c;\n63     buf += c;\n64     cnt += c;\n65     count -= c;\n66 }\n67\n68 kfree(buffer);\n69\n70 return (cnt)   cnt : err;\n71}\n")),(0,o.kt)("p",null,"\u7b2c17~18\u884c\u662f\u4e00\u4e2a\u68c0\u67e5\u5e95\u5c42LCD\u6709\u6ca1\u6709\u5b9e\u73b0\u81ea\u5df1\u7279\u6b8a\u663e\u5b58\u5199\u6cd5\u7684\u4ee3\u7801\uff0c\u5982\u679c\u6709\uff0c\u76f4\u63a5\u8c03\u5e95\u5c42\u7684\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u7528\u4e2d\u95f4\u5c42\u6807\u51c6\u7684\u663e\u5b58\u5199\u6cd5\u5c31\u641e\u5b9a\u4e86\u5e95\u5c42\u7684\u90a3\u4e2a\u4e0d\u7279\u6b8a\u7684LCD\u3002"),(0,o.kt)("h1",{id:"1235\u7ec8\u7aef\u8bbe\u5907\u9a71\u52a8"},"12.3.5\u3000\u7ec8\u7aef\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("p",null,"\u5728Linux\u7cfb\u7edf\u4e2d\uff0c\u7ec8\u7aef\u662f\u4e00\u79cd\u5b57\u7b26\u578b\u8bbe\u5907\uff0c\u5b83\u6709\u591a\u79cd\u7c7b\u578b\uff0c\u901a\u5e38\u4f7f\u7528tty\uff08Teletype\uff09\u6765\u7b80\u79f0\u5404\u79cd\u7c7b\u578b\u7684\u7ec8\u7aef\u8bbe\u5907\u3002\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u800c\u8a00\uff0c\u6700\u666e\u904d\u91c7\u7528\u7684\u662fUART\uff08Universal Asynchronous Receiver/Transmitter\uff09\u4e32\u884c\u7aef\u53e3\uff0c\u65e5\u5e38\u751f\u6d3b\u4e2d\u7b80\u79f0\u4e32\u53e3\u3002"),(0,o.kt)("p",null,"Linux\u5185\u6838\u4e2dtty\u7684\u5c42\u6b21\u7ed3\u6784\u5982\u56fe12.9\u6240\u793a\uff0c\u5b83\u5305\u542btty\u6838\u5fc3tty_io.c\u3001tty\u7ebf\u8def\u89c4\u7a0bn_tty.c\uff08\u5b9e\u73b0N_TTY\u7ebf\u8def\u89c4\u7a0b\uff09\u548ctty\u9a71\u52a8\u5b9e\u4f8bxxx_tty.c\uff0ctty\u7ebf\u8def\u89c4\u7a0b\u7684\u5de5\u4f5c\u662f\u4ee5\u7279\u6b8a\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u4ece\u4e00\u4e2a\u7528\u6237\u6216\u8005\u786c\u4ef6\u6536\u5230\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u683c\u5f0f\u5316\u5e38\u5e38\u91c7\u7528\u4e00\u4e2a\u534f\u8bae\u8f6c\u6362\u7684\u5f62\u5f0f\u3002"),(0,o.kt)("p",null,"tty_io.c\u672c\u8eab\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\uff0c\u5b83\u5bf9\u4e0a\u6709\u5b57\u7b26\u8bbe\u5907\u7684\u804c\u8d23\uff0c\u5b9e\u73b0file_operations\u6210\u5458\u51fd\u6570\u3002\u4f46\u662ftty\u6838\u5fc3\u5c42\u5bf9\u4e0b\u53c8\u5b9a\u4e49\u4e86tty_driver\u7684\u67b6\u6784\uff0c\u8fd9\u6837tty\u8bbe\u5907\u9a71\u52a8\u7684\u4e3b\u4f53\u5de5\u4f5c\u5c31\u53d8\u6210\u4e86\u586b\u5145tty_driver\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\uff0c\u5b9e\u73b0\u5176\u4e2d\u7684tty_operations\u7684\u6210\u5458\u51fd\u6570\uff0c\u800c\u4e0d\u518d\u662f\u53bb\u5b9e\u73b0file_operations\u8fd9\u4e00\u7ea7\u7684\u5de5\u4f5c\u3002tty_driver\u7ed3\u6784\u4f53\u548ctty_operations\u7684\u5b9a\u4e49\u5206\u522b\u5982\u4ee3\u7801\u6e05\u535512.17\u548c12.18\u6240\u793a\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743912094969",src:n(81816).Z,width:"897",height:"511"})),(0,o.kt)("p",null,"\u56fe12.9\u3000Linux\u5185\u6838\u4e2dtty\u7684\u5c42\u6b21\u7ed3\u6784"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.17\u3000tty_driver\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct tty_driver {\n 2      int     magic;                  /* magic number for this structure */\n 3      struct kref kref;               /* Reference management */\n 4      struct cdev *cdevs;\n 5      struct module   *owner;\n 6      const char      *driver_name;\n 7      const char      *name;\n 8      int     name_base;              /* offset of printed name */\n 9      int     major;                  /* major device number */\n10      int     minor_start;            /* start of minor device number */\n11      unsigned int    num;            /* number of devices allocated */\n12      short   type;                   /* type of tty driver */\n13      short   subtype;                /* subtype of tty driver */\n14      struct ktermios init_termios;   /* Initial termios */\n15      unsigned long   flags;          /* tty driver flags */\n16      struct proc_dir_entry *proc_entry;   /* /proc fs entry */\n17      struct tty_driver *other;       /* only used for the PTY driver */\n18\n19      /*\n20       * Pointer to the tty data structures\n21       */\n22      struct tty_struct **ttys;\n23      struct tty_port **ports;\n24      struct ktermios **termios;\n25      void *driver_state;\n26\n27      /*\n28       * Driver methods\n29       */\n30\n31      const struct tty_operations *ops;\n32      struct list_head tty_drivers;\n33};\n")),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.18\u3000tty_operations\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct tty_operations {\n 2 struct tty_struct * (*lookup)(struct tty_driver *driver,\n 3          struct inode *inode, int idx);\n 4 int  (*install)(struct tty_driver *driver, struct tty_struct *tty);\n 5 void (*remove)(struct tty_driver *driver, struct tty_struct *tty);\n 6 int  (*open)(struct tty_struct * tty, struct file * filp);\n 7 void (*close)(struct tty_struct * tty, struct file * filp);\n 8 void (*shutdown)(struct tty_struct *tty);\n 9 void (*cleanup)(struct tty_struct *tty);\n10 int  (*write)(struct tty_struct * tty,\n11           const unsigned char *buf, int count);\n12 int  (*put_char)(struct tty_struct *tty, unsigned char ch);\n13 void (*flush_chars)(struct tty_struct *tty);\n14 int  (*write_room)(struct tty_struct *tty);\n15 int  (*chars_in_buffer)(struct tty_struct *tty);\n16 int  (*ioctl)(struct tty_struct *tty,\n17         unsigned int cmd, unsigned long arg);\n18 long (*compat_ioctl)(struct tty_struct *tty,\n19                 unsigned int cmd, unsigned long arg);\n20 void (*set_termios)(struct tty_struct *tty, struct ktermios * old);\n21 void (*throttle)(struct tty_struct * tty);\n22 void (*unthrottle)(struct tty_struct * tty);\n23 void (*stop)(struct tty_struct *tty);\n24 void (*start)(struct tty_struct *tty);\n25 void (*hangup)(struct tty_struct *tty);\n26 int (*break_ctl)(struct tty_struct *tty, int state);\n27 void (*flush_buffer)(struct tty_struct *tty);\n28 void (*set_ldisc)(struct tty_struct *tty);\n29 void (*wait_until_sent)(struct tty_struct *tty, int timeout);\n30 void (*send_xchar)(struct tty_struct *tty, char ch);\n31 int (*tiocmget)(struct tty_struct *tty);\n32 int (*tiocmset)(struct tty_struct *tty,\n33         unsigned int set, unsigned int clear);\n34 int (*resize)(struct tty_struct *tty, struct winsize *ws);\n35 int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);\n36 int (*get_icount)(struct tty_struct *tty,\n37             struct serial_icounter_struct *icount);\n38#ifdef CONFIG_CONSOLE_POLL\n39 int (*poll_init)(struct tty_driver *driver, int line, char *options);\n40 int (*poll_get_char)(struct tty_driver *driver, int line);\n41 void (*poll_put_char)(struct tty_driver *driver, int line, char ch);\n42#endif\n43 const struct file_operations *proc_fops;\n44};\n")),(0,o.kt)("p",null,"\u5982\u56fe12.10\u6240\u793a\uff0ctty\u8bbe\u5907\u53d1\u9001\u6570\u636e\u7684\u6d41\u7a0b\u4e3a\uff1atty\u6838\u5fc3\u4ece\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u5c06\u8981\u53d1\u9001\u7ed9\u4e00\u4e2atty\u8bbe\u5907\u7684\u6570\u636e\uff0ctty\u6838\u5fc3\u5c06\u6570\u636e\u4f20\u9012\u7ed9tty\u7ebf\u8def\u89c4\u7a0b\u9a71\u52a8\uff0c\u63a5\u7740\u6570\u636e\u88ab\u4f20\u9012\u5230tty\u9a71\u52a8\uff0ctty\u9a71\u52a8\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u4ee5\u53d1\u9001\u7ed9\u786c\u4ef6\u7684\u683c\u5f0f\u3002\u63a5\u6536\u6570\u636e\u7684\u6d41\u7a0b\u4e3a\uff1a\u4ecetty\u786c\u4ef6\u63a5\u6536\u5230\u7684\u6570\u636e\u5411\u4e0a\u4ea4\u7ed9tty\u9a71\u52a8\uff0c\u63a5\u7740\u8fdb\u5165tty\u7ebf\u8def\u89c4\u7a0b\u9a71\u52a8\uff0c\u518d\u8fdb\u5165tty\u6838\u5fc3\uff0c\u5728\u8fd9\u91cc\u5b83\u88ab\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743949417804",src:n(98027).Z,width:"741",height:"1062"})),(0,o.kt)("p",null,"\u56fe12.10\u3000tty\u8bbe\u5907\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e\u6d41\u7684\u6d41\u7a0b"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.18\u4e2d\u7b2c10\u884c\u7684tty_driver\u64cd\u4f5c\u96c6tty_operations\u7684\u6210\u5458\u51fd\u6570write\uff08\uff09\u51fd\u6570\u63a5\u65363\u4e2a\u53c2\u6570\uff1atty_struct\u3001\u53d1\u9001\u6570\u636e\u6307\u9488\u53ca\u8981\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002\u8be5\u51fd\u6570\u662f\u88abfile_operations\u7684write\uff08\uff09\u6210\u5458\u51fd\u6570\u95f4\u63a5\u89e6\u53d1\u8c03\u7528\u7684\u3002\u4ece\u63a5\u6536\u89d2\u5ea6\u770b\uff0ctty\u9a71\u52a8\u4e00\u822c\u6536\u5230\u5b57\u7b26\u540e\u4f1a\u901a\u8fc7tty_flip_buffer_push\uff08\uff09\u5c06\u63a5\u6536\u7f13\u51b2\u533a\u63a8\u5230\u7ebf\u8def\u89c4\u7a0b\u3002"),(0,o.kt)("p",null,"\u5c3d\u7ba1\u4e00\u4e2a\u7279\u5b9a\u7684\u5e95\u5c42UART\u8bbe\u5907\u9a71\u52a8\u5b8c\u5168\u53ef\u4ee5\u9075\u5faa\u4e0a\u8ff0tty_driver\u7684\u65b9\u6cd5\u6765\u8bbe\u8ba1\uff0c\u5373\u5b9a\u4e49tty_driver\u5e76\u5b9e\u73b0tty_operations\u4e2d\u7684\u6210\u5458\u51fd\u6570\uff0c\u4f46\u662f\u9274\u4e8e\u4e32\u53e3\u4e4b\u95f4\u7684\u5171\u6027\uff0cLinux\u8003\u8651\u5728\u6587\u4ef6drivers/tty/serial/serial_core.c\u4e2d\u5b9e\u73b0\u4e86UART\u8bbe\u5907\u7684\u901a\u7528tty\u9a71\u52a8\u5c42\uff08\u6211\u4eec\u53ef\u4ee5\u79f0\u5176\u4e3a\u4e32\u53e3\u6838\u5fc3\u5c42\uff09\u3002\u8fd9\u6837\uff0cUART\u9a71\u52a8\u7684\u4e3b\u8981\u4efb\u52a1\u5c31\u8fdb\u4e00\u6b65\u6f14\u53d8\u6210\u4e86\u5b9e\u73b0serial-core.c\u4e2d\u5b9a\u4e49\u7684\u4e00\u7ec4uart_xxx\u63a5\u53e3\u800c\u4e0d\u662ftty_xxx\u63a5\u53e3\uff0c\u5982\u56fe12.11\u6240\u793a\u3002\u56e0\u6b64\uff0c\u6309\u7167\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u8ba4\u4e3atty_driver\u662f\u5b57\u7b26\u8bbe\u5907\u7684\u6cdb\u5316\u3001serial-core\u662ftty_driver\u7684\u6cdb\u5316\uff0c\u800c\u5177\u4f53\u7684\u4e32\u53e3\u9a71\u52a8\u53c8\u662fserial-core\u7684\u6cdb\u5316\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743949470945",src:n(51435).Z,width:"927",height:"654"})),(0,o.kt)("p",null,"\u56fe12.11\u3000\u4e32\u53e3\u6838\u5fc3\u5c42"),(0,o.kt)("p",null,"\u4e32\u53e3\u6838\u5fc3\u5c42\u53c8\u5b9a\u4e49\u4e86\u65b0\u7684uart_driver\u7ed3\u6784\u4f53\u548c\u5176\u64cd\u4f5c\u96c6uart_ops\u3002\u4e00\u4e2a\u5e95\u5c42\u7684UART\u9a71\u52a8\u9700\u8981\u521b\u5efa\u548c\u901a\u8fc7uart_register_driver\uff08\uff09\u6ce8\u518c\u4e00\u4e2auart_driver\u800c\u4e0d\u662ftty_driver\uff0c\u4ee3\u7801\u6e05\u535512.19\u7ed9\u51fa\u4e86uart_driver\u7684\u5b9a\u4e49\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.19\u3000uart_driver\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct uart_driver {\n 2      struct module           *owner;\n 3      const char              *driver_name;\n 4      const char              *dev_name;\n 5      int                      major;\n 6      int                      minor;\n 7      int                      nr;\n 8      struct console          *cons;\n 9\n10      /*\n11       * these are private; the low level driver should not\n12       * touch these; they should be initialised to NULL\n13       */\n14      struct uart_state       *state;\n15      struct tty_driver       *tty_driver;\n16};\n")),(0,o.kt)("p",null,"uart_driver\u7ed3\u6784\u4f53\u5728\u672c\u8d28\u4e0a\u662f\u6d3e\u751f\u81eauart_driver\u7ed3\u6784\u4f53\uff0c\u56e0\u6b64\uff0c\u5b83\u7684\u7b2c15\u884c\u4e5f\u5305\u542b\u4e86\u4e00\u4e2atty_driver\u7ed3\u6784\u4f53\u6210\u5458\u3002tty_operations\u5728UART\u8fd9\u4e2a\u5c42\u9762\u4e0a\u4e5f\u88ab\u8fdb\u4e00\u6b65\u6cdb\u5316\u4e3a\u4e86uart_ops\uff0c\u5176\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535512.20\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.20\u3000uart_ops\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct uart_ops {\n 2 unsigned int    (*tx_empty)(struct uart_port *);\n 3 void        (*set_mctrl)(struct uart_port *, unsigned int mctrl);\n 4 unsigned int    (*get_mctrl)(struct uart_port *);\n 5 void        (*stop_tx)(struct uart_port *);\n 6 void        (*start_tx)(struct uart_port *);\n 7 void        (*throttle)(struct uart_port *);\n 8 void        (*unthrottle)(struct uart_port *);\n 9 void        (*send_xchar)(struct uart_port *, char ch);\n10 void        (*stop_rx)(struct uart_port *);\n11 void        (*enable_ms)(struct uart_port *);\n12 void        (*break_ctl)(struct uart_port *, int ctl);\n13 int         (*startup)(struct uart_port *);\n14 void        (*shutdown)(struct uart_port *);\n15 void        (*flush_buffer)(struct uart_port *);\n16 void        (*set_termios)(struct uart_port *, struct ktermios *new,\n17                    struct ktermios *old);\n18 void        (*set_ldisc)(struct uart_port *, struct ktermios *);\n19 void        (*pm)(struct uart_port *, unsigned int state,\n20               unsigned int oldstate);\n21\n22 const char    *(*type)(struct uart_port *);\n23\n24 void        (*release_port)(struct uart_port *);\n25\n26 int         (*request_port)(struct uart_port *);\n27 void        (*config_port)(struct uart_port *, int);\n28 int         (*verify_port)(struct uart_port *, struct serial_struct *);\n29 int         (*ioctl)(struct uart_port *, unsigned int, unsigned long);\n30#ifdef CONFIG_CONSOLE_POLL\n31 int         (*poll_init)(struct uart_port *);\n32 void        (*poll_put_char)(struct uart_port *, unsigned char);\n33 int         (*poll_get_char)(struct uart_port *);\n34#endif\n35};\n")),(0,o.kt)("p",null,"\u7531\u4e8edrivers/tty/serial/serial_core.c\u662f\u4e00\u4e2atty_driver\uff0c\u56e0\u6b64\u5728serial_core.c\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2atty_operations\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u6210\u5458\u51fd\u6570\u4f1a\u8fdb\u4e00\u6b65\u8c03\u7528struct uart_ops\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u628afile_operations\u91cc\u7684\u6210\u5458\u51fd\u6570\u3001tty_operations\u7684\u6210\u5458\u51fd\u6570\u548cuart_ops\u7684\u6210\u5458\u51fd\u6570\u4e32\u8d77\u6765\u4e86\u3002"),(0,o.kt)("h1",{id:"1236misc\u8bbe\u5907\u9a71\u52a8"},"12.3.6\u3000misc\u8bbe\u5907\u9a71\u52a8"),(0,o.kt)("p",null,'\u7531\u4e8eLinux\u9a71\u52a8\u503e\u5411\u4e8e\u5206\u5c42\u8bbe\u8ba1\uff0c\u6240\u4ee5\u5404\u4e2a\u5177\u4f53\u7684\u8bbe\u5907\u90fd\u53ef\u4ee5\u627e\u5230\u5b83\u5f52\u5c5e\u7684\u7c7b\u578b\uff0c\u4ece\u800c\u5957\u5230\u5b83\u76f8\u5e94\u7684\u67b6\u6784\u91cc\u9762\u53bb\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u5b9e\u73b0\u6700\u5e95\u5c42\u7684\u90a3\u4e00\u90e8\u5206\u3002\u4f46\u662f\uff0c\u4e5f\u6709\u90e8\u5206\u7c7b\u4f3cglobalmem\u3001globalfifo\u7684\u5b57\u7b26\u8bbe\u5907\uff0c\u786e\u5b9e\u4e0d\u77e5\u9053\u5b83\u5c5e\u4e8e\u4ec0\u4e48\u7c7b\u578b\uff0c\u6211\u4eec\u4e00\u822c\u63a8\u8350\u5927\u5bb6\u91c7\u7528miscdevice\u6846\u67b6\u7ed3\u6784\u3002miscdevice\u672c\u8d28\u4e0a\u4e5f\u662f\u5b57\u7b26\u8bbe\u5907\uff0c\u53ea\u662f\u5728miscdevice\u6838\u5fc3\u5c42\u7684misc_init\uff08\uff09\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7register_chrdev\uff08MISC_MAJOR\uff0c"misc"\uff0c&misc_fops\uff09\u6ce8\u518c\u4e86\u5b57\u7b26\u8bbe\u5907\uff0c\u800c\u5177\u4f53miscdevice\u5b9e\u4f8b\u8c03\u7528misc_register\uff08\uff09\u7684\u65f6\u5019\u53c8\u81ea\u52a8\u5b8c\u6210\u4e86device_create\uff08\uff09\u3001\u83b7\u53d6\u52a8\u6001\u6b21\u8bbe\u5907\u53f7\u7684\u52a8\u4f5c\u3002'),(0,o.kt)("p",null,"miscdevice\u7684\u4e3b\u8bbe\u5907\u53f7\u662f\u56fa\u5b9a\u7684\uff0cMISC_MAJOR\u5b9a\u4e49\u4e3a10\uff0c\u5728Linux\u5185\u6838\u4e2d\uff0c\u5927\u6982\u53ef\u4ee5\u627e\u5230200\u591a\u5904\u4f7f\u7528miscdevice\u6846\u67b6\u7ed3\u6784\u7684\u9a71\u52a8\u3002"),(0,o.kt)("p",null,"miscdevice\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4ee3\u7801\u6e05\u535512.21\u6240\u793a\uff0c\u5728\u5b83\u7684\u7b2c4\u884c\uff0c\u6307\u5411\u4e86\u4e00\u4e2afile_operations\u7684\u7ed3\u6784\u4f53\u3002miscdevice\u7ed3\u6784\u4f53\u5185file_operations\u4e2d\u7684\u6210\u5458\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u7531drivers/char/misc.c\u4e2dmisc\u9a71\u52a8\u6838\u5fc3\u5c42\u7684misc_fops\u6210\u5458\u51fd\u6570\u95f4\u63a5\u8c03\u7528\u7684\uff0c\u6bd4\u5982misc_open\uff08\uff09\u5c31\u4f1a\u95f4\u63a5\u8c03\u7528\u5e95\u5c42\u6ce8\u518c\u7684miscdevice\u7684fops->open\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.21\u3000miscdevice\u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 1struct miscdevice  {\n 2      int minor;\n 3      const char *name;\n 4      const struct file_operations *fops;\n 5      struct list_head list;\n 6      struct device *parent;\n 7      struct device *this_device;\n 8      const char *nodename;\n 9      umode_t mode;\n10};\n")),(0,o.kt)("p",null,"\u5982\u679c\u4e0a\u8ff0\u4ee3\u7801\u7b2c2\u884c\u7684minor\u4e3aMISC_DYNAMIC_MINOR\uff0cmiscdevice\u6838\u5fc3\u5c42\u4f1a\u81ea\u52a8\u627e\u4e00\u4e2a\u7a7a\u95f2\u7684\u6b21\u8bbe\u5907\u53f7\uff0c\u5426\u5219\u7528minor\u6307\u5b9a\u7684\u6b21\u8bbe\u5907\u53f7\u3002\u7b2c3\u884c\u7684name\u662f\u8bbe\u5907\u7684\u540d\u79f0\u3002"),(0,o.kt)("p",null,"miscdevice\u9a71\u52a8\u7684\u6ce8\u518c\u548c\u6ce8\u9500\u5206\u522b\u7528\u4e0b\u9762\u4e24\u4e2aAPI"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int misc_register(struct miscdevice * misc);\nint misc_deregister(struct miscdevice *misc);\n")),(0,o.kt)("p",null,"\u56e0\u6b64miscdevice\u9a71\u52a8\u7684\u4e00\u822c\u7ed3\u6784\u5f62\u5982\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'static const struct file_operations xxx_fops = {\n       .unlocked_ioctl = xxx_ioctl,\n       .mmap           = xxx_mmap,\n            \u2026\n};\nstatic struct miscdevice xxx_dev = {\n       .minor  = MISC_DYNAMIC_MINOR,\n       .name   = "xxx",\n       .fops   = &xxx_fops\n};\nstatic int __init xxx_init(void)\n{\n       pr_info("ARC Hostlink driver mmap at 0x%p\\n", __HOSTLINK__);\n       return misc_register(&xxx_dev);\n}\n')),(0,o.kt)("p",null,"\u5728\u8c03\u7528misc_register\uff08&xxx_dev\uff09\u65f6\uff0c\u8be5\u51fd\u6570\u5185\u90e8\u4f1a\u81ea\u52a8\u8c03\u7528device_create\uff08\uff09\uff0c\u800cdevice_create\uff08\uff09\u4f1a\u4ee5xxx_dev\u4f5c\u4e3adrvdata\u53c2\u6570\u3002\u5176\u6b21\uff0c\u5728miscdevice\u6838\u5fc3\u5c42misc_open\uff08\uff09\u51fd\u6570\u7684\u5e2e\u52a9\u4e0b\uff0c\u5728file_operations\u7684\u6210\u5458\u51fd\u6570\u4e2d\uff0cxxx_dev\u4f1a\u81ea\u52a8\u6210\u4e3afile\u7684private_data\uff08misc_open\u4f1a\u5b8c\u6210file->private_data\u7684\u8d4b\u503c\u64cd\u4f5c\uff09\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u6211\u4eec\u7528\u9762\u5411\u5bf9\u8c61\u7684\u5c01\u88c5\u601d\u60f3\u628a\u4e00\u4e2a\u8bbe\u5907\u7684\u5c5e\u6027\u3001\u81ea\u65cb\u9501\u3001\u4e92\u65a5\u4f53\u3001\u7b49\u5f85\u961f\u5217\u3001miscdevice\u7b49\u5c01\u88c5\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct xxx_dev {\n     unsigned int version;\n     unsigned int size;\n     spinlock_t lock;\n    ...\n    struct miscdevice miscdev;\n};\n")),(0,o.kt)("p",null,"\u5728file_operations\u7684\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7container_of\uff08\uff09\u548cfile->private_data\u53cd\u63a8\u51faxxx_dev\u7684\u5b9e\u4f8b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"static long xxx_ioctl(struct file *file, unsigned int cmd, unsigned long arg)\n {\n    struct xxx_dev *xxx = container_of(file->private_data,\n                struct xxx_dev, miscdev);\n    ...\n}\n")),(0,o.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u628aglobalfifo\u9a71\u52a8\u6539\u9020\u6210\u57fa\u4e8eplatform_driver\u4e14\u91c7\u7528miscdevice\u6846\u67b6\u7684\u7ed3\u6784\u4f53\u3002\u9996\u5148\u8fd9\u4e2a\u65b0\u7684\u9a71\u52a8\u53d8\u6210\u4e86\u8981\u901a\u8fc7platform_driver\u7684probe\uff08\uff09\u51fd\u6570\u6765\u521d\u59cb\u5316\uff0c\u5176\u6b21\u4e0d\u518d\u76f4\u63a5\u91c7\u7528register_chrdev\uff08\uff09\u3001cdev_add\uff08\uff09\u4e4b\u7c7b\u7684\u539f\u59cbAPI\uff0c\u800c\u91c7\u7528miscdevice\u7684\u6ce8\u518c\u65b9\u6cd5\u3002\u4ee3\u7801\u6e05\u535512.22\u5217\u51fa\u4e86\u65b0\u7684globalfifo\u9a71\u52a8\u76f8\u5bf9\u4e8e\u7b2c9\u7ae0globalfifo\u9a71\u52a8\u53d8\u5316\u7684\u90e8\u5206\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.22\u3000\u65b0\u7684globalfifo\u9a71\u52a8\u76f8\u5bf9\u4e8e\u7b2c9\u7ae0globalfifo\u9a71\u52a8\u53d8\u5316\u7684\u90e8\u5206"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1struct globalfifo_dev {\n 2    ...\n 3    struct miscdevice miscdev;\n 4};\n 5\n 6static int globalfifo_fasync(int fd, struct file *filp, int mode)\n 7{\n 8    struct globalfifo_dev *dev = container_of(filp->private_data,\n 9        struct globalfifo_dev, miscdev);\n10    ...\n11}\n12\n13static long globalfifo_ioctl(struct file *filp, unsigned int cmd,\n14                 unsigned long arg)\n15{\n16    struct globalfifo_dev *dev = container_of(filp->private_data,\n17        struct globalfifo_dev, miscdev);\n18    ...\n19}\n20\n21static unsigned int globalfifo_poll(struct file *filp, poll_table * wait)\n22{\n23    struct globalfifo_dev *dev = container_of(filp->private_data,\n24        struct globalfifo_dev, miscdev);\n25    ...\n26}\n27\n28static ssize_t globalfifo_read(struct file *filp, char __user *buf,\n29                   size_t count, loff_t *ppos)\n30{\n31    struct globalfifo_dev *dev = container_of(filp->private_data,\n32        struct globalfifo_dev, miscdev);\n33    ...\n34}\n35\n36static ssize_t globalfifo_write(struct file *filp, const char __user *buf,\n37                size_t count, loff_t *ppos)\n38{\n39    struct globalfifo_dev *dev = container_of(filp->private_data,\n40        struct globalfifo_dev, miscdev);\n41    ...\n42}\n43\n44static int globalfifo_probe(struct platform_device *pdev)\n45{\n46    struct globalfifo_dev *gl;\n47    int ret;\n48\n49    gl = devm_kzalloc(&pdev->dev, sizeof(*gl), GFP_KERNEL);\n50    if (!gl)\n51        return -ENOMEM;\n52    gl->miscdev.minor = MISC_DYNAMIC_MINOR;\n53    gl->miscdev.name = "globalfifo";\n54    gl->miscdev.fops = &globalfifo_fops;\n55\n56    mutex_init(&gl->mutex);\n57    init_waitqueue_head(&gl->r_wait);\n58    init_waitqueue_head(&gl->w_wait);\n59    platform_set_drvdata(pdev, gl);\n60\n61    ret = misc_register(&gl->miscdev);\n62    if (ret < 0)\n63        goto err;\n64    ...\n65    return 0;\n66err:\n67    return ret;\n68}\n69\n70static int globalfifo_remove(struct platform_device *pdev)\n71{\n72    struct globalfifo_dev *gl = platform_get_drvdata(pdev);\n73    misc_deregister(&gl->miscdev);\n74    return 0;\n75}\n76\n77static struct platform_driver globalfifo_driver = {\n78    .driver = {\n79        .name = "globalfifo",\n80        .owner = THIS_MODULE,\n81    },\n82    .probe = globalfifo_probe,\n83    .remove = globalfifo_remove,\n84};\n85module_platform_driver(globalfifo_driver);\n')),(0,o.kt)("p",null,"\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cfile_operations\u7684\u5404\u4e2a\u6210\u5458\u51fd\u6570\u90fd\u4f7f\u7528container_of\uff08\uff09\u53cd\u5411\u6c42\u51faprivate_data\uff0c\u7b2c61\u884c\u5728platform_driver\u7684probe\uff08\uff09\u51fd\u6570\u4e2d\u5b8c\u6210\u4e86miscdev\u7684\u6ce8\u518c\uff0c\u800c\u5728remove\uff08\uff09\u51fd\u6570\u4e2d\u4f7f\u7528misc_deregister\uff08\uff09\u5b8c\u6210\u4e86miscdev\u7684\u6ce8\u9500\u3002"),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e5f\u6539\u7528\u4e86platform_device\u548cplatform_driver\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u6a21\u5757\u6765\u5b8c\u6210platform_device\u7684\u6ce8\u518c\uff0c\u5728\u6a21\u5757\u521d\u59cb\u5316\u7684\u65f6\u5019\u901a\u8fc7platform_device_alloc\uff08\uff09\u548cplatform_device_add\uff08\uff09\u5206\u914d\u5e76\u6dfb\u52a0platform_device\uff0c\u800c\u5728\u6a21\u5757\u5378\u8f7d\u7684\u65f6\u5019\u5219\u901a\u8fc7platform_device_unregister\uff08\uff09\u6ce8\u9500platform_device\uff0c\u5982\u4ee3\u7801\u6e05\u535512.23\u6240\u793a\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u6e05\u535512.23\u3000\u4e0eglobalfifo\u5bf9\u5e94\u7684platform_device\u7684\u6ce8\u518c\u548c\u6ce8\u9500"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' 1static struct platform_device *globalfifo_pdev;\n 2\n 3static int __init globalfifodev_init(void)\n 4{\n 5        int ret;\n 6\n 7        globalfifo_pdev = platform_device_alloc("globalfifo", -1);\n 8        if (!globalfifo_pdev)\n 9                return -ENOMEM;\n10\n11        ret = platform_device_add(globalfifo_pdev);\n12        if (ret) {\n13                platform_device_put(globalfifo_pdev);\n14                return ret;\n15        }\n16\n17        return 0;\n18\n19}\n20module_init(globalfifodev_init);\n21\n22static void __exit globalfifodev_exit(void)\n23{\n24        platform_device_unregister(globalfifo_pdev);\n25}\n26module_exit(globalfifodev_exit);\n')),(0,o.kt)("p",null,"\u672c\u4e66\u914d\u5957\u4ee3\u7801/home/baohua/develop/training/kernel/drivers/globalfifo/ch12\u4e2d\u5305\u542b\u4e86globalfifo driver\u548cdevice\u7aef\u7684\u4e24\u4e2a\u6a21\u5757\u3002\u5728\u8be5\u76ee\u5f55\u8fd0\u884cmake\uff0c\u4f1a\u751f\u6210\u4e24\u4e2a\u6a21\u5757\uff1aglobalfifo.ko\u548cglobalfifo-dev.ko\uff0c\u628aglobalfifo.ko\u548cglobalfifo-dev.ko\u5148\u540einsmod\uff0c\u4f1a\u5bfc\u81f4platform_driver\u548cplatform_device\u7684\u5339\u914d\uff0cglobalfifo_probe\uff08\uff09\u4f1a\u6267\u884c\uff0c/dev/globalfifo\u8282\u70b9\u4f1a\u81ea\u52a8\u751f\u6210\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9700\u8981root\u6743\u9650\u6765\u8bbf\u95ee/dev/globalfifo\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u6b64\u540e\u6211\u4eecrmmod globalfifo-dev.ko\uff0c\u5219\u4f1a\u5bfc\u81f4platform_driver\u7684remove\uff08\uff09\u6210\u5458\u51fd\u6570\uff0c\u5373globalfifo_remove\uff08\uff09\u51fd\u6570\u88ab\u6267\u884c\uff0c/dev/globalfifo\u8282\u70b9\u4f1a\u81ea\u52a8\u6d88\u5931\u3002"),(0,o.kt)("h1",{id:"1237\u9a71\u52a8\u6838\u5fc3\u5c42"},"12.3.7\u3000\u9a71\u52a8\u6838\u5fc3\u5c42"),(0,o.kt)("p",null,"\u5206\u6790\u4e86\u4e0a\u8ff0\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f52\u7eb3\u51fa\u6838\u5fc3\u5c42\u80a9\u8d1f\u76843\u5927\u804c\u8d23\uff1a"),(0,o.kt)("p",null,"1\uff09\u5bf9\u4e0a\u63d0\u4f9b\u63a5\u53e3\u3002file_operations\u7684\u8bfb\u3001\u5199\u3001ioctl\u90fd\u88ab\u4e2d\u95f4\u5c42\u641e\u5b9a\uff0c\u5404\u79cdI/O\u6a21\u578b\u4e5f\u88ab\u5904\u7406\u6389\u4e86\u3002"),(0,o.kt)("p",null,"2\uff09\u4e2d\u95f4\u5c42\u5b9e\u73b0\u901a\u7528\u903b\u8f91\u3002\u53ef\u4ee5\u88ab\u5e95\u5c42\u5404\u79cd\u5b9e\u4f8b\u5171\u4eab\u7684\u4ee3\u7801\u90fd\u88ab\u4e2d\u95f4\u5c42\u641e\u5b9a\uff0c\u907f\u514d\u5e95\u5c42\u91cd\u590d\u5b9e\u73b0\u3002"),(0,o.kt)("p",null,"3\uff09\u5bf9\u4e0b\u5b9a\u4e49\u6846\u67b6\u3002\u5e95\u5c42\u7684\u9a71\u52a8\u4e0d\u518d\u9700\u8981\u5173\u5fc3Linux\u5185\u6838VFS\u7684\u63a5\u53e3\u548c\u5404\u79cd\u53ef\u80fd\u7684I/O\u6a21\u578b\uff0c\u800c\u53ea\u9700\u5904\u7406\u4e0e\u5177\u4f53\u786c\u4ef6\u76f8\u5173\u7684\u8bbf\u95ee\u3002"),(0,o.kt)("p",null,"\u8fd9\u79cd\u5206\u5c42\u6709\u65f6\u5019\u8fd8\u4e0d\u662f\u4e24\u5c42\uff0c\u53ef\u4ee5\u6709\u66f4\u591a\u5c42\uff0c\u5728\u8f6f\u4ef6\u4e0a\u5448\u73b0\u4e3a\u9762\u5411\u5bf9\u8c61\u91cc\u7c7b\u7ee7\u627f\u548c\u591a\u6001\u7684\u72b6\u6001\u3002\u4e0a\u4e00\u8282\u4ecb\u7ecd\u7684\u7ec8\u7aef\u8bbe\u5907\u9a71\u52a8\uff0c\u5728\u8f6f\u4ef6\u5c42\u6b21\u4e0a\u7c7b\u4f3c\u56fe12.12\u7684\u6548\u679c\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1743949827184",src:n(15492).Z,width:"331",height:"550"})),(0,o.kt)("p",null,"\u56fe12.12\u3000tty\u9a71\u52a8\u5404\u5c42\u6cdb\u5316"))}d.isMDXComponent=!0},66434:function(t,e,n){e.Z=n.p+"assets/images/1743910600543-d02d56ea80fecdd05e5ea57285cff529.png"},20436:function(t,e,n){e.Z=n.p+"assets/images/1743911207521-64c305fa927dd1735ac1ade31f2f3d3d.png"},24081:function(t,e,n){e.Z=n.p+"assets/images/1743911539487-9fa10107f0ad0ca4d3fb8fc16e8f8cd9.png"},79051:function(t,e,n){e.Z=n.p+"assets/images/1743912007495-aaa31d8e9aaabef1db450c248aa3f832.png"},81816:function(t,e,n){e.Z=n.p+"assets/images/1743912094969-cca7f97f22f81f9ee17bec2ea8527f3d.png"},98027:function(t,e,n){e.Z=n.p+"assets/images/1743949417804-5fc2c2172627c27de8f4fa2602247a23.png"},51435:function(t,e,n){e.Z=n.p+"assets/images/1743949470945-94ff25cef64847f9b26fde4100476734.png"},15492:function(t,e,n){e.Z=n.p+"assets/images/1743949827184-2ca392615809b015f21a14e91917ad72.png"}}]);